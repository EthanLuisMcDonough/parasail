//  Prototype ParaSail-based Hardware Design Language (Phiddle)
//  We are mostly using VHDL vocabulary (entity, signal, port).

interface Phiddle<> is
   type Part_Kind is Enum<[#entity, #signal, #port]>;

   type In_Or_Out is Enum<[#in, #out, #inout]>;

   const Max_Width := 256;
   type Bits is new Integer<Range => 0 .. Max_Width>;
   //  A count of bits

   //  We use enumeration literals for naming
   type Entity_Name is new Univ_Enumeration;
   type Port_Name is new Univ_Enumeration;
   type Signal_Name is new Univ_Enumeration;

   interface Unsigned_Value<Width : Bits := 1>
     extends Integer<> is    --  tbd:stt <0 .. 2**Width-1> is
    //  An unsigned integer type with the given number of bits

      op "slicing"(Val : Base_Type is Unsigned_Value<>;
                   Select : Countable_Range<Bits>)
       {Select.First >= 0 and then Select.Last < Base_Type::Width
        and then Select.Last - Select.First + 1 == Width}
        -> Unsigned_Value;
      //  An operation to select the given subset of bits
      //  Bits are numbered 0 .. Width-1

   end interface Unsigned_Value;

   //  A port map is a way to assign names and widths to a set of ports
   type Port_Map is Sequenced_Map<Port_Name, Bits>;

   //  A port set is a way to specify names, while width is assumed to be one.
   type Port_Set is Sequenced_Set<Port_Name>;

   --  Return Enum literal without the leading '#'
   func Str(E : Enum_Type is Enum<>) -> Univ_String;

   --  Log 2, rounded up
   func Log_2(V : Univ_Integer {V > 0}) -> Bits;
end interface Phiddle;

class Phiddle is
  exports
   class Unsigned_Value is
    //  An unsigned integer type with the given number of bits

     exports
      op "slicing"(Val : Base_Type is Unsigned_Value<>;
                   Select : Countable_Range<Bits>) -> Unsigned_Value is
      //  An operation to select the given subset of bits
      //  Bits are numbered 0 .. Width-1
         const Modulus : Univ_Integer := 2 ** [[Select.Last+1]];
         const Divisor : Univ_Integer := 2 ** [[Select.First]];
         return [[Val]] mod Modulus / Divisor;
      end op "slicing";

   end class Unsigned_Value;

   func Str(E : Enum_Type is Enum<>) -> Univ_String is
      --  Return Enum literal without the leading '#'
      const Img := To_String(E);
      return Img[2 .. |Img|];
   end func Str;

   --  Log 2, rounded up
   func Log_2(V : Univ_Integer) -> Bits is
      --  1 => 0; 2 => 1; 3,4 => 2; 5-8 => 3; 9-16 => 4; ...
      for (B in 0 .. Bits::Range.Last forward; 
           W := 2*V-1 then W / 2) loop
         if W <= 1 then
            return B;
         end if;
      end loop;
      {#false}
      return Bits::Range.Last;
   end func Log_2;
end class Phiddle;

interface Phiddle::Id<Kind : Part_Kind> is
 //  Id's are used to identify Entities, Signals, and Ports within a System.
   op "=?"(Left, Right : Id) -> Ordering;
   func Strict_Compare(Left, Right : Id) -> Ordered::Full_Ordering
     is (Left =? Right);
   func Hash(Id) -> Unsigned_64;
   func To_String(Id) -> Univ_String;
   optional func From_String(Univ_String) -> optional Id;

   const Max_Num_Ids := 999;
   type Numeric_Id is new Integer<0 .. Max_Num_Ids>;

   //  Convert to/from and ID given an integer
   func Nth_Id(Numeric_Id) -> Id;
   func Id_Num(Id) -> Numeric_Id;

   func Zero_Extend(I : Numeric_Id) -> Univ_String;
   //  Return a zero-extended representation of a Numeric_Id
end interface Phiddle::Id;

class Phiddle::Id is
   const Num : Numeric_Id;

 exports

   op "=?"(Left, Right : Id) -> Ordering is
     (Left.Num =? Right.Num);

   func Hash(Id) -> Unsigned_64 is
     (Hash (Id.Num));

   func To_String(Id) -> Univ_String is
      return Str(Kind) | "#" | Zero_Extend(Id.Num);
   end func To_String;

   optional func From_String(Image : Univ_String) -> optional Id is
      var Num : Numeric_Id := 0;
      for (I in Image.Bounds() reverse; Mult := 1 then Mult*10) loop
         if Image[I] in '0' .. '9' then
            Num := Num + (Image[I]-'0') * Mult
         end if;
      end loop;
      return (Num => Num);
   end func From_String;

   func Nth_Id(Numeric_Id) -> Id is ((Num => Numeric_Id));
   func Id_Num(Id) -> Numeric_Id is (Id.Num);

   func Zero_Extend(I : Numeric_Id) -> Result : Univ_String is
   //  Return a zero-extended representation of a Numeric_Id
      Result := "";
      for J := 1 then J * 10 while J < Max_Num_Ids loop
         const Char : Univ_Character := I / J mod 10 + '0';
         Result := Char | Result;
      end loop;
   end func Zero_Extend;

end class Phiddle::Id

interface Phiddle::Basic_Entity<> is
  //  An entity is essentially a component or a cell in the system
   const Name : Entity_Name;

   type Entity_Id is Id<#entity>
   func Id(Basic_Entity) -> optional Id<#entity>;
   func Set_Id(var Basic_Entity; Id<#entity>);

   func Kind(Ent : Basic_Entity) -> Univ_String is ("Basic_Entity");
   func Full_Name(Ent : Basic_Entity+) -> Univ_String
     is (Ent.Kind() | "-" | Ent.Name | "#" |
         Entity_Id::Zero_Extend(Id(Ent).Id_Num()));

   func To_String(Basic_Entity) -> Univ_String
     is (To_String(Id(Basic_Entity)));
   optional func From_String(Univ_String) -> optional Basic_Entity is (null);
   op "=?"(Left, Right : Basic_Entity) -> Ordering
     is (Id(Left) =? Id(Right))
   func Hash(Basic_Entity) -> Unsigned_64
     is (Hash(Id(Basic_Entity)));

   func Create(Name : Entity_Name) -> Basic_Entity;

   //  Perform one process step for the Entity
   func Process (var Sys : System; Ent : Basic_Entity) is (null);
end interface Phiddle::Basic_Entity;

class Phiddle::Basic_Entity is
   var Ent_Id : optional Id<#entity> := null;
  exports
   func Id(Basic_Entity) -> optional Id<#entity> is
      (Basic_Entity.Ent_Id);

   func Set_Id(var Basic_Entity; Id<#entity>) is
      Basic_Entity.Ent_Id := Id;
   end func Set_Id;

   func Create(Name : Entity_Name) -> Basic_Entity is ((Name => Name));
end class Phiddle::Basic_Entity;

interface Phiddle::Basic_Signal<> is
  //  A signal is a wire between two or more entities
   const Name : Signal_Name;

   type Signal_Id is Id<#signal>;

   func Id(Basic_Signal)-> optional Id<#signal>;
   func Set_Id(var Basic_Signal; Id<#signal>);

   func Value(Basic_Signal) -> Unsigned_Value<Max_Width>;
   func Set_Value(var Basic_Signal; Value : Unsigned_Value<Max_Width>);

   func To_String(Basic_Signal) -> Univ_String
     is (To_String(Id(Basic_Signal)));
   optional func From_String(Univ_String) -> optional Basic_Signal is (null);
   op "=?"(Left, Right : Basic_Signal) -> Ordering
     is (Id(Left) =? Id(Right))
   func Hash(Basic_Signal) -> Unsigned_64
     is (Hash(Id(Basic_Signal)));

   func Create
     (Name : Signal_Name; Initial_Value : Unsigned_Value<Max_Width> := 0)
     -> Basic_Signal;

   //  Connect a port of the given mode to the signal
   func Set_Connected_Port(var Basic_Signal; Id<#port>; Mode : In_Or_Out);
end interface Phiddle::Basic_Signal;

class Phiddle::Basic_Signal is
   var Sig_Id : optional Id<#signal> := null;
   var Connected_Ports :
     Array <optional Id<#port>, Indexed_By => In_Or_Out> := Create([..], null);
   var Cur_Value : Unsigned_Value<Max_Width> := 0;
  exports
   func Id(Basic_Signal) -> optional Id<#signal> is
      (Basic_Signal.Sig_Id);

   func Set_Id(var Basic_Signal; Id<#signal>) is
      Basic_Signal.Sig_Id := Id;
   end func Set_Id;

   func Value(Basic_Signal) -> Unsigned_Value<Max_Width> is
     (Basic_Signal.Cur_Value);
   func Set_Value(var Basic_Signal; Value : Unsigned_Value<Max_Width>) is
      Basic_Signal.Cur_Value := Value;
   end func Set_Value;

   func Create
     (Name : Signal_Name; Initial_Value : Unsigned_Value<Max_Width> := 0)
     -> Basic_Signal is ((Name => Name, Cur_Value => Initial_Value));

   //  Connect a port of the given mode to the signal
   func Set_Connected_Port(var Basic_Signal; Id<#port>; Mode : In_Or_Out) is
      {Basic_Signal.Connected_Ports[Mode] is null};
      Basic_Signal.Connected_Ports[Mode] := Id;
   end func Set_Connected_Port;
end class Phiddle::Basic_Signal;

interface Phiddle::Basic_Port<> is
  //  A port is a place for a signal to connect to an entity
   const Name : Port_Name;
   const Mode : In_Or_Out;

   type Port_Id is Id<#port>;
   func Id(Basic_Port) -> optional Id<#port>;
   func Set_Id(var Basic_Port; Id<#port>);

   func Value(Basic_Port) -> Unsigned_Value<Max_Width>;
   func Set_Value(var Basic_Port; Value : Unsigned_Value<Max_Width>);

   func To_String(Basic_Port) -> Univ_String
     is (To_String(Id(Basic_Port)));
   optional func From_String(Univ_String) -> optional Basic_Port is (null);
   op "=?"(Left, Right : Basic_Port) -> Ordering
     is (Id(Left) =? Id(Right))
   func Hash(Basic_Port) -> Unsigned_64
     is (Hash(Id(Basic_Port)));

   func Create(Name : Port_Name; Mode : In_Or_Out;
               Initial_Value : Unsigned_Value<Max_Width> := 0) -> Basic_Port;

   //  Set signal id of connected signal
   func Set_Connected_Signal(var Basic_Port; Id<#signal>);
end interface Phiddle::Basic_Port;

class Phiddle::Basic_Port is
   var Port_Id : optional Id<#port> := null;
   var Connected_Signal : optional Id<#signal> := null;
   var Cur_Value : Unsigned_Value<Max_Width> := 0;
  exports
   func Id(Basic_Port) -> optional Id<#port> is
      (Basic_Port.Port_Id);

   func Set_Id(var Basic_Port; Id<#port>) is
      Basic_Port.Port_Id := Id;
   end func Set_Id;

   func Value(Basic_Port) -> Unsigned_Value<Max_Width> is
     (Basic_Port.Cur_Value);
   func Set_Value(var Basic_Port; Value : Unsigned_Value<Max_Width>) is
      Basic_Port.Cur_Value := Value;
   end func Set_Value;

   func Create(Name : Port_Name; Mode : In_Or_Out;
               Initial_Value : Unsigned_Value<Max_Width> := 0) -> Basic_Port
     is ((Name => Name, Mode => Mode, Cur_Value => Initial_Value));

   //  Set signal id of connected signal
   func Set_Connected_Signal(var Basic_Port; Id<#signal>) is
      {Basic_Port.Connected_Signal is null}
      Basic_Port.Connected_Signal := Id;
   end func Set_Connected_Signal;
end class Phiddle::Basic_Port;

interface Phiddle::System<> is
   func Create() -> System;
   //  Create the overall system

   func Add (ref var System; Basic_Entity+)
     -> ref var Basic_Entity+;
   //  Copy an entity into the system, return a ref to entity within System.
   func Add (ref var System; Basic_Signal+)
     -> ref var Basic_Signal+;
   //  Copy a signal into the system, return a ref to signal within System.
   func Add (ref var System; Basic_Port+)
     -> ref var Basic_Port+;
   //  Copy a port into the system, return a ref to port within System.

   op "indexing"(ref System; Id<#entity>) -> ref Basic_Entity+;
   op "indexing"(ref System; Id<#signal>) -> ref Basic_Signal+;
   op "indexing"(ref System; Id<#port>) -> ref Basic_Port+;

   func Connect (var System;
                 var Signal : Basic_Signal+;
                 var Port : Basic_Port+;
                 Mode : In_Or_Out);
   //  Connect signal and port

   func Run_Processes (var Sys : System; Num_Steps : Univ_Integer := 1);
   //  Run the Process operation on all entities
   //  the given number of steps.

   func Display_State (Sys : System);
   //  Display the state of the system.

   func Dump_To_JSON_File
     (File : Univ_String; Obj : Obj_Type is Assignable<>);
end interface Phiddle::System;

class Phiddle::System is
   var Entity_Vec : Vector<Basic_Entity+> := [];
   var Signal_Vec : Vector<Basic_Signal+> := [];
   var Port_Vec : Vector<Basic_Port+> := [];
  exports
   func Create() -> System is (());

   func Add (ref var System; Basic_Entity+)
     -> ref var Basic_Entity+ is
      {Basic_Entity.Id() is null}
      System.Entity_Vec |= Basic_Entity;
      const Num := |System.Entity_Vec|;
      Set_Id(System.Entity_Vec[Num], Nth_Id (Num));
      return System.Entity_Vec[Num];
   end func Add;

   func Add (ref var System; Basic_Signal+)
     -> ref var Basic_Signal+ is
      {Basic_Signal.Id() is null}
      System.Signal_Vec |= Basic_Signal;
      const Num := |System.Signal_Vec|;
      Set_Id(System.Signal_Vec[Num], Nth_Id (Num));
      return System.Signal_Vec[Num];
   end func Add;

   func Add (ref var System; Basic_Port+)
     -> ref var Basic_Port+ is
      {Basic_Port.Id() is null}
      System.Port_Vec |= Basic_Port;
      const Num := |System.Port_Vec|;
      Set_Id(System.Port_Vec[Num], Nth_Id (Num));
      return System.Port_Vec[Num];
   end func Add;

   op "indexing"(ref System; Id<#entity>) -> ref Basic_Entity+ is
      (System.Entity_Vec[Id_Num(Id)]);

   op "indexing"(ref System; Id<#signal>) -> ref Basic_Signal+ is
      (System.Signal_Vec[Id_Num(Id)]);

   op "indexing"(ref System; Id<#port>) -> ref Basic_Port+ is
      (System.Port_Vec[Id_Num(Id)]);

   func Connect (var System;
                 var Signal : Basic_Signal+;
                 var Port : Basic_Port+;
                 Mode : In_Or_Out) is
   //  Connect signal and port
      Set_Connected_Port (Signal, Id(Port), Mode);
      Set_Connected_Signal (Port, Id(Signal));
   end func Connect;

   func Run_Processes (var Sys : System; Num_Steps : Univ_Integer := 1) is
   //  Run the Process operation on all entities
   //  the given number of steps.
      for each E of Sys.Entity_Vec forward loop
         Println("Running `(E.Name):`(E).Process()");
         Sys.Process(E);
      end loop;
   end func Run_Processes;

   func Display_State (Sys : System) is
   //  Display the state of the system.
      Println ("System state:");
      Print ("Entities: ");
      for each E of Sys.Entity_Vec forward loop
         Print (" " | E.Name | ":" | E);
      end loop;
      Println("");

      Print ("Ports: ");
      for each P of Sys.Port_Vec forward loop
         Print (" " | P.Name | ":" | P | " = ");
         Println (Value(P));
      end loop;
      Println("");

      Print ("Signals: ");
      for each S of Sys.Signal_Vec forward loop
         Print (" " | S.Name | ":" | S);
      end loop;
      Println("");
   end func Display_State;

   func Dump_To_JSON_File
     (File : Univ_String; Obj : Obj_Type is Assignable<>) is
      var IO := IO::Get_IO();
      var B_File : Byte_Stream_Output_File := IO.Create ("phdl_system.json");

      ref var OVS : JSON_Output_Value_Stream => Create(B_File);

      ref var OOS : Output_Object_Stream => Create(OVS);

      Write_Obj (OOS, Obj);
   end func Dump_To_JSON_File;

end class Phiddle::System;

interface Phiddle::Signal<Width : Bits := 1> extends Basic_Signal<> is
  //  A signal with a specified width

   func Add(ref var System; Name : Signal_Name;
     Initial : Unsigned_Value<Max_Width> := 0)
     -> ref var Signal;
     //  Add a signal to the system, with a defaulted-to-zero initial value

   optional func From_String(Univ_String) -> optional Signal is (null);
   func Create(Name : Signal_Name;
               Initial_Value : Unsigned_Value<Max_Width> := 0) -> Signal;
end interface Phiddle::Signal;

class Phiddle::Signal is
   var Inputs : Vector<Id<#port>> := [];
   var Outputs : Vector<Id<#port>> := [];
  exports
   func Add(ref var System; Name : Signal_Name;
     Initial : Unsigned_Value<Max_Width> := 0)
     -> ref var Signal is
     const Sig : Basic_Signal+ :=
       Signal::(Basic_Signal => Create(Name, Initial_Value => Initial));

     case System::Add (System, Sig) of
        [Added : Signal] => return Added;
        [..] => {#false}; 
     end case;

   end func Add;

   func Create(Name : Signal_Name;
               Initial_Value : Unsigned_Value<Max_Width>)
      -> Signal is (Basic_Signal => Create(Name, Initial_Value));
end class Phiddle::Signal;

interface Phiddle::Port<Port_Mode : In_Or_Out>
  extends Basic_Port<> is
  // A port of Mode #in, #out, or #inout

   func Add(ref var System; Name : Port_Name; Width : Bits := 1)
     -> ref var Port;
     //  Add a port to the system, with the given name and width

   optional func From_String(Univ_String) -> optional Port is (null);
   func Create(Name : Port_Name; Mode : In_Or_Out := Port_Mode;
     Initial_Value : Unsigned_Value<Max_Width> := 0) -> Port;

   func Local_Create(Name : Port_Name; Mode : In_Or_Out := Port_Mode;
     Width : Bits; Initial_Value : Unsigned_Value<Max_Width> := 0) -> Port;

end interface Phiddle::Port;

class Phiddle::Port is
   const Width : Bits;

  exports

   func Local_Create(Name : Port_Name; Mode : In_Or_Out := Port_Mode;
     Width : Bits; Initial_Value : Unsigned_Value<Max_Width> := 0) -> Port
    is ((Basic_Port => Create(Name, Mode, Initial_Value), Width => Width));

   func Add(ref var System; Name : Port_Name; Width : Bits := 1)
     -> ref var Port is
     //  Add a port to the system, with the given name
     const P : Basic_Port+ := Local_Create(Name, Width => Width);

     case System::Add (System, P) of
        [Added : Port] => return Added;
        [..] => {#false}; 
     end case;

   end func Add;

   func Create(Name : Port_Name; Mode : In_Or_Out := Port_Mode;
     Initial_Value : Unsigned_Value<Max_Width> := 0) -> Port
    is ((Basic_Port => Create(Name, Mode, Initial_Value), Width => 1));
        //  NOTE: Width will be set properly when added to the system.

end class Phiddle::Port;

interface Phiddle::Entity <> extends Basic_Entity is

   func Kind(Ent : Entity) -> Univ_String is ("Entity");

   optional func From_String(Univ_String) -> optional Entity is (null);
   func Create(Name : Entity_Name) -> Entity;

   //  Add ports to entity
   func Add_Ports
     (var Sys : System; var Ent : Entity;
      Input_Ports, Output_Ports : Port_Map;
      Process_Sensitive : optional Port_Set := null);

   func Inputs (Entity) -> Port_Set;
   func Outputs (Entity) -> Port_Set;
   func Sensitive_To (Entity) -> Port_Set;

   //  Get Port_Id given name of Port within entity
   op "indexing"(Entity; Name : Port_Name) -> Id<#port>;

   //  Perform one process step for the Entity
   func Process (var Sys : System; Ent : Entity) is (null);
end interface Phiddle::Entity;

class Phiddle::Entity is
   type Port_Id_Map is Sequenced_Map<Port_Name, Id<#port>>;

   var Input_Ports : Port_Id_Map := [];
   var Output_Ports : Port_Id_Map := [];
   var Process_Sensitive : Port_Set := [];

  exports

   func Create(Name : Entity_Name) -> Entity is (Basic_Entity => Create(Name));

   //  Add ports to entity
   func Add_Ports
     (var Sys : System; var Ent : Entity;
      Input_Ports, Output_Ports : Port_Map;
      Process_Sensitive : optional Port_Set := null) is

     type In_Port is Port<#in>;
     type Out_Port is Port<#out>;

     for each Name of Keys(Input_Ports) forward loop
        ref P => In_Port::Add(Sys, Name => Name, Width => Input_Ports[Name]);
        Ent.Input_Ports |= [Name => Id(P)];
     end loop;

     for each Name of Keys(Output_Ports) forward loop
        {Name not in Ent.Input_Ports}  //  No dups between Input and outputs
        ref P => Out_Port::Add(Sys, Name => Name, Width => Output_Ports[Name]);
        Ent.Output_Ports |= [Name => Id(P)];
     end loop;

     const All_Inputs : Port_Set := Keys (Input_Ports);

     if Process_Sensitive is null then
        //  Process is sensitive to all inputs
        Ent.Process_Sensitive := All_Inputs;
     else
        //  User has specified the ports to which Process is sensitive
        {Process_Sensitive <= All_Inputs};
        Ent.Process_Sensitive := Process_Sensitive;
     end if;
   end func Add_Ports;

   func Inputs (Entity) -> Port_Set
     is (Keys (Entity.Input_Ports))
   func Outputs (Entity) -> Port_Set
     is (Keys (Entity.Output_Ports));
   func Sensitive_To (Entity) -> Port_Set is (Entity.Process_Sensitive);

   //  Get Port_Id given name of Port within entity
   op "indexing"(Entity; Name : Port_Name) -> Id<#port> is
      if Name in Entity.Input_Ports then
         return Entity.Input_Ports[Name];
      else
         return Entity.Output_Ports[Name];
      end if;
   end op "indexing";
end class Phiddle::Entity;

interface Phiddle::Mux <> extends Entity is

   func Kind(Ent : Mux) -> Univ_String is ("Mux");

   func Add(ref var Sys : System; Name : Entity_Name;
            Input_Ports : Port_Set; Output_Port : Port_Name := #x)
     -> ref var Mux;
     //  Add a mux to the system

   optional func From_String(Univ_String) -> optional Mux is (null);
   func Create(Name : Entity_Name) -> Mux;

   //  Perform one process step for the Mux
   func Process(var Sys : System; Mux);
end interface Phiddle::Mux;

class Phiddle::Mux is
   var Num_Lines : Univ_Integer := 4;
  exports

   func Add(ref var Sys : System; Name : Entity_Name;
            Input_Ports : Port_Set; Output_Port : Port_Name := #x)
     -> ref var Mux is
     //  Add a mux to the system
     var M : Mux :=
       Mux::(Entity => Create(Name));

     const Ent : Basic_Entity+ := M;

     case System::Add (Sys, Ent) of
        [Added : Mux] =>
           var Input_Port_Map : Port_Map := [#select => Log_2(|Input_Ports|)];

           for each P of Input_Ports forward loop
              Input_Port_Map |= [P => 1];
           end loop;
              
           Add_Ports (Sys, Added,
             Input_Ports => Input_Port_Map,
             Output_Ports => [Output_Port => 1]);
           return Added;

        [..] => {#false}; 
     end case;
   end func Add;
   
   func Create(Name : Entity_Name) -> Mux is (Entity => Create(Name));

   //  Perform one process step for the Mux
   func Process(var Sys : System; Mux) is
      Println ("In Process for Mux:`(Mux)");
      Print ("Inputs:");
      for each IP of Mux.Inputs() forward loop
         Print (" " | IP);
      end loop;
      Println("");
   end func Process;
end class Phiddle::Mux;

import Phiddle::*;
func Test_Phiddle() is
   var Sys : Phiddle::System := Create();

   type Bit_Signal is Signal<1>;

   const Lits := Part_Kind::Literals;
   Print ("Lits of Part_Kind: ");
   Println ((for each I of Lits => <""> | " " | I));

   ref Mux1 => Mux::Add(Sys, #mux1,
                        Input_Ports => [#a, #b, #c, #d],
                        Output_Port => #x);

   ref Sig1 => Bit_Signal::Add(Sys, #s1);
   ref Sig2 => Bit_Signal::Add(Sys, #s2);
   ref Sig3 => Bit_Signal::Add(Sys, #s3);

   Sig1.Set_Value (1);
   Sig3.Set_Value (0);
   Sig2.Set_Value (Sig3.Value());

   Phiddle::System::Display_State(Sys);

   Sys.Run_Processes();

   Phiddle::System::Display_State(Sys);
   Phiddle::System::Dump_To_JSON_File ("phdl_system.json", Sys);
end func Test_Phiddle;
