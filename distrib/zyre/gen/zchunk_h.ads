pragma Ada_2012;
pragma Style_Checks (Off);
pragma Warnings ("U");

with Interfaces.C; use Interfaces.C;
with System;
with stddef_h;
limited with czmq_library_h;
with czmq_prelude_h;
with Interfaces.C.Extensions;
limited with stdio_h;
with Interfaces.C.Strings;

package zchunk_h is

  --  =========================================================================
  --    zchunk - work with memory chunks
  --    Copyright (c) the Contributors as noted in the AUTHORS file.
  --    This file is part of CZMQ, the high-level C binding for 0MQ:
  --    http://czmq.zeromq.org.
  --    This Source Code Form is subject to the terms of the Mozilla Public
  --    License, v. 2.0. If a copy of the MPL was not distributed with this
  --    file, You can obtain one at http://mozilla.org/MPL/2.0/.
  --    =========================================================================
  -- 

  --  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
  --  @warning Please edit the model at "api/zchunk.api" to make changes.
  --  @interface
  --  This is a stable class, and may not change except for emergencies. It
  --  is provided in stable builds.
  --  This class has draft methods, which may change over time. They are not
  --  in stable releases, by default. Use --enable-drafts to enable.
  --  Create a new chunk of the specified size. If you specify the data, it
  --  is copied into the chunk. If you do not specify the data, the chunk is
  --  allocated and left empty, and you can then add data using zchunk_append.
   function zchunk_new (data : System.Address; size : stddef_h.size_t) return access czmq_library_h.zchunk_t  -- /homes/taft/_distrib/include/zchunk.h:32
   with Import => True, 
        Convention => C, 
        External_Name => "zchunk_new";

  --  Destroy a chunk
   procedure zchunk_destroy (self_p : System.Address)  -- /homes/taft/_distrib/include/zchunk.h:36
   with Import => True, 
        Convention => C, 
        External_Name => "zchunk_destroy";

  --  Resizes chunk max_size as requested; chunk_cur size is set to zero
   procedure zchunk_resize (self : access czmq_library_h.zchunk_t; size : stddef_h.size_t)  -- /homes/taft/_distrib/include/zchunk.h:40
   with Import => True, 
        Convention => C, 
        External_Name => "zchunk_resize";

  --  Return chunk cur size
   function zchunk_size (self : access czmq_library_h.zchunk_t) return stddef_h.size_t  -- /homes/taft/_distrib/include/zchunk.h:44
   with Import => True, 
        Convention => C, 
        External_Name => "zchunk_size";

  --  Return chunk max size
   function zchunk_max_size (self : access czmq_library_h.zchunk_t) return stddef_h.size_t  -- /homes/taft/_distrib/include/zchunk.h:48
   with Import => True, 
        Convention => C, 
        External_Name => "zchunk_max_size";

  --  Return chunk data
   function zchunk_data (self : access czmq_library_h.zchunk_t) return access czmq_prelude_h.byte  -- /homes/taft/_distrib/include/zchunk.h:52
   with Import => True, 
        Convention => C, 
        External_Name => "zchunk_data";

  --  Set chunk data from user-supplied data; truncate if too large. Data may
  --  be null. Returns actual size of chunk
   function zchunk_set
     (self : access czmq_library_h.zchunk_t;
      data : System.Address;
      size : stddef_h.size_t) return stddef_h.size_t  -- /homes/taft/_distrib/include/zchunk.h:57
   with Import => True, 
        Convention => C, 
        External_Name => "zchunk_set";

  --  Fill chunk data from user-supplied octet
   function zchunk_fill
     (self : access czmq_library_h.zchunk_t;
      filler : czmq_prelude_h.byte;
      size : stddef_h.size_t) return stddef_h.size_t  -- /homes/taft/_distrib/include/zchunk.h:61
   with Import => True, 
        Convention => C, 
        External_Name => "zchunk_fill";

  --  Append user-supplied data to chunk, return resulting chunk size. If the
  --  data would exceeded the available space, it is truncated. If you want to
  --  grow the chunk to accommodate new data, use the zchunk_extend method.
   function zchunk_append
     (self : access czmq_library_h.zchunk_t;
      data : System.Address;
      size : stddef_h.size_t) return stddef_h.size_t  -- /homes/taft/_distrib/include/zchunk.h:67
   with Import => True, 
        Convention => C, 
        External_Name => "zchunk_append";

  --  Append user-supplied data to chunk, return resulting chunk size. If the
  --  data would exceeded the available space, the chunk grows in size.
   function zchunk_extend
     (self : access czmq_library_h.zchunk_t;
      data : System.Address;
      size : stddef_h.size_t) return stddef_h.size_t  -- /homes/taft/_distrib/include/zchunk.h:72
   with Import => True, 
        Convention => C, 
        External_Name => "zchunk_extend";

  --  Copy as much data from 'source' into the chunk as possible; returns the
  --  new size of chunk. If all data from 'source' is used, returns exhausted
  --  on the source chunk. Source can be consumed as many times as needed until
  --  it is exhausted. If source was already exhausted, does not change chunk.
   function zchunk_consume (self : access czmq_library_h.zchunk_t; source : access czmq_library_h.zchunk_t) return stddef_h.size_t  -- /homes/taft/_distrib/include/zchunk.h:79
   with Import => True, 
        Convention => C, 
        External_Name => "zchunk_consume";

  --  Returns true if the chunk was exhausted by consume methods, or if the
  --  chunk has a size of zero.
   function zchunk_exhausted (self : access czmq_library_h.zchunk_t) return Extensions.bool  -- /homes/taft/_distrib/include/zchunk.h:84
   with Import => True, 
        Convention => C, 
        External_Name => "zchunk_exhausted";

  --  Read chunk from an open file descriptor
  --  Caller owns return value and must destroy it when done.
   function zchunk_read (handle : access stdio_h.FILE; bytes : stddef_h.size_t) return access czmq_library_h.zchunk_t  -- /homes/taft/_distrib/include/zchunk.h:89
   with Import => True, 
        Convention => C, 
        External_Name => "zchunk_read";

  --  Write chunk to an open file descriptor
   function zchunk_write (self : access czmq_library_h.zchunk_t; handle : access stdio_h.FILE) return int  -- /homes/taft/_distrib/include/zchunk.h:93
   with Import => True, 
        Convention => C, 
        External_Name => "zchunk_write";

  --  Try to slurp an entire file into a chunk. Will read up to maxsize of
  --  the file. If maxsize is 0, will attempt to read the entire file and
  --  fail with an assertion if that cannot fit into memory. Returns a new
  --  chunk containing the file data, or NULL if the file could not be read.
  --  Caller owns return value and must destroy it when done.
   function zchunk_slurp (filename : Interfaces.C.Strings.chars_ptr; maxsize : stddef_h.size_t) return access czmq_library_h.zchunk_t  -- /homes/taft/_distrib/include/zchunk.h:101
   with Import => True, 
        Convention => C, 
        External_Name => "zchunk_slurp";

  --  Create copy of chunk, as new chunk object. Returns a fresh zchunk_t
  --  object, or null if there was not enough heap memory. If chunk is null,
  --  returns null.
  --  Caller owns return value and must destroy it when done.
   function zchunk_dup (self : access czmq_library_h.zchunk_t) return access czmq_library_h.zchunk_t  -- /homes/taft/_distrib/include/zchunk.h:108
   with Import => True, 
        Convention => C, 
        External_Name => "zchunk_dup";

  --  Return chunk data encoded as printable hex string. Caller must free
  --  string when finished with it.
  --  Caller owns return value and must destroy it when done.
   function zchunk_strhex (self : access czmq_library_h.zchunk_t) return Interfaces.C.Strings.chars_ptr  -- /homes/taft/_distrib/include/zchunk.h:114
   with Import => True, 
        Convention => C, 
        External_Name => "zchunk_strhex";

  --  Return chunk data copied into freshly allocated string
  --  Caller must free string when finished with it.
  --  Caller owns return value and must destroy it when done.
   function zchunk_strdup (self : access czmq_library_h.zchunk_t) return Interfaces.C.Strings.chars_ptr  -- /homes/taft/_distrib/include/zchunk.h:120
   with Import => True, 
        Convention => C, 
        External_Name => "zchunk_strdup";

  --  Return TRUE if chunk body is equal to string, excluding terminator
   function zchunk_streq (self : access czmq_library_h.zchunk_t; string : Interfaces.C.Strings.chars_ptr) return Extensions.bool  -- /homes/taft/_distrib/include/zchunk.h:124
   with Import => True, 
        Convention => C, 
        External_Name => "zchunk_streq";

  --  Transform zchunk into a zframe that can be sent in a message.
  --  Caller owns return value and must destroy it when done.
   function zchunk_pack (self : access czmq_library_h.zchunk_t) return access czmq_library_h.zframe_t  -- /homes/taft/_distrib/include/zchunk.h:129
   with Import => True, 
        Convention => C, 
        External_Name => "zchunk_pack";

  --  Transform a zframe into a zchunk.
  --  Caller owns return value and must destroy it when done.
   function zchunk_unpack (frame : access czmq_library_h.zframe_t) return access czmq_library_h.zchunk_t  -- /homes/taft/_distrib/include/zchunk.h:134
   with Import => True, 
        Convention => C, 
        External_Name => "zchunk_unpack";

  --  Calculate SHA1 digest for chunk, using zdigest class.
   function zchunk_digest (self : access czmq_library_h.zchunk_t) return Interfaces.C.Strings.chars_ptr  -- /homes/taft/_distrib/include/zchunk.h:138
   with Import => True, 
        Convention => C, 
        External_Name => "zchunk_digest";

  --  Dump chunk to FILE stream, for debugging and tracing.
   procedure zchunk_fprint (self : access czmq_library_h.zchunk_t; the_file : access stdio_h.FILE)  -- /homes/taft/_distrib/include/zchunk.h:142
   with Import => True, 
        Convention => C, 
        External_Name => "zchunk_fprint";

  --  Dump message to stderr, for debugging and tracing.
  --  See zchunk_fprint for details
   procedure zchunk_print (self : access czmq_library_h.zchunk_t)  -- /homes/taft/_distrib/include/zchunk.h:147
   with Import => True, 
        Convention => C, 
        External_Name => "zchunk_print";

  --  Probe the supplied object, and report if it looks like a zchunk_t.
   function zchunk_is (self : System.Address) return Extensions.bool  -- /homes/taft/_distrib/include/zchunk.h:151
   with Import => True, 
        Convention => C, 
        External_Name => "zchunk_is";

  --  Self test of this class.
   procedure zchunk_test (verbose : Extensions.bool)  -- /homes/taft/_distrib/include/zchunk.h:155
   with Import => True, 
        Convention => C, 
        External_Name => "zchunk_test";

  -- Destroy an item
  --  *** Draft method, for development use, may change without warning ***
  --  Create a new chunk from memory. Take ownership of the memory and calling the destructor
  --  on destroy.
  --  *** Draft method, for development use, may change without warning ***
  --  Transform zchunk into a zframe that can be sent in a message.
  --  Take ownership of the chunk.
  --  Caller owns return value and must destroy it when done.
  --  @end
end zchunk_h;
