pragma Ada_2012;
pragma Style_Checks (Off);
pragma Warnings ("U");

with Interfaces.C; use Interfaces.C;
with System;
with czmq_library_h;
with Interfaces.C.Extensions;

package zpoller_h is

  --  =========================================================================
  --    zpoller - trivial socket poller class
  --    Copyright (c) the Contributors as noted in the AUTHORS file.
  --    This file is part of CZMQ, the high-level C binding for 0MQ:
  --    http://czmq.zeromq.org.
  --    This Source Code Form is subject to the terms of the Mozilla Public
  --    License, v. 2.0. If a copy of the MPL was not distributed with this
  --    file, You can obtain one at http://mozilla.org/MPL/2.0/.
  --    =========================================================================
  -- 

  --  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
  --  @warning Please edit the model at "api/zpoller.api" to make changes.
  --  @interface
  --  This is a stable class, and may not change except for emergencies. It
  --  is provided in stable builds.
  --  Create new poller, specifying zero or more readers. The list of
  --  readers ends in a NULL. Each reader can be a zsock_t instance, a
  --  zactor_t instance, a libzmq socket (void *), or a file handle.
   function zpoller_new (
     Null_Reader : System.Address  -- , ...
      ) return access czmq_library_h.zpoller_t  -- /homes/taft/_distrib/include/zpoller.h:30
   with Import => True, 
        Convention => C, 
        External_Name => "zpoller_new";
   function zpoller_new (reader : System.Address;
     Null_Reader : System.Address  -- , ...
      ) return access czmq_library_h.zpoller_t  -- /homes/taft/_distrib/include/zpoller.h:30
   with Import => True, 
        Convention => C, 
        External_Name => "zpoller_new";
   function zpoller_new (reader, reader2 : System.Address;
     Null_Reader : System.Address  -- , ...
      ) return access czmq_library_h.zpoller_t  -- /homes/taft/_distrib/include/zpoller.h:30
   with Import => True, 
        Convention => C, 
        External_Name => "zpoller_new";
   function zpoller_new (reader, reader2, reader3 : System.Address;
     Null_Reader : System.Address  -- , ...
      ) return access czmq_library_h.zpoller_t  -- /homes/taft/_distrib/include/zpoller.h:30
   with Import => True, 
        Convention => C, 
        External_Name => "zpoller_new";
   function zpoller_new (reader, reader2, reader3, reader4 : System.Address;
     Null_Reader : System.Address  -- , ...
      ) return access czmq_library_h.zpoller_t  -- /homes/taft/_distrib/include/zpoller.h:30
   with Import => True, 
        Convention => C, 
        External_Name => "zpoller_new";

  --  Destroy a poller
   procedure zpoller_destroy (self_p : System.Address)  -- /homes/taft/_distrib/include/zpoller.h:34
   with Import => True, 
        Convention => C, 
        External_Name => "zpoller_destroy";

  --  Add a reader to be polled. Returns 0 if OK, -1 on failure. The reader may
  --  be a libzmq void * socket, a zsock_t instance, a zactor_t instance or a
  --  file handle.
   function zpoller_add (self : access czmq_library_h.zpoller_t; reader : System.Address) return int  -- /homes/taft/_distrib/include/zpoller.h:40
   with Import => True, 
        Convention => C, 
        External_Name => "zpoller_add";

  --  Remove a reader from the poller; returns 0 if OK, -1 on failure. The reader
  --  must have been passed during construction, or in an zpoller_add () call.
   function zpoller_remove (self : access czmq_library_h.zpoller_t; reader : System.Address) return int  -- /homes/taft/_distrib/include/zpoller.h:45
   with Import => True, 
        Convention => C, 
        External_Name => "zpoller_remove";

  --  By default the poller stops if the process receives a SIGINT or SIGTERM
  --  signal. This makes it impossible to shut-down message based architectures
  --  like zactors. This method lets you switch off break handling. The default
  --  nonstop setting is off (false).
   procedure zpoller_set_nonstop (self : access czmq_library_h.zpoller_t; nonstop : Extensions.bool)  -- /homes/taft/_distrib/include/zpoller.h:52
   with Import => True, 
        Convention => C, 
        External_Name => "zpoller_set_nonstop";

  --  Poll the registered readers for I/O, return first reader that has input.
  --  The reader will be a libzmq void * socket, a zsock_t, a zactor_t
  --  instance or a file handle as specified in zpoller_new/zpoller_add. The
  --  timeout should be zero or greater, or -1 to wait indefinitely. Socket
  --  priority is defined by their order in the poll list. If you need a
  --  balanced poll, use the low level zmq_poll method directly. If the poll
  --  call was interrupted (SIGINT), or the ZMQ context was destroyed, or the
  --  timeout expired, returns NULL. You can test the actual exit condition by
  --  calling zpoller_expired () and zpoller_terminated (). The timeout is in
  --  msec.
   function zpoller_wait (self : access czmq_library_h.zpoller_t; timeout : int) return System.Address  -- /homes/taft/_distrib/include/zpoller.h:65
   with Import => True, 
        Convention => C, 
        External_Name => "zpoller_wait";

  --  Return true if the last zpoller_wait () call ended because the timeout
  --  expired, without any error.
   function zpoller_expired (self : access czmq_library_h.zpoller_t) return Extensions.bool  -- /homes/taft/_distrib/include/zpoller.h:70
   with Import => True, 
        Convention => C, 
        External_Name => "zpoller_expired";

  --  Return true if the last zpoller_wait () call ended because the process
  --  was interrupted, or the parent context was destroyed.
   function zpoller_terminated (self : access czmq_library_h.zpoller_t) return Extensions.bool  -- /homes/taft/_distrib/include/zpoller.h:75
   with Import => True, 
        Convention => C, 
        External_Name => "zpoller_terminated";

  --  Self test of this class.
   procedure zpoller_test (verbose : Extensions.bool)  -- /homes/taft/_distrib/include/zpoller.h:79
   with Import => True, 
        Convention => C, 
        External_Name => "zpoller_test";

  --  @end
end zpoller_h;
