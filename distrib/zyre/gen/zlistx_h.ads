pragma Ada_2012;
pragma Style_Checks (Off);
pragma Warnings ("U");

with Interfaces.C; use Interfaces.C;
limited with czmq_library_h;
with System;
with stddef_h;
with Interfaces.C.Extensions;

package zlistx_h is

  --  =========================================================================
  --    zlistx - extended generic list container
  --    Copyright (c) the Contributors as noted in the AUTHORS file.
  --    This file is part of CZMQ, the high-level C binding for 0MQ:
  --    http://czmq.zeromq.org.
  --    This Source Code Form is subject to the terms of the Mozilla Public
  --    License, v. 2.0. If a copy of the MPL was not distributed with this
  --    file, You can obtain one at http://mozilla.org/MPL/2.0/.
  --    =========================================================================
  -- 

  --  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
  --  @warning Please edit the model at "api/zlistx.api" to make changes.
  --  @interface
  --  This is a stable class, and may not change except for emergencies. It
  --  is provided in stable builds.
  --  This class has draft methods, which may change over time. They are not
  --  in stable releases, by default. Use --enable-drafts to enable.
  -- Destroy an item
   --  skipped function type zlistx_destructor_fn

  -- Duplicate an item
   --  skipped function type zlistx_duplicator_fn

  -- Compare two items, for sorting
   --  skipped function type zlistx_comparator_fn

  --  Create a new, empty list.
   function zlistx_new return access czmq_library_h.zlistx_t  -- /homes/taft/_distrib/include/zlistx.h:42
   with Import => True, 
        Convention => C, 
        External_Name => "zlistx_new";

  --  Destroy a list. If an item destructor was specified, all items in the
  --  list are automatically destroyed as well.
   procedure zlistx_destroy (self_p : System.Address)  -- /homes/taft/_distrib/include/zlistx.h:47
   with Import => True, 
        Convention => C, 
        External_Name => "zlistx_destroy";

  --  Add an item to the head of the list. Calls the item duplicator, if any,
  --  on the item. Resets cursor to list head. Returns an item handle on
  --  success, NULL if memory was exhausted.
   function zlistx_add_start (self : access czmq_library_h.zlistx_t; item : System.Address) return System.Address  -- /homes/taft/_distrib/include/zlistx.h:53
   with Import => True, 
        Convention => C, 
        External_Name => "zlistx_add_start";

  --  Add an item to the tail of the list. Calls the item duplicator, if any,
  --  on the item. Resets cursor to list head. Returns an item handle on
  --  success, NULL if memory was exhausted.
   function zlistx_add_end (self : access czmq_library_h.zlistx_t; item : System.Address) return System.Address  -- /homes/taft/_distrib/include/zlistx.h:59
   with Import => True, 
        Convention => C, 
        External_Name => "zlistx_add_end";

  --  Return the number of items in the list
   function zlistx_size (self : access czmq_library_h.zlistx_t) return stddef_h.size_t  -- /homes/taft/_distrib/include/zlistx.h:63
   with Import => True, 
        Convention => C, 
        External_Name => "zlistx_size";

  --  Return first item in the list, or null, leaves the cursor
   function zlistx_head (self : access czmq_library_h.zlistx_t) return System.Address  -- /homes/taft/_distrib/include/zlistx.h:67
   with Import => True, 
        Convention => C, 
        External_Name => "zlistx_head";

  --  Return last item in the list, or null, leaves the cursor
   function zlistx_tail (self : access czmq_library_h.zlistx_t) return System.Address  -- /homes/taft/_distrib/include/zlistx.h:71
   with Import => True, 
        Convention => C, 
        External_Name => "zlistx_tail";

  --  Return the item at the head of list. If the list is empty, returns NULL.
  --  Leaves cursor pointing at the head item, or NULL if the list is empty.
   function zlistx_first (self : access czmq_library_h.zlistx_t) return System.Address  -- /homes/taft/_distrib/include/zlistx.h:76
   with Import => True, 
        Convention => C, 
        External_Name => "zlistx_first";

  --  Return the next item. At the end of the list (or in an empty list),
  --  returns NULL. Use repeated zlistx_next () calls to work through the list
  --  from zlistx_first (). First time, acts as zlistx_first().
   function zlistx_next (self : access czmq_library_h.zlistx_t) return System.Address  -- /homes/taft/_distrib/include/zlistx.h:82
   with Import => True, 
        Convention => C, 
        External_Name => "zlistx_next";

  --  Return the previous item. At the start of the list (or in an empty list),
  --  returns NULL. Use repeated zlistx_prev () calls to work through the list
  --  backwards from zlistx_last (). First time, acts as zlistx_last().
   function zlistx_prev (self : access czmq_library_h.zlistx_t) return System.Address  -- /homes/taft/_distrib/include/zlistx.h:88
   with Import => True, 
        Convention => C, 
        External_Name => "zlistx_prev";

  --  Return the item at the tail of list. If the list is empty, returns NULL.
  --  Leaves cursor pointing at the tail item, or NULL if the list is empty.
   function zlistx_last (self : access czmq_library_h.zlistx_t) return System.Address  -- /homes/taft/_distrib/include/zlistx.h:93
   with Import => True, 
        Convention => C, 
        External_Name => "zlistx_last";

  --  Returns the value of the item at the cursor, or NULL if the cursor is
  --  not pointing to an item.
   function zlistx_item (self : access czmq_library_h.zlistx_t) return System.Address  -- /homes/taft/_distrib/include/zlistx.h:98
   with Import => True, 
        Convention => C, 
        External_Name => "zlistx_item";

  --  Returns the handle of the item at the cursor, or NULL if the cursor is
  --  not pointing to an item.
   function zlistx_cursor (self : access czmq_library_h.zlistx_t) return System.Address  -- /homes/taft/_distrib/include/zlistx.h:103
   with Import => True, 
        Convention => C, 
        External_Name => "zlistx_cursor";

  --  Returns the item associated with the given list handle, or NULL if passed
  --  in handle is NULL. Asserts that the passed in handle points to a list element.
   function zlistx_handle_item (handle : System.Address) return System.Address  -- /homes/taft/_distrib/include/zlistx.h:108
   with Import => True, 
        Convention => C, 
        External_Name => "zlistx_handle_item";

  --  Find an item in the list, searching from the start. Uses the item
  --  comparator, if any, else compares item values directly. Returns the
  --  item handle found, or NULL. Sets the cursor to the found item, if any.
   function zlistx_find (self : access czmq_library_h.zlistx_t; item : System.Address) return System.Address  -- /homes/taft/_distrib/include/zlistx.h:114
   with Import => True, 
        Convention => C, 
        External_Name => "zlistx_find";

  --  Detach an item from the list, using its handle. The item is not modified,
  --  and the caller is responsible for destroying it if necessary. If handle is
  --  null, detaches the first item on the list. Returns item that was detached,
  --  or null if none was. If cursor was at item, moves cursor to previous item,
  --  so you can detach items while iterating forwards through a list.
   function zlistx_detach (self : access czmq_library_h.zlistx_t; handle : System.Address) return System.Address  -- /homes/taft/_distrib/include/zlistx.h:122
   with Import => True, 
        Convention => C, 
        External_Name => "zlistx_detach";

  --  Detach item at the cursor, if any, from the list. The item is not modified,
  --  and the caller is responsible for destroying it as necessary. Returns item
  --  that was detached, or null if none was. Moves cursor to previous item, so
  --  you can detach items while iterating forwards through a list.
   function zlistx_detach_cur (self : access czmq_library_h.zlistx_t) return System.Address  -- /homes/taft/_distrib/include/zlistx.h:129
   with Import => True, 
        Convention => C, 
        External_Name => "zlistx_detach_cur";

  --  Delete an item, using its handle. Calls the item destructor if any is
  --  set. If handle is null, deletes the first item on the list. Returns 0
  --  if an item was deleted, -1 if not. If cursor was at item, moves cursor
  --  to previous item, so you can delete items while iterating forwards
  --  through a list.
   function zlistx_delete (self : access czmq_library_h.zlistx_t; handle : System.Address) return int  -- /homes/taft/_distrib/include/zlistx.h:137
   with Import => True, 
        Convention => C, 
        External_Name => "zlistx_delete";

  --  Move an item to the start of the list, via its handle.
   procedure zlistx_move_start (self : access czmq_library_h.zlistx_t; handle : System.Address)  -- /homes/taft/_distrib/include/zlistx.h:141
   with Import => True, 
        Convention => C, 
        External_Name => "zlistx_move_start";

  --  Move an item to the end of the list, via its handle.
   procedure zlistx_move_end (self : access czmq_library_h.zlistx_t; handle : System.Address)  -- /homes/taft/_distrib/include/zlistx.h:145
   with Import => True, 
        Convention => C, 
        External_Name => "zlistx_move_end";

  --  Remove all items from the list, and destroy them if the item destructor
  --  is set.
   procedure zlistx_purge (self : access czmq_library_h.zlistx_t)  -- /homes/taft/_distrib/include/zlistx.h:150
   with Import => True, 
        Convention => C, 
        External_Name => "zlistx_purge";

  --  Sort the list. If an item comparator was set, calls that to compare
  --  items, otherwise compares on item value. The sort is not stable, so may
  --  reorder equal items.
   procedure zlistx_sort (self : access czmq_library_h.zlistx_t)  -- /homes/taft/_distrib/include/zlistx.h:156
   with Import => True, 
        Convention => C, 
        External_Name => "zlistx_sort";

  --  Create a new node and insert it into a sorted list. Calls the item
  --  duplicator, if any, on the item. If low_value is true, starts searching
  --  from the start of the list, otherwise searches from the end. Use the item
  --  comparator, if any, to find where to place the new node. Returns a handle
  --  to the new node, or NULL if memory was exhausted. Resets the cursor to the
  --  list head.
   function zlistx_insert
     (self : access czmq_library_h.zlistx_t;
      item : System.Address;
      low_value : Extensions.bool) return System.Address  -- /homes/taft/_distrib/include/zlistx.h:165
   with Import => True, 
        Convention => C, 
        External_Name => "zlistx_insert";

  --  Move an item, specified by handle, into position in a sorted list. Uses
  --  the item comparator, if any, to determine the new location. If low_value
  --  is true, starts searching from the start of the list, otherwise searches
  --  from the end.
   procedure zlistx_reorder
     (self : access czmq_library_h.zlistx_t;
      handle : System.Address;
      low_value : Extensions.bool)  -- /homes/taft/_distrib/include/zlistx.h:172
   with Import => True, 
        Convention => C, 
        External_Name => "zlistx_reorder";

  --  Make a copy of the list; items are duplicated if you set a duplicator
  --  for the list, otherwise not. Copying a null reference returns a null
  --  reference.
   function zlistx_dup (self : access czmq_library_h.zlistx_t) return access czmq_library_h.zlistx_t  -- /homes/taft/_distrib/include/zlistx.h:178
   with Import => True, 
        Convention => C, 
        External_Name => "zlistx_dup";

  --  Set a user-defined deallocator for list items; by default items are not
  --  freed when the list is destroyed.
   procedure zlistx_set_destructor (self : access czmq_library_h.zlistx_t; destructor : access procedure (arg1 : System.Address))  -- /homes/taft/_distrib/include/zlistx.h:183
   with Import => True, 
        Convention => C, 
        External_Name => "zlistx_set_destructor";

  --  Set a user-defined duplicator for list items; by default items are not
  --  copied when the list is duplicated.
   procedure zlistx_set_duplicator (self : access czmq_library_h.zlistx_t; duplicator : access function (arg1 : System.Address) return System.Address)  -- /homes/taft/_distrib/include/zlistx.h:188
   with Import => True, 
        Convention => C, 
        External_Name => "zlistx_set_duplicator";

  --  Set a user-defined comparator for zlistx_find and zlistx_sort; the method
  --  must return -1, 0, or 1 depending on whether item1 is less than, equal to,
  --  or greater than, item2.
   procedure zlistx_set_comparator (self : access czmq_library_h.zlistx_t; comparator : access function (arg1 : System.Address; arg2 : System.Address) return int)  -- /homes/taft/_distrib/include/zlistx.h:194
   with Import => True, 
        Convention => C, 
        External_Name => "zlistx_set_comparator";

  --  Self test of this class.
   procedure zlistx_test (verbose : Extensions.bool)  -- /homes/taft/_distrib/include/zlistx.h:198
   with Import => True, 
        Convention => C, 
        External_Name => "zlistx_test";

  --  *** Draft method, for development use, may change without warning ***
  --  Unpack binary frame into a new list. Packed data must follow format
  --  defined by zlistx_pack. List is set to autofree. An empty frame
  --  unpacks to an empty list.
  --  *** Draft method, for development use, may change without warning ***
  --  Serialize list to a binary frame that can be sent in a message.
  --  The packed format is compatible with the 'strings' type implemented by zproto:
  --     ; A list of strings
  --     list            = list-count *longstr
  --     list-count      = number-4
  --     ; Strings are always length + text contents
  --     longstr         = number-4 *VCHAR
  --     ; Numbers are unsigned integers in network byte order
  --     number-4        = 4OCTET
  --  Caller owns return value and must destroy it when done.
  --  @end
end zlistx_h;
