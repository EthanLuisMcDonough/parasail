pragma Ada_2012;
pragma Style_Checks (Off);
pragma Warnings ("U");

with Interfaces.C; use Interfaces.C;
limited with czmq_library_h;
with System;
with Interfaces.C.Extensions;

package zactor_h is

  --  =========================================================================
  --    zactor - actor
  --    Copyright (c) the Contributors as noted in the AUTHORS file.
  --    This file is part of CZMQ, the high-level C binding for 0MQ:
  --    http://czmq.zeromq.org.
  --    This Source Code Form is subject to the terms of the Mozilla Public
  --    License, v. 2.0. If a copy of the MPL was not distributed with this
  --    file, You can obtain one at http://mozilla.org/MPL/2.0/.
  --    =========================================================================
  -- 

  --  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
  --  @warning Please edit the model at "api/zactor.api" to make changes.
  --  @interface
  --  This is a stable class, and may not change except for emergencies. It
  --  is provided in stable builds.
  --  This class has draft methods, which may change over time. They are not
  --  in stable releases, by default. Use --enable-drafts to enable.
  -- Actors get a pipe and arguments from caller
   --  skipped function type zactor_fn

  --  Create a new actor passing arbitrary arguments reference.
   function zactor_new (c_task : access procedure (arg1 : access czmq_library_h.zsock_t; arg2 : System.Address); args : System.Address) return access czmq_library_h.zactor_t  -- /homes/taft/_distrib/include/zactor.h:34
   with Import => True, 
        Convention => C, 
        External_Name => "zactor_new";

  --  Destroy an actor.
   procedure zactor_destroy (self_p : System.Address)  -- /homes/taft/_distrib/include/zactor.h:38
   with Import => True, 
        Convention => C, 
        External_Name => "zactor_destroy";

  --  Send a zmsg message to the actor, take ownership of the message
  --  and destroy when it has been sent.
   function zactor_send (self : access czmq_library_h.zactor_t; msg_p : System.Address) return int  -- /homes/taft/_distrib/include/zactor.h:43
   with Import => True, 
        Convention => C, 
        External_Name => "zactor_send";

  --  Receive a zmsg message from the actor. Returns NULL if the actor
  --  was interrupted before the message could be received, or if there
  --  was a timeout on the actor.
  --  Caller owns return value and must destroy it when done.
   function zactor_recv (self : access czmq_library_h.zactor_t) return access czmq_library_h.zmsg_t  -- /homes/taft/_distrib/include/zactor.h:50
   with Import => True, 
        Convention => C, 
        External_Name => "zactor_recv";

  --  Probe the supplied object, and report if it looks like a zactor_t.
   function zactor_is (self : System.Address) return Extensions.bool  -- /homes/taft/_distrib/include/zactor.h:54
   with Import => True, 
        Convention => C, 
        External_Name => "zactor_is";

  --  Probe the supplied reference. If it looks like a zactor_t instance,
  --  return the underlying libzmq actor handle; else if it looks like
  --  a libzmq actor handle, return the supplied value.
   function zactor_resolve (self : System.Address) return System.Address  -- /homes/taft/_distrib/include/zactor.h:60
   with Import => True, 
        Convention => C, 
        External_Name => "zactor_resolve";

  --  Return the actor's zsock handle. Use this when you absolutely need
  --  to work with the zsock instance rather than the actor.
   function zactor_sock (self : access czmq_library_h.zactor_t) return access czmq_library_h.zsock_t  -- /homes/taft/_distrib/include/zactor.h:65
   with Import => True, 
        Convention => C, 
        External_Name => "zactor_sock";

  --  Self test of this class.
   procedure zactor_test (verbose : Extensions.bool)  -- /homes/taft/_distrib/include/zactor.h:69
   with Import => True, 
        Convention => C, 
        External_Name => "zactor_test";

  -- Function to be called on zactor_destroy. Default behavior is to send zmsg_t with string "$TERM" in a first frame.
  -- An example - to send $KTHXBAI string
  --     if (zstr_send (self, "$KTHXBAI") == 0)
  --         zsock_wait (self);
  --  *** Draft method, for development use, may change without warning ***
  --  Change default destructor by custom function. Actor MUST be able to handle new message instead of default $TERM.
  --  @end
end zactor_h;
