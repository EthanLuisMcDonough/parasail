pragma Ada_2012;
pragma Style_Checks (Off);
pragma Warnings ("U");

with Interfaces.C; use Interfaces.C;
with Interfaces.C.Strings;
limited with czmq_library_h;
with System;
with time_h;
with stdio_h;
with stddef_h;
with Interfaces.C.Extensions;

package zdir_h is

   --  arg-macro: procedure zdir_dump (s, i)
   --    zdir_print(s,i)
  --  =========================================================================
  --    zdir - work with file-system directories
  --    Copyright (c) the Contributors as noted in the AUTHORS file.
  --    This file is part of CZMQ, the high-level C binding for 0MQ:
  --    http://czmq.zeromq.org.
  --    This Source Code Form is subject to the terms of the Mozilla Public
  --    License, v. 2.0. If a copy of the MPL was not distributed with this
  --    file, You can obtain one at http://mozilla.org/MPL/2.0/.
  --    =========================================================================
  -- 

  --  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
  --  @warning Please edit the model at "api/zdir.api" to make changes.
  --  @interface
  --  This is a stable class, and may not change except for emergencies. It
  --  is provided in stable builds.
  --  Create a new directory item that loads in the full tree of the specified
  --  path, optionally located under some parent path. If parent is "-", then
  --  loads only the top-level directory, and does not use parent as a path.
   function zdir_new (path : Interfaces.C.Strings.chars_ptr; parent : Interfaces.C.Strings.chars_ptr) return access czmq_library_h.zdir_t  -- /homes/taft/_distrib/include/zdir.h:30
   with Import => True, 
        Convention => C, 
        External_Name => "zdir_new";

  --  Destroy a directory tree and all children it contains.
   procedure zdir_destroy (self_p : System.Address)  -- /homes/taft/_distrib/include/zdir.h:34
   with Import => True, 
        Convention => C, 
        External_Name => "zdir_destroy";

  --  Return directory path
   function zdir_path (self : access czmq_library_h.zdir_t) return Interfaces.C.Strings.chars_ptr  -- /homes/taft/_distrib/include/zdir.h:38
   with Import => True, 
        Convention => C, 
        External_Name => "zdir_path";

  --  Return last modification time for directory.
   function zdir_modified (self : access czmq_library_h.zdir_t) return time_h.time_t  -- /homes/taft/_distrib/include/zdir.h:42
   with Import => True, 
        Convention => C, 
        External_Name => "zdir_modified";

  --  Return total hierarchy size, in bytes of data contained in all files
  --  in the directory tree.
   function zdir_cursize (self : access czmq_library_h.zdir_t) return stdio_h.off_t  -- /homes/taft/_distrib/include/zdir.h:47
   with Import => True, 
        Convention => C, 
        External_Name => "zdir_cursize";

  --  Return directory count
   function zdir_count (self : access czmq_library_h.zdir_t) return stddef_h.size_t  -- /homes/taft/_distrib/include/zdir.h:51
   with Import => True, 
        Convention => C, 
        External_Name => "zdir_count";

  --  Returns a sorted list of zfile objects; Each entry in the list is a pointer
  --  to a zfile_t item already allocated in the zdir tree. Do not destroy the
  --  original zdir tree until you are done with this list.
  --  Caller owns return value and must destroy it when done.
   function zdir_list (self : access czmq_library_h.zdir_t) return access czmq_library_h.zlist_t  -- /homes/taft/_distrib/include/zdir.h:58
   with Import => True, 
        Convention => C, 
        External_Name => "zdir_list";

  --  Remove directory, optionally including all files that it contains, at
  --  all levels. If force is false, will only remove the directory if empty.
  --  If force is true, will remove all files and all subdirectories.
   procedure zdir_remove (self : access czmq_library_h.zdir_t; force : Extensions.bool)  -- /homes/taft/_distrib/include/zdir.h:64
   with Import => True, 
        Convention => C, 
        External_Name => "zdir_remove";

  --  Calculate differences between two versions of a directory tree.
  --  Returns a list of zdir_patch_t patches. Either older or newer may
  --  be null, indicating the directory is empty/absent. If alias is set,
  --  generates virtual filename (minus path, plus alias).
  --  Caller owns return value and must destroy it when done.
   function zdir_diff
     (older : access czmq_library_h.zdir_t;
      newer : access czmq_library_h.zdir_t;
      alias : Interfaces.C.Strings.chars_ptr) return access czmq_library_h.zlist_t  -- /homes/taft/_distrib/include/zdir.h:72
   with Import => True, 
        Convention => C, 
        External_Name => "zdir_diff";

  --  Return full contents of directory as a zdir_patch list.
  --  Caller owns return value and must destroy it when done.
   function zdir_resync (self : access czmq_library_h.zdir_t; alias : Interfaces.C.Strings.chars_ptr) return access czmq_library_h.zlist_t  -- /homes/taft/_distrib/include/zdir.h:77
   with Import => True, 
        Convention => C, 
        External_Name => "zdir_resync";

  --  Load directory cache; returns a hash table containing the SHA-1 digests
  --  of every file in the tree. The cache is saved between runs in .cache.
  --  Caller owns return value and must destroy it when done.
   function zdir_cache (self : access czmq_library_h.zdir_t) return access czmq_library_h.zhash_t  -- /homes/taft/_distrib/include/zdir.h:83
   with Import => True, 
        Convention => C, 
        External_Name => "zdir_cache";

  --  Print contents of directory to open stream
   procedure zdir_fprint
     (self : access czmq_library_h.zdir_t;
      the_file : access stdio_h.FILE;
      indent : int)  -- /homes/taft/_distrib/include/zdir.h:87
   with Import => True, 
        Convention => C, 
        External_Name => "zdir_fprint";

  --  Print contents of directory to stdout
   procedure zdir_print (self : access czmq_library_h.zdir_t; indent : int)  -- /homes/taft/_distrib/include/zdir.h:91
   with Import => True, 
        Convention => C, 
        External_Name => "zdir_print";

  --  Create a new zdir_watch actor instance:
  --      zactor_t *watch = zactor_new (zdir_watch, NULL);
  --  Destroy zdir_watch instance:
  --      zactor_destroy (&watch);
  --  Enable verbose logging of commands and activity:
  --      zstr_send (watch, "VERBOSE");
  --  Subscribe to changes to a directory path:
  --      zsock_send (watch, "ss", "SUBSCRIBE", "directory_path");
  --  Unsubscribe from changes to a directory path:
  --      zsock_send (watch, "ss", "UNSUBSCRIBE", "directory_path");
  --  Receive directory changes:
  --      zsock_recv (watch, "sp", &path, &patches);
  --      // Delete the received data.
  --      free (path);
  --      zlist_destroy (&patches);
   procedure zdir_watch (pipe : access czmq_library_h.zsock_t; unused : System.Address)  -- /homes/taft/_distrib/include/zdir.h:120
   with Import => True, 
        Convention => C, 
        External_Name => "zdir_watch";

  --  Self test of this class.
   procedure zdir_test (verbose : Extensions.bool)  -- /homes/taft/_distrib/include/zdir.h:124
   with Import => True, 
        Convention => C, 
        External_Name => "zdir_test";

  --  @end
  --  Returns a sorted array of zfile objects; returns a single block of memory,
  --  that you destroy by calling zstr_free(). Each entry in the array is a pointer
  --  to a zfile_t item already allocated in the zdir tree. The array ends with
  --  a null pointer. Do not destroy the original zdir tree until you are done
  --  with this array.
   function zdir_flatten (self : access czmq_library_h.zdir_t) return System.Address  -- /homes/taft/_distrib/include/zdir.h:135
   with Import => True, 
        Convention => C, 
        External_Name => "zdir_flatten";

  --  Free a provided string, and nullify the parent pointer. Safe to call on
  --  a null pointer.
   procedure zdir_flatten_free (files_p : System.Address)  -- /homes/taft/_distrib/include/zdir.h:140
   with Import => True, 
        Convention => C, 
        External_Name => "zdir_flatten_free";

  --  Deprecated method aliases
end zdir_h;
