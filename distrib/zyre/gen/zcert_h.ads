pragma Ada_2012;
pragma Style_Checks (Off);
pragma Warnings ("U");

with Interfaces.C; use Interfaces.C;
limited with czmq_library_h;
with czmq_prelude_h;
with Interfaces.C.Strings;
with System;
with Interfaces.C.Extensions;

package zcert_h is

   --  arg-macro: procedure zcert_dump (s)
   --    zcert_print(s)
  --  =========================================================================
  --    zcert - work with CURVE security certificates
  --    Copyright (c) the Contributors as noted in the AUTHORS file.
  --    This file is part of CZMQ, the high-level C binding for 0MQ:
  --    http://czmq.zeromq.org.
  --    This Source Code Form is subject to the terms of the Mozilla Public
  --    License, v. 2.0. If a copy of the MPL was not distributed with this
  --    file, You can obtain one at http://mozilla.org/MPL/2.0/.
  --    =========================================================================
  -- 

  --  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
  --  @warning Please edit the model at "api/zcert.api" to make changes.
  --  @interface
  --  This is a stable class, and may not change except for emergencies. It
  --  is provided in stable builds.
  --  This class has draft methods, which may change over time. They are not
  --  in stable releases, by default. Use --enable-drafts to enable.
  --  Create and initialize a new certificate in memory
   function zcert_new return access czmq_library_h.zcert_t  -- /homes/taft/_distrib/include/zcert.h:30
   with Import => True, 
        Convention => C, 
        External_Name => "zcert_new";

  --  Accepts public/secret key pair from caller
   function zcert_new_from (public_key : access czmq_prelude_h.byte; secret_key : access czmq_prelude_h.byte) return access czmq_library_h.zcert_t  -- /homes/taft/_distrib/include/zcert.h:34
   with Import => True, 
        Convention => C, 
        External_Name => "zcert_new_from";

  --  Load certificate from file
   function zcert_load (filename : Interfaces.C.Strings.chars_ptr) return access czmq_library_h.zcert_t  -- /homes/taft/_distrib/include/zcert.h:38
   with Import => True, 
        Convention => C, 
        External_Name => "zcert_load";

  --  Destroy a certificate in memory
   procedure zcert_destroy (self_p : System.Address)  -- /homes/taft/_distrib/include/zcert.h:42
   with Import => True, 
        Convention => C, 
        External_Name => "zcert_destroy";

  --  Return public part of key pair as 32-byte binary string
   function zcert_public_key (self : access czmq_library_h.zcert_t) return access czmq_prelude_h.byte  -- /homes/taft/_distrib/include/zcert.h:46
   with Import => True, 
        Convention => C, 
        External_Name => "zcert_public_key";

  --  Return secret part of key pair as 32-byte binary string
   function zcert_secret_key (self : access czmq_library_h.zcert_t) return access czmq_prelude_h.byte  -- /homes/taft/_distrib/include/zcert.h:50
   with Import => True, 
        Convention => C, 
        External_Name => "zcert_secret_key";

  --  Return public part of key pair as Z85 armored string
   function zcert_public_txt (self : access czmq_library_h.zcert_t) return Interfaces.C.Strings.chars_ptr  -- /homes/taft/_distrib/include/zcert.h:54
   with Import => True, 
        Convention => C, 
        External_Name => "zcert_public_txt";

  --  Return secret part of key pair as Z85 armored string
   function zcert_secret_txt (self : access czmq_library_h.zcert_t) return Interfaces.C.Strings.chars_ptr  -- /homes/taft/_distrib/include/zcert.h:58
   with Import => True, 
        Convention => C, 
        External_Name => "zcert_secret_txt";

  --  Set certificate metadata from formatted string.
   procedure zcert_set_meta
     (self : access czmq_library_h.zcert_t;
      name : Interfaces.C.Strings.chars_ptr;
      format : Interfaces.C.Strings.chars_ptr  -- , ...
      )  -- /homes/taft/_distrib/include/zcert.h:62
   with Import => True, 
        Convention => C, 
        External_Name => "zcert_set_meta";

  --  Get metadata value from certificate; if the metadata value doesn't
  --  exist, returns NULL.
   function zcert_meta (self : access czmq_library_h.zcert_t; name : Interfaces.C.Strings.chars_ptr) return Interfaces.C.Strings.chars_ptr  -- /homes/taft/_distrib/include/zcert.h:67
   with Import => True, 
        Convention => C, 
        External_Name => "zcert_meta";

  --  Get list of metadata fields from certificate. Caller is responsible for
  --  destroying list. Caller should not modify the values of list items.
   function zcert_meta_keys (self : access czmq_library_h.zcert_t) return access czmq_library_h.zlist_t  -- /homes/taft/_distrib/include/zcert.h:72
   with Import => True, 
        Convention => C, 
        External_Name => "zcert_meta_keys";

  --  Save full certificate (public + secret) to file for persistent storage
  --  This creates one public file and one secret file (filename + "_secret").
   function zcert_save (self : access czmq_library_h.zcert_t; filename : Interfaces.C.Strings.chars_ptr) return int  -- /homes/taft/_distrib/include/zcert.h:77
   with Import => True, 
        Convention => C, 
        External_Name => "zcert_save";

  --  Save public certificate only to file for persistent storage
   function zcert_save_public (self : access czmq_library_h.zcert_t; filename : Interfaces.C.Strings.chars_ptr) return int  -- /homes/taft/_distrib/include/zcert.h:81
   with Import => True, 
        Convention => C, 
        External_Name => "zcert_save_public";

  --  Save secret certificate only to file for persistent storage
   function zcert_save_secret (self : access czmq_library_h.zcert_t; filename : Interfaces.C.Strings.chars_ptr) return int  -- /homes/taft/_distrib/include/zcert.h:85
   with Import => True, 
        Convention => C, 
        External_Name => "zcert_save_secret";

  --  Apply certificate to socket, i.e. use for CURVE security on socket.
  --  If certificate was loaded from public file, the secret key will be
  --  undefined, and this certificate will not work successfully.
   procedure zcert_apply (self : access czmq_library_h.zcert_t; socket : System.Address)  -- /homes/taft/_distrib/include/zcert.h:91
   with Import => True, 
        Convention => C, 
        External_Name => "zcert_apply";

  --  Return copy of certificate; if certificate is NULL or we exhausted
  --  heap memory, returns NULL.
  --  Caller owns return value and must destroy it when done.
   function zcert_dup (self : access czmq_library_h.zcert_t) return access czmq_library_h.zcert_t  -- /homes/taft/_distrib/include/zcert.h:97
   with Import => True, 
        Convention => C, 
        External_Name => "zcert_dup";

  --  Return true if two certificates have the same keys
   function zcert_eq (self : access czmq_library_h.zcert_t; compare : access czmq_library_h.zcert_t) return Extensions.bool  -- /homes/taft/_distrib/include/zcert.h:101
   with Import => True, 
        Convention => C, 
        External_Name => "zcert_eq";

  --  Print certificate contents to stdout
   procedure zcert_print (self : access czmq_library_h.zcert_t)  -- /homes/taft/_distrib/include/zcert.h:105
   with Import => True, 
        Convention => C, 
        External_Name => "zcert_print";

  --  Self test of this class
   procedure zcert_test (verbose : Extensions.bool)  -- /homes/taft/_distrib/include/zcert.h:109
   with Import => True, 
        Convention => C, 
        External_Name => "zcert_test";

  --  *** Draft method, for development use, may change without warning ***
  --  Accepts public/secret key text pair from caller
  --  *** Draft method, for development use, may change without warning ***
  --  Unset certificate metadata.
  --  @end
  --  Deprecated method aliases
end zcert_h;
