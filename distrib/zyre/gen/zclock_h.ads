pragma Ada_2012;
pragma Style_Checks (Off);
pragma Warnings ("U");

with Interfaces.C; use Interfaces.C;
with stdint_h;
with Interfaces.C.Strings;
with Interfaces.C.Extensions;

package zclock_h is

  --  =========================================================================
  --    zclock - millisecond clocks and delays
  --    Copyright (c) the Contributors as noted in the AUTHORS file.
  --    This file is part of CZMQ, the high-level C binding for 0MQ:
  --    http://czmq.zeromq.org.
  --    This Source Code Form is subject to the terms of the Mozilla Public
  --    License, v. 2.0. If a copy of the MPL was not distributed with this
  --    file, You can obtain one at http://mozilla.org/MPL/2.0/.
  --    =========================================================================
  -- 

  --  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
  --  @warning Please edit the model at "api/zclock.api" to make changes.
  --  @interface
  --  This is a stable class, and may not change except for emergencies. It
  --  is provided in stable builds.
  --  Sleep for a number of milliseconds
   procedure zclock_sleep (msecs : int)  -- /homes/taft/_distrib/include/zclock.h:28
   with Import => True, 
        Convention => C, 
        External_Name => "zclock_sleep";

  --  Return current system clock as milliseconds. Note that this clock can
  --  jump backwards (if the system clock is changed) so is unsafe to use for
  --  timers and time offsets. Use zclock_mono for that instead.
   function zclock_time return stdint_h.int64_t  -- /homes/taft/_distrib/include/zclock.h:34
   with Import => True, 
        Convention => C, 
        External_Name => "zclock_time";

  --  Return current monotonic clock in milliseconds. Use this when you compute
  --  time offsets. The monotonic clock is not affected by system changes and
  --  so will never be reset backwards, unlike a system clock.
   function zclock_mono return stdint_h.int64_t  -- /homes/taft/_distrib/include/zclock.h:40
   with Import => True, 
        Convention => C, 
        External_Name => "zclock_mono";

  --  Return current monotonic clock in microseconds. Use this when you compute
  --  time offsets. The monotonic clock is not affected by system changes and
  --  so will never be reset backwards, unlike a system clock.
   function zclock_usecs return stdint_h.int64_t  -- /homes/taft/_distrib/include/zclock.h:46
   with Import => True, 
        Convention => C, 
        External_Name => "zclock_usecs";

  --  Return formatted date/time as fresh string. Free using zstr_free().
  --  Caller owns return value and must destroy it when done.
   function zclock_timestr return Interfaces.C.Strings.chars_ptr  -- /homes/taft/_distrib/include/zclock.h:51
   with Import => True, 
        Convention => C, 
        External_Name => "zclock_timestr";

  --  Self test of this class.
   procedure zclock_test (verbose : Extensions.bool)  -- /homes/taft/_distrib/include/zclock.h:55
   with Import => True, 
        Convention => C, 
        External_Name => "zclock_test";

  --  @end
  --  DEPRECATED in favor of zsys logging, see issue #519
  --  Print formatted string to stdout, prefixed by date/time and
  --  terminated with a newline.
  --  Compiler hints
   procedure zclock_log (format : Interfaces.C.Strings.chars_ptr  -- , ...
      )  -- /homes/taft/_distrib/include/zclock.h:67
   with Import => True, 
        Convention => C, 
        External_Name => "zclock_log";

end zclock_h;
