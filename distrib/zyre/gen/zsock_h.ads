pragma Ada_2012;
pragma Style_Checks (Off);
pragma Warnings ("U");

with Interfaces.C; use Interfaces.C;
with czmq_library_h;
with Interfaces.C.Strings;
with System;
with Interfaces.C.Extensions;
with czmq_prelude_h;
with stddef_h;

package zsock_h is

   --  arg-macro: procedure zsock_new (t)
   --    zsock_new_checked((t), __FILE__, __LINE__)
   --  arg-macro: procedure zsock_new_pub (e)
   --    zsock_new_pub_checked((e), __FILE__, __LINE__)
   --  arg-macro: procedure zsock_new_sub (e, s)
   --    zsock_new_sub_checked((e), (s), __FILE__, __LINE__)
   --  arg-macro: procedure zsock_new_req (e)
   --    zsock_new_req_checked((e), __FILE__, __LINE__)
   --  arg-macro: procedure zsock_new_rep (e)
   --    zsock_new_rep_checked((e), __FILE__, __LINE__)
   --  arg-macro: procedure zsock_new_dealer (e)
   --    zsock_new_dealer_checked((e), __FILE__, __LINE__)
   --  arg-macro: procedure zsock_new_router (e)
   --    zsock_new_router_checked((e), __FILE__, __LINE__)
   --  arg-macro: procedure zsock_new_pull (e)
   --    zsock_new_pull_checked((e), __FILE__, __LINE__)
   --  arg-macro: procedure zsock_new_push (e)
   --    zsock_new_push_checked((e), __FILE__, __LINE__)
   --  arg-macro: procedure zsock_new_xpub (e)
   --    zsock_new_xpub_checked((e), __FILE__, __LINE__)
   --  arg-macro: procedure zsock_new_xsub (e)
   --    zsock_new_xsub_checked((e), __FILE__, __LINE__)
   --  arg-macro: procedure zsock_new_pair (e)
   --    zsock_new_pair_checked((e), __FILE__, __LINE__)
   --  arg-macro: procedure zsock_new_stream (e)
   --    zsock_new_stream_checked((e), __FILE__, __LINE__)
   --  arg-macro: procedure zsock_destroy (t)
   --    zsock_destroy_checked((t), __FILE__, __LINE__)
  --  =========================================================================
  --    zsock - high-level socket API that hides libzmq contexts and sockets
  --    Copyright (c) the Contributors as noted in the AUTHORS file.
  --    This file is part of CZMQ, the high-level C binding for 0MQ:
  --    http://czmq.zeromq.org.
  --    This Source Code Form is subject to the terms of the Mozilla Public
  --    License, v. 2.0. If a copy of the MPL was not distributed with this
  --    file, You can obtain one at http://mozilla.org/MPL/2.0/.
  --    =========================================================================
  -- 

  --  This interface includes some smart constructors, which create sockets with
  --  additional set-up. In all of these, the endpoint is NULL, or starts with
  --  '@' (bind) or '>' (connect). Multiple endpoints are allowed, separated by
  --  commas. If endpoint does not start with '@' or '>', default action depends
  --  on socket type.
  --  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
  --  @warning Please edit the model at "api/zsock.api" to make changes.
  --  @interface
  --  This is a stable class, and may not change except for emergencies. It
  --  is provided in stable builds.
  --  This class has draft methods, which may change over time. They are not
  --  in stable releases, by default. Use --enable-drafts to enable.
  --  Create a new socket. Returns the new socket, or NULL if the new socket
  --  could not be created. Note that the symbol zsock_new (and other
  --  constructors/destructors for zsock) are redirected to the *_checked
  --  variant, enabling intelligent socket leak detection. This can have
  --  performance implications if you use a LOT of sockets. To turn off this
  --  redirection behaviour, define ZSOCK_NOCHECK.
   function zsock_new (c_type : int) return access czmq_library_h.zsock_t  -- /homes/taft/_distrib/include/zsock.h:41
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_new";

  --  Create a PUB socket. Default action is bind.
   function zsock_new_pub (endpoint : Interfaces.C.Strings.chars_ptr) return access czmq_library_h.zsock_t  -- /homes/taft/_distrib/include/zsock.h:45
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_new_pub";

  --  Create a SUB socket, and optionally subscribe to some prefix string. Default
  --  action is connect.
   function zsock_new_sub (endpoint : Interfaces.C.Strings.chars_ptr; subscribe : Interfaces.C.Strings.chars_ptr) return access czmq_library_h.zsock_t  -- /homes/taft/_distrib/include/zsock.h:50
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_new_sub";

  --  Create a REQ socket. Default action is connect.
   function zsock_new_req (endpoint : Interfaces.C.Strings.chars_ptr) return access czmq_library_h.zsock_t  -- /homes/taft/_distrib/include/zsock.h:54
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_new_req";

  --  Create a REP socket. Default action is bind.
   function zsock_new_rep (endpoint : Interfaces.C.Strings.chars_ptr) return access czmq_library_h.zsock_t  -- /homes/taft/_distrib/include/zsock.h:58
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_new_rep";

  --  Create a DEALER socket. Default action is connect.
   function zsock_new_dealer (endpoint : Interfaces.C.Strings.chars_ptr) return access czmq_library_h.zsock_t  -- /homes/taft/_distrib/include/zsock.h:62
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_new_dealer";

  --  Create a ROUTER socket. Default action is bind.
   function zsock_new_router (endpoint : Interfaces.C.Strings.chars_ptr) return access czmq_library_h.zsock_t  -- /homes/taft/_distrib/include/zsock.h:66
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_new_router";

  --  Create a PUSH socket. Default action is connect.
   function zsock_new_push (endpoint : Interfaces.C.Strings.chars_ptr) return access czmq_library_h.zsock_t  -- /homes/taft/_distrib/include/zsock.h:70
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_new_push";

  --  Create a PULL socket. Default action is bind.
   function zsock_new_pull (endpoint : Interfaces.C.Strings.chars_ptr) return access czmq_library_h.zsock_t  -- /homes/taft/_distrib/include/zsock.h:74
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_new_pull";

  --  Create an XPUB socket. Default action is bind.
   function zsock_new_xpub (endpoint : Interfaces.C.Strings.chars_ptr) return access czmq_library_h.zsock_t  -- /homes/taft/_distrib/include/zsock.h:78
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_new_xpub";

  --  Create an XSUB socket. Default action is connect.
   function zsock_new_xsub (endpoint : Interfaces.C.Strings.chars_ptr) return access czmq_library_h.zsock_t  -- /homes/taft/_distrib/include/zsock.h:82
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_new_xsub";

  --  Create a PAIR socket. Default action is connect.
   function zsock_new_pair (endpoint : Interfaces.C.Strings.chars_ptr) return access czmq_library_h.zsock_t  -- /homes/taft/_distrib/include/zsock.h:86
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_new_pair";

  --  Create a STREAM socket. Default action is connect.
   function zsock_new_stream (endpoint : Interfaces.C.Strings.chars_ptr) return access czmq_library_h.zsock_t  -- /homes/taft/_distrib/include/zsock.h:90
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_new_stream";

  --  Destroy the socket. You must use this for any socket created via the
  --  zsock_new method.
   procedure zsock_destroy (self_p : System.Address)  -- /homes/taft/_distrib/include/zsock.h:95
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_destroy";

  --  Bind a socket to a formatted endpoint. For tcp:// endpoints, supports
  --  ephemeral ports, if you specify the port number as "*". By default
  --  zsock uses the IANA designated range from C000 (49152) to FFFF (65535).
  --  To override this range, follow the "*" with "[first-last]". Either or
  --  both first and last may be empty. To bind to a random port within the
  --  range, use "!" in place of "*".
  --  Examples:
  --      tcp://127.0.0.1:*           bind to first free port from C000 up
  --      tcp://127.0.0.1:!           bind to random port from C000 to FFFF
  --      tcp://127.0.0.1:*[60000-]   bind to first free port from 60000 up
  --      tcp://127.0.0.1:![-60000]   bind to random port from C000 to 60000
  --      tcp://127.0.0.1:![55000-55999]
  --                                  bind to random port from 55000 to 55999
  --  On success, returns the actual port number used, for tcp:// endpoints,
  --  and 0 for other transports. On failure, returns -1. Note that when using
  --  ephemeral ports, a port may be reused by different services without
  --  clients being aware. Protocols that run on ephemeral ports should take
  --  this into account.
   function zsock_bind (self : access czmq_library_h.zsock_t; format : Interfaces.C.Strings.chars_ptr  -- , ...
      ) return int  -- /homes/taft/_distrib/include/zsock.h:118
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_bind";

  --  Returns last bound endpoint, if any.
   function zsock_endpoint (self : access czmq_library_h.zsock_t) return Interfaces.C.Strings.chars_ptr  -- /homes/taft/_distrib/include/zsock.h:122
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_endpoint";

  --  Unbind a socket from a formatted endpoint.
  --  Returns 0 if OK, -1 if the endpoint was invalid or the function
  --  isn't supported.
   function zsock_unbind (self : access czmq_library_h.zsock_t; format : Interfaces.C.Strings.chars_ptr  -- , ...
      ) return int  -- /homes/taft/_distrib/include/zsock.h:128
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_unbind";

  --  Connect a socket to a formatted endpoint
  --  Returns 0 if OK, -1 if the endpoint was invalid.
   function zsock_connect (self : access czmq_library_h.zsock_t; format : Interfaces.C.Strings.chars_ptr  -- , ...
      ) return int  -- /homes/taft/_distrib/include/zsock.h:133
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_connect";

  --  Disconnect a socket from a formatted endpoint
  --  Returns 0 if OK, -1 if the endpoint was invalid or the function
  --  isn't supported.
   function zsock_disconnect (self : access czmq_library_h.zsock_t; format : Interfaces.C.Strings.chars_ptr  -- , ...
      ) return int  -- /homes/taft/_distrib/include/zsock.h:139
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_disconnect";

  --  Attach a socket to zero or more endpoints. If endpoints is not null,
  --  parses as list of ZeroMQ endpoints, separated by commas, and prefixed by
  --  '@' (to bind the socket) or '>' (to connect the socket). Returns 0 if all
  --  endpoints were valid, or -1 if there was a syntax error. If the endpoint
  --  does not start with '@' or '>', the serverish argument defines whether
  --  it is used to bind (serverish = true) or connect (serverish = false).
   function zsock_attach
     (self : access czmq_library_h.zsock_t;
      endpoints : Interfaces.C.Strings.chars_ptr;
      serverish : Extensions.bool) return int  -- /homes/taft/_distrib/include/zsock.h:148
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_attach";

  --  Returns socket type as printable constant string.
   function zsock_type_str (self : access czmq_library_h.zsock_t) return Interfaces.C.Strings.chars_ptr  -- /homes/taft/_distrib/include/zsock.h:152
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_type_str";

  --  Send a 'picture' message to the socket (or actor). The picture is a
  --  string that defines the type of each frame. This makes it easy to send
  --  a complex multiframe message in one call. The picture can contain any
  --  of these characters, each corresponding to one or two arguments:
  --      i = int (signed)
  --      1 = uint8_t
  --      2 = uint16_t
  --      4 = uint32_t
  --      8 = uint64_t
  --      s = char *
  --      b = byte *, size_t (2 arguments)
  --      c = zchunk_t *
  --      f = zframe_t *
  --      h = zhashx_t *
  --      l = zlistx_t * (DRAFT)
  --      U = zuuid_t *
  --      p = void * (sends the pointer value, only meaningful over inproc)
  --      m = zmsg_t * (sends all frames in the zmsg)
  --      z = sends zero-sized frame (0 arguments)
  --      u = uint (deprecated)
  --  Note that s, b, c, and f are encoded the same way and the choice is
  --  offered as a convenience to the sender, which may or may not already
  --  have data in a zchunk or zframe. Does not change or take ownership of
  --  any arguments. Returns 0 if successful, -1 if sending failed for any
  --  reason.
   function zsock_send (self : System.Address; picture : Interfaces.C.Strings.chars_ptr  -- , ...
      ) return int  -- /homes/taft/_distrib/include/zsock.h:182
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_send";

  --  Send a 'picture' message to the socket (or actor). This is a va_list
  --  version of zsock_send (), so please consult its documentation for the
  --  details.
   function zsock_vsend
     (self : System.Address;
      picture : Interfaces.C.Strings.chars_ptr;
      argptr : access System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:188
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_vsend";

  --  Receive a 'picture' message to the socket (or actor). See zsock_send for
  --  the format and meaning of the picture. Returns the picture elements into
  --  a series of pointers as provided by the caller:
  --      i = int * (stores signed integer)
  --      4 = uint32_t * (stores 32-bit unsigned integer)
  --      8 = uint64_t * (stores 64-bit unsigned integer)
  --      s = char ** (allocates new string)
  --      b = byte **, size_t * (2 arguments) (allocates memory)
  --      c = zchunk_t ** (creates zchunk)
  --      f = zframe_t ** (creates zframe)
  --      U = zuuid_t * (creates a zuuid with the data)
  --      h = zhashx_t ** (creates zhashx)
  --      l = zlistx_t ** (creates zlistx) (DRAFT)
  --      p = void ** (stores pointer)
  --      m = zmsg_t ** (creates a zmsg with the remaining frames)
  --      z = null, asserts empty frame (0 arguments)
  --      u = uint * (stores unsigned integer, deprecated)
  --  Note that zsock_recv creates the returned objects, and the caller must
  --  destroy them when finished with them. The supplied pointers do not need
  --  to be initialized. Returns 0 if successful, or -1 if it failed to recv
  --  a message, in which case the pointers are not modified. When message
  --  frames are truncated (a short message), sets return values to zero/null.
  --  If an argument pointer is NULL, does not store any value (skips it).
  --  An 'n' picture matches an empty frame; if the message does not match,
  --  the method will return -1.
   function zsock_recv (self : System.Address; picture : Interfaces.C.Strings.chars_ptr  -- , ...
      ) return int  -- /homes/taft/_distrib/include/zsock.h:218
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_recv";

  --  Receive a 'picture' message from the socket (or actor). This is a
  --  va_list version of zsock_recv (), so please consult its documentation
  --  for the details.
   function zsock_vrecv
     (self : System.Address;
      picture : Interfaces.C.Strings.chars_ptr;
      argptr : access System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:224
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_vrecv";

  --  Send a binary encoded 'picture' message to the socket (or actor). This
  --  method is similar to zsock_send, except the arguments are encoded in a
  --  binary format that is compatible with zproto, and is designed to reduce
  --  memory allocations. The pattern argument is a string that defines the
  --  type of each argument. Supports these argument types:
  --   pattern    C type                  zproto type:
  --      1       uint8_t                 type = "number" size = "1"
  --      2       uint16_t                type = "number" size = "2"
  --      4       uint32_t                type = "number" size = "3"
  --      8       uint64_t                type = "number" size = "4"
  --      s       char *, 0-255 chars     type = "string"
  --      S       char *, 0-2^32-1 chars  type = "longstr"
  --      c       zchunk_t *              type = "chunk"
  --      f       zframe_t *              type = "frame"
  --      u       zuuid_t *               type = "uuid"
  --      m       zmsg_t *                type = "msg"
  --      p       void *, sends pointer value, only over inproc
  --  Does not change or take ownership of any arguments. Returns 0 if
  --  successful, -1 if sending failed for any reason.
   function zsock_bsend (self : System.Address; picture : Interfaces.C.Strings.chars_ptr  -- , ...
      ) return int  -- /homes/taft/_distrib/include/zsock.h:248
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_bsend";

  --  Receive a binary encoded 'picture' message from the socket (or actor).
  --  This method is similar to zsock_recv, except the arguments are encoded
  --  in a binary format that is compatible with zproto, and is designed to
  --  reduce memory allocations. The pattern argument is a string that defines
  --  the type of each argument. See zsock_bsend for the supported argument
  --  types. All arguments must be pointers; this call sets them to point to
  --  values held on a per-socket basis.
  --  For types 1, 2, 4 and 8 the caller must allocate the memory itself before
  --  calling zsock_brecv.
  --  For types S, the caller must free the value once finished with it, as
  --  zsock_brecv will allocate the buffer.
  --  For type s, the caller must not free the value as it is stored in a
  --  local cache for performance purposes.
  --  For types c, f, u and m the caller must call the appropriate destructor
  --  depending on the object as zsock_brecv will create new objects.
  --  For type p the caller must coordinate with the sender, as it is just a
  --  pointer value being passed.
   function zsock_brecv (self : System.Address; picture : Interfaces.C.Strings.chars_ptr  -- , ...
      ) return int  -- /homes/taft/_distrib/include/zsock.h:268
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_brecv";

  --  Set socket to use unbounded pipes (HWM=0); use this in cases when you are
  --  totally certain the message volume can fit in memory. This method works
  --  across all versions of ZeroMQ. Takes a polymorphic socket reference.
   procedure zsock_set_unbounded (self : System.Address)  -- /homes/taft/_distrib/include/zsock.h:274
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_unbounded";

  --  Send a signal over a socket. A signal is a short message carrying a
  --  success/failure code (by convention, 0 means OK). Signals are encoded
  --  to be distinguishable from "normal" messages. Accepts a zsock_t or a
  --  zactor_t argument, and returns 0 if successful, -1 if the signal could
  --  not be sent. Takes a polymorphic socket reference.
   function zsock_signal (self : System.Address; status : czmq_prelude_h.byte) return int  -- /homes/taft/_distrib/include/zsock.h:282
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_signal";

  --  Wait on a signal. Use this to coordinate between threads, over pipe
  --  pairs. Blocks until the signal is received. Returns -1 on error, 0 or
  --  greater on success. Accepts a zsock_t or a zactor_t as argument.
  --  Takes a polymorphic socket reference.
   function zsock_wait (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:289
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_wait";

  --  If there is a partial message still waiting on the socket, remove and
  --  discard it. This is useful when reading partial messages, to get specific
  --  message types.
   procedure zsock_flush (self : System.Address)  -- /homes/taft/_distrib/include/zsock.h:295
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_flush";

  --  Probe the supplied object, and report if it looks like a zsock_t.
  --  Takes a polymorphic socket reference.
   function zsock_is (self : System.Address) return Extensions.bool  -- /homes/taft/_distrib/include/zsock.h:300
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_is";

  --  Probe the supplied reference. If it looks like a zsock_t instance, return
  --  the underlying libzmq socket handle; else if it looks like a file
  --  descriptor, return NULL; else if it looks like a libzmq socket handle,
  --  return the supplied value. Takes a polymorphic socket reference.
   function zsock_resolve (self : System.Address) return System.Address  -- /homes/taft/_distrib/include/zsock.h:307
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_resolve";

  --  Set socket option `only_first_subscribe`.
  --  Available from libzmq 4.3.0.
   procedure zsock_set_only_first_subscribe (self : System.Address; only_first_subscribe : int)  -- /homes/taft/_distrib/include/zsock.h:312
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_only_first_subscribe";

  --  Set socket option `hello_msg`.
  --  Available from libzmq 4.3.0.
   procedure zsock_set_hello_msg (self : System.Address; hello_msg : access czmq_library_h.zframe_t)  -- /homes/taft/_distrib/include/zsock.h:317
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_hello_msg";

  --  Set socket option `disconnect_msg`.
  --  Available from libzmq 4.3.0.
   procedure zsock_set_disconnect_msg (self : System.Address; disconnect_msg : access czmq_library_h.zframe_t)  -- /homes/taft/_distrib/include/zsock.h:322
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_disconnect_msg";

  --  Set socket option `wss_trust_system`.
  --  Available from libzmq 4.3.0.
   procedure zsock_set_wss_trust_system (self : System.Address; wss_trust_system : int)  -- /homes/taft/_distrib/include/zsock.h:327
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_wss_trust_system";

  --  Set socket option `wss_hostname`.
  --  Available from libzmq 4.3.0.
   procedure zsock_set_wss_hostname (self : System.Address; wss_hostname : Interfaces.C.Strings.chars_ptr)  -- /homes/taft/_distrib/include/zsock.h:332
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_wss_hostname";

  --  Set socket option `wss_trust_pem`.
  --  Available from libzmq 4.3.0.
   procedure zsock_set_wss_trust_pem (self : System.Address; wss_trust_pem : Interfaces.C.Strings.chars_ptr)  -- /homes/taft/_distrib/include/zsock.h:337
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_wss_trust_pem";

  --  Set socket option `wss_cert_pem`.
  --  Available from libzmq 4.3.0.
   procedure zsock_set_wss_cert_pem (self : System.Address; wss_cert_pem : Interfaces.C.Strings.chars_ptr)  -- /homes/taft/_distrib/include/zsock.h:342
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_wss_cert_pem";

  --  Set socket option `wss_key_pem`.
  --  Available from libzmq 4.3.0.
   procedure zsock_set_wss_key_pem (self : System.Address; wss_key_pem : Interfaces.C.Strings.chars_ptr)  -- /homes/taft/_distrib/include/zsock.h:347
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_wss_key_pem";

  --  Get socket option `out_batch_size`.
  --  Available from libzmq 4.3.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_out_batch_size (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:353
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_out_batch_size";

  --  Set socket option `out_batch_size`.
  --  Available from libzmq 4.3.0.
   procedure zsock_set_out_batch_size (self : System.Address; out_batch_size : int)  -- /homes/taft/_distrib/include/zsock.h:358
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_out_batch_size";

  --  Get socket option `in_batch_size`.
  --  Available from libzmq 4.3.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_in_batch_size (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:364
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_in_batch_size";

  --  Set socket option `in_batch_size`.
  --  Available from libzmq 4.3.0.
   procedure zsock_set_in_batch_size (self : System.Address; in_batch_size : int)  -- /homes/taft/_distrib/include/zsock.h:369
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_in_batch_size";

  --  Get socket option `socks_password`.
  --  Available from libzmq 4.3.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_socks_password (self : System.Address) return Interfaces.C.Strings.chars_ptr  -- /homes/taft/_distrib/include/zsock.h:375
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_socks_password";

  --  Set socket option `socks_password`.
  --  Available from libzmq 4.3.0.
   procedure zsock_set_socks_password (self : System.Address; socks_password : Interfaces.C.Strings.chars_ptr)  -- /homes/taft/_distrib/include/zsock.h:380
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_socks_password";

  --  Get socket option `socks_username`.
  --  Available from libzmq 4.3.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_socks_username (self : System.Address) return Interfaces.C.Strings.chars_ptr  -- /homes/taft/_distrib/include/zsock.h:386
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_socks_username";

  --  Set socket option `socks_username`.
  --  Available from libzmq 4.3.0.
   procedure zsock_set_socks_username (self : System.Address; socks_username : Interfaces.C.Strings.chars_ptr)  -- /homes/taft/_distrib/include/zsock.h:391
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_socks_username";

  --  Set socket option `xpub_manual_last_value`.
  --  Available from libzmq 4.3.0.
   procedure zsock_set_xpub_manual_last_value (self : System.Address; xpub_manual_last_value : int)  -- /homes/taft/_distrib/include/zsock.h:396
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_xpub_manual_last_value";

  --  Get socket option `router_notify`.
  --  Available from libzmq 4.3.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_router_notify (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:402
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_router_notify";

  --  Set socket option `router_notify`.
  --  Available from libzmq 4.3.0.
   procedure zsock_set_router_notify (self : System.Address; router_notify : int)  -- /homes/taft/_distrib/include/zsock.h:407
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_router_notify";

  --  Get socket option `multicast_loop`.
  --  Available from libzmq 4.3.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_multicast_loop (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:413
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_multicast_loop";

  --  Set socket option `multicast_loop`.
  --  Available from libzmq 4.3.0.
   procedure zsock_set_multicast_loop (self : System.Address; multicast_loop : int)  -- /homes/taft/_distrib/include/zsock.h:418
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_multicast_loop";

  --  Get socket option `metadata`.
  --  Available from libzmq 4.3.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_metadata (self : System.Address) return Interfaces.C.Strings.chars_ptr  -- /homes/taft/_distrib/include/zsock.h:424
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_metadata";

  --  Set socket option `metadata`.
  --  Available from libzmq 4.3.0.
   procedure zsock_set_metadata (self : System.Address; metadata : Interfaces.C.Strings.chars_ptr)  -- /homes/taft/_distrib/include/zsock.h:429
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_metadata";

  --  Get socket option `loopback_fastpath`.
  --  Available from libzmq 4.3.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_loopback_fastpath (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:435
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_loopback_fastpath";

  --  Set socket option `loopback_fastpath`.
  --  Available from libzmq 4.3.0.
   procedure zsock_set_loopback_fastpath (self : System.Address; loopback_fastpath : int)  -- /homes/taft/_distrib/include/zsock.h:440
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_loopback_fastpath";

  --  Get socket option `zap_enforce_domain`.
  --  Available from libzmq 4.3.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_zap_enforce_domain (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:446
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_zap_enforce_domain";

  --  Set socket option `zap_enforce_domain`.
  --  Available from libzmq 4.3.0.
   procedure zsock_set_zap_enforce_domain (self : System.Address; zap_enforce_domain : int)  -- /homes/taft/_distrib/include/zsock.h:451
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_zap_enforce_domain";

  --  Get socket option `gssapi_principal_nametype`.
  --  Available from libzmq 4.3.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_gssapi_principal_nametype (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:457
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_gssapi_principal_nametype";

  --  Set socket option `gssapi_principal_nametype`.
  --  Available from libzmq 4.3.0.
   procedure zsock_set_gssapi_principal_nametype (self : System.Address; gssapi_principal_nametype : int)  -- /homes/taft/_distrib/include/zsock.h:462
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_gssapi_principal_nametype";

  --  Get socket option `gssapi_service_principal_nametype`.
  --  Available from libzmq 4.3.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_gssapi_service_principal_nametype (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:468
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_gssapi_service_principal_nametype";

  --  Set socket option `gssapi_service_principal_nametype`.
  --  Available from libzmq 4.3.0.
   procedure zsock_set_gssapi_service_principal_nametype (self : System.Address; gssapi_service_principal_nametype : int)  -- /homes/taft/_distrib/include/zsock.h:473
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_gssapi_service_principal_nametype";

  --  Get socket option `bindtodevice`.
  --  Available from libzmq 4.3.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_bindtodevice (self : System.Address) return Interfaces.C.Strings.chars_ptr  -- /homes/taft/_distrib/include/zsock.h:479
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_bindtodevice";

  --  Set socket option `bindtodevice`.
  --  Available from libzmq 4.3.0.
   procedure zsock_set_bindtodevice (self : System.Address; bindtodevice : Interfaces.C.Strings.chars_ptr)  -- /homes/taft/_distrib/include/zsock.h:484
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_bindtodevice";

  --  Get socket option `heartbeat_ivl`.
  --  Available from libzmq 4.2.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_heartbeat_ivl (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:490
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_heartbeat_ivl";

  --  Set socket option `heartbeat_ivl`.
  --  Available from libzmq 4.2.0.
   procedure zsock_set_heartbeat_ivl (self : System.Address; heartbeat_ivl : int)  -- /homes/taft/_distrib/include/zsock.h:495
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_heartbeat_ivl";

  --  Get socket option `heartbeat_ttl`.
  --  Available from libzmq 4.2.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_heartbeat_ttl (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:501
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_heartbeat_ttl";

  --  Set socket option `heartbeat_ttl`.
  --  Available from libzmq 4.2.0.
   procedure zsock_set_heartbeat_ttl (self : System.Address; heartbeat_ttl : int)  -- /homes/taft/_distrib/include/zsock.h:506
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_heartbeat_ttl";

  --  Get socket option `heartbeat_timeout`.
  --  Available from libzmq 4.2.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_heartbeat_timeout (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:512
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_heartbeat_timeout";

  --  Set socket option `heartbeat_timeout`.
  --  Available from libzmq 4.2.0.
   procedure zsock_set_heartbeat_timeout (self : System.Address; heartbeat_timeout : int)  -- /homes/taft/_distrib/include/zsock.h:517
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_heartbeat_timeout";

  --  Get socket option `use_fd`.
  --  Available from libzmq 4.2.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_use_fd (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:523
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_use_fd";

  --  Set socket option `use_fd`.
  --  Available from libzmq 4.2.0.
   procedure zsock_set_use_fd (self : System.Address; use_fd : int)  -- /homes/taft/_distrib/include/zsock.h:528
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_use_fd";

  --  Set socket option `xpub_manual`.
  --  Available from libzmq 4.2.0.
   procedure zsock_set_xpub_manual (self : System.Address; xpub_manual : int)  -- /homes/taft/_distrib/include/zsock.h:533
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_xpub_manual";

  --  Set socket option `xpub_welcome_msg`.
  --  Available from libzmq 4.2.0.
   procedure zsock_set_xpub_welcome_msg (self : System.Address; xpub_welcome_msg : Interfaces.C.Strings.chars_ptr)  -- /homes/taft/_distrib/include/zsock.h:538
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_xpub_welcome_msg";

  --  Set socket option `stream_notify`.
  --  Available from libzmq 4.2.0.
   procedure zsock_set_stream_notify (self : System.Address; stream_notify : int)  -- /homes/taft/_distrib/include/zsock.h:543
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_stream_notify";

  --  Get socket option `invert_matching`.
  --  Available from libzmq 4.2.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_invert_matching (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:549
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_invert_matching";

  --  Set socket option `invert_matching`.
  --  Available from libzmq 4.2.0.
   procedure zsock_set_invert_matching (self : System.Address; invert_matching : int)  -- /homes/taft/_distrib/include/zsock.h:554
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_invert_matching";

  --  Set socket option `xpub_verboser`.
  --  Available from libzmq 4.2.0.
   procedure zsock_set_xpub_verboser (self : System.Address; xpub_verboser : int)  -- /homes/taft/_distrib/include/zsock.h:559
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_xpub_verboser";

  --  Get socket option `connect_timeout`.
  --  Available from libzmq 4.2.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_connect_timeout (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:565
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_connect_timeout";

  --  Set socket option `connect_timeout`.
  --  Available from libzmq 4.2.0.
   procedure zsock_set_connect_timeout (self : System.Address; connect_timeout : int)  -- /homes/taft/_distrib/include/zsock.h:570
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_connect_timeout";

  --  Get socket option `tcp_maxrt`.
  --  Available from libzmq 4.2.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_tcp_maxrt (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:576
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_tcp_maxrt";

  --  Set socket option `tcp_maxrt`.
  --  Available from libzmq 4.2.0.
   procedure zsock_set_tcp_maxrt (self : System.Address; tcp_maxrt : int)  -- /homes/taft/_distrib/include/zsock.h:581
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_tcp_maxrt";

  --  Get socket option `thread_safe`.
  --  Available from libzmq 4.2.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_thread_safe (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:587
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_thread_safe";

  --  Get socket option `multicast_maxtpdu`.
  --  Available from libzmq 4.2.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_multicast_maxtpdu (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:593
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_multicast_maxtpdu";

  --  Set socket option `multicast_maxtpdu`.
  --  Available from libzmq 4.2.0.
   procedure zsock_set_multicast_maxtpdu (self : System.Address; multicast_maxtpdu : int)  -- /homes/taft/_distrib/include/zsock.h:598
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_multicast_maxtpdu";

  --  Get socket option `vmci_buffer_size`.
  --  Available from libzmq 4.2.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_vmci_buffer_size (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:604
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_vmci_buffer_size";

  --  Set socket option `vmci_buffer_size`.
  --  Available from libzmq 4.2.0.
   procedure zsock_set_vmci_buffer_size (self : System.Address; vmci_buffer_size : int)  -- /homes/taft/_distrib/include/zsock.h:609
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_vmci_buffer_size";

  --  Get socket option `vmci_buffer_min_size`.
  --  Available from libzmq 4.2.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_vmci_buffer_min_size (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:615
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_vmci_buffer_min_size";

  --  Set socket option `vmci_buffer_min_size`.
  --  Available from libzmq 4.2.0.
   procedure zsock_set_vmci_buffer_min_size (self : System.Address; vmci_buffer_min_size : int)  -- /homes/taft/_distrib/include/zsock.h:620
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_vmci_buffer_min_size";

  --  Get socket option `vmci_buffer_max_size`.
  --  Available from libzmq 4.2.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_vmci_buffer_max_size (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:626
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_vmci_buffer_max_size";

  --  Set socket option `vmci_buffer_max_size`.
  --  Available from libzmq 4.2.0.
   procedure zsock_set_vmci_buffer_max_size (self : System.Address; vmci_buffer_max_size : int)  -- /homes/taft/_distrib/include/zsock.h:631
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_vmci_buffer_max_size";

  --  Get socket option `vmci_connect_timeout`.
  --  Available from libzmq 4.2.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_vmci_connect_timeout (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:637
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_vmci_connect_timeout";

  --  Set socket option `vmci_connect_timeout`.
  --  Available from libzmq 4.2.0.
   procedure zsock_set_vmci_connect_timeout (self : System.Address; vmci_connect_timeout : int)  -- /homes/taft/_distrib/include/zsock.h:642
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_vmci_connect_timeout";

  --  Get socket option `tos`.
  --  Available from libzmq 4.1.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_tos (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:648
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_tos";

  --  Set socket option `tos`.
  --  Available from libzmq 4.1.0.
   procedure zsock_set_tos (self : System.Address; tos : int)  -- /homes/taft/_distrib/include/zsock.h:653
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_tos";

  --  Set socket option `router_handover`.
  --  Available from libzmq 4.1.0.
   procedure zsock_set_router_handover (self : System.Address; router_handover : int)  -- /homes/taft/_distrib/include/zsock.h:658
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_router_handover";

  --  Set socket option `connect_rid`.
  --  Available from libzmq 4.1.0.
   procedure zsock_set_connect_rid (self : System.Address; connect_rid : Interfaces.C.Strings.chars_ptr)  -- /homes/taft/_distrib/include/zsock.h:663
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_connect_rid";

  --  Set socket option `connect_rid` from 32-octet binary
  --  Available from libzmq 4.1.0.
   procedure zsock_set_connect_rid_bin (self : System.Address; connect_rid : access czmq_prelude_h.byte)  -- /homes/taft/_distrib/include/zsock.h:668
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_connect_rid_bin";

  --  Get socket option `handshake_ivl`.
  --  Available from libzmq 4.1.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_handshake_ivl (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:674
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_handshake_ivl";

  --  Set socket option `handshake_ivl`.
  --  Available from libzmq 4.1.0.
   procedure zsock_set_handshake_ivl (self : System.Address; handshake_ivl : int)  -- /homes/taft/_distrib/include/zsock.h:679
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_handshake_ivl";

  --  Get socket option `socks_proxy`.
  --  Available from libzmq 4.1.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_socks_proxy (self : System.Address) return Interfaces.C.Strings.chars_ptr  -- /homes/taft/_distrib/include/zsock.h:685
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_socks_proxy";

  --  Set socket option `socks_proxy`.
  --  Available from libzmq 4.1.0.
   procedure zsock_set_socks_proxy (self : System.Address; socks_proxy : Interfaces.C.Strings.chars_ptr)  -- /homes/taft/_distrib/include/zsock.h:690
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_socks_proxy";

  --  Set socket option `xpub_nodrop`.
  --  Available from libzmq 4.1.0.
   procedure zsock_set_xpub_nodrop (self : System.Address; xpub_nodrop : int)  -- /homes/taft/_distrib/include/zsock.h:695
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_xpub_nodrop";

  --  Set socket option `router_mandatory`.
  --  Available from libzmq 4.0.0.
   procedure zsock_set_router_mandatory (self : System.Address; router_mandatory : int)  -- /homes/taft/_distrib/include/zsock.h:700
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_router_mandatory";

  --  Set socket option `probe_router`.
  --  Available from libzmq 4.0.0.
   procedure zsock_set_probe_router (self : System.Address; probe_router : int)  -- /homes/taft/_distrib/include/zsock.h:705
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_probe_router";

  --  Set socket option `req_relaxed`.
  --  Available from libzmq 4.0.0.
   procedure zsock_set_req_relaxed (self : System.Address; req_relaxed : int)  -- /homes/taft/_distrib/include/zsock.h:710
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_req_relaxed";

  --  Set socket option `req_correlate`.
  --  Available from libzmq 4.0.0.
   procedure zsock_set_req_correlate (self : System.Address; req_correlate : int)  -- /homes/taft/_distrib/include/zsock.h:715
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_req_correlate";

  --  Set socket option `conflate`.
  --  Available from libzmq 4.0.0.
   procedure zsock_set_conflate (self : System.Address; conflate : int)  -- /homes/taft/_distrib/include/zsock.h:720
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_conflate";

  --  Get socket option `zap_domain`.
  --  Available from libzmq 4.0.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_zap_domain (self : System.Address) return Interfaces.C.Strings.chars_ptr  -- /homes/taft/_distrib/include/zsock.h:726
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_zap_domain";

  --  Set socket option `zap_domain`.
  --  Available from libzmq 4.0.0.
   procedure zsock_set_zap_domain (self : System.Address; zap_domain : Interfaces.C.Strings.chars_ptr)  -- /homes/taft/_distrib/include/zsock.h:731
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_zap_domain";

  --  Get socket option `mechanism`.
  --  Available from libzmq 4.0.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_mechanism (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:737
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_mechanism";

  --  Get socket option `plain_server`.
  --  Available from libzmq 4.0.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_plain_server (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:743
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_plain_server";

  --  Set socket option `plain_server`.
  --  Available from libzmq 4.0.0.
   procedure zsock_set_plain_server (self : System.Address; plain_server : int)  -- /homes/taft/_distrib/include/zsock.h:748
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_plain_server";

  --  Get socket option `plain_username`.
  --  Available from libzmq 4.0.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_plain_username (self : System.Address) return Interfaces.C.Strings.chars_ptr  -- /homes/taft/_distrib/include/zsock.h:754
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_plain_username";

  --  Set socket option `plain_username`.
  --  Available from libzmq 4.0.0.
   procedure zsock_set_plain_username (self : System.Address; plain_username : Interfaces.C.Strings.chars_ptr)  -- /homes/taft/_distrib/include/zsock.h:759
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_plain_username";

  --  Get socket option `plain_password`.
  --  Available from libzmq 4.0.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_plain_password (self : System.Address) return Interfaces.C.Strings.chars_ptr  -- /homes/taft/_distrib/include/zsock.h:765
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_plain_password";

  --  Set socket option `plain_password`.
  --  Available from libzmq 4.0.0.
   procedure zsock_set_plain_password (self : System.Address; plain_password : Interfaces.C.Strings.chars_ptr)  -- /homes/taft/_distrib/include/zsock.h:770
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_plain_password";

  --  Get socket option `curve_server`.
  --  Available from libzmq 4.0.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_curve_server (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:776
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_curve_server";

  --  Set socket option `curve_server`.
  --  Available from libzmq 4.0.0.
   procedure zsock_set_curve_server (self : System.Address; curve_server : int)  -- /homes/taft/_distrib/include/zsock.h:781
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_curve_server";

  --  Get socket option `curve_publickey`.
  --  Available from libzmq 4.0.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_curve_publickey (self : System.Address) return Interfaces.C.Strings.chars_ptr  -- /homes/taft/_distrib/include/zsock.h:787
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_curve_publickey";

  --  Set socket option `curve_publickey`.
  --  Available from libzmq 4.0.0.
   procedure zsock_set_curve_publickey (self : System.Address; curve_publickey : Interfaces.C.Strings.chars_ptr)  -- /homes/taft/_distrib/include/zsock.h:792
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_curve_publickey";

  --  Set socket option `curve_publickey` from 32-octet binary
  --  Available from libzmq 4.0.0.
   procedure zsock_set_curve_publickey_bin (self : System.Address; curve_publickey : access czmq_prelude_h.byte)  -- /homes/taft/_distrib/include/zsock.h:797
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_curve_publickey_bin";

  --  Get socket option `curve_secretkey`.
  --  Available from libzmq 4.0.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_curve_secretkey (self : System.Address) return Interfaces.C.Strings.chars_ptr  -- /homes/taft/_distrib/include/zsock.h:803
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_curve_secretkey";

  --  Set socket option `curve_secretkey`.
  --  Available from libzmq 4.0.0.
   procedure zsock_set_curve_secretkey (self : System.Address; curve_secretkey : Interfaces.C.Strings.chars_ptr)  -- /homes/taft/_distrib/include/zsock.h:808
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_curve_secretkey";

  --  Set socket option `curve_secretkey` from 32-octet binary
  --  Available from libzmq 4.0.0.
   procedure zsock_set_curve_secretkey_bin (self : System.Address; curve_secretkey : access czmq_prelude_h.byte)  -- /homes/taft/_distrib/include/zsock.h:813
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_curve_secretkey_bin";

  --  Get socket option `curve_serverkey`.
  --  Available from libzmq 4.0.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_curve_serverkey (self : System.Address) return Interfaces.C.Strings.chars_ptr  -- /homes/taft/_distrib/include/zsock.h:819
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_curve_serverkey";

  --  Set socket option `curve_serverkey`.
  --  Available from libzmq 4.0.0.
   procedure zsock_set_curve_serverkey (self : System.Address; curve_serverkey : Interfaces.C.Strings.chars_ptr)  -- /homes/taft/_distrib/include/zsock.h:824
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_curve_serverkey";

  --  Set socket option `curve_serverkey` from 32-octet binary
  --  Available from libzmq 4.0.0.
   procedure zsock_set_curve_serverkey_bin (self : System.Address; curve_serverkey : access czmq_prelude_h.byte)  -- /homes/taft/_distrib/include/zsock.h:829
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_curve_serverkey_bin";

  --  Get socket option `gssapi_server`.
  --  Available from libzmq 4.0.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_gssapi_server (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:835
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_gssapi_server";

  --  Set socket option `gssapi_server`.
  --  Available from libzmq 4.0.0.
   procedure zsock_set_gssapi_server (self : System.Address; gssapi_server : int)  -- /homes/taft/_distrib/include/zsock.h:840
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_gssapi_server";

  --  Get socket option `gssapi_plaintext`.
  --  Available from libzmq 4.0.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_gssapi_plaintext (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:846
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_gssapi_plaintext";

  --  Set socket option `gssapi_plaintext`.
  --  Available from libzmq 4.0.0.
   procedure zsock_set_gssapi_plaintext (self : System.Address; gssapi_plaintext : int)  -- /homes/taft/_distrib/include/zsock.h:851
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_gssapi_plaintext";

  --  Get socket option `gssapi_principal`.
  --  Available from libzmq 4.0.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_gssapi_principal (self : System.Address) return Interfaces.C.Strings.chars_ptr  -- /homes/taft/_distrib/include/zsock.h:857
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_gssapi_principal";

  --  Set socket option `gssapi_principal`.
  --  Available from libzmq 4.0.0.
   procedure zsock_set_gssapi_principal (self : System.Address; gssapi_principal : Interfaces.C.Strings.chars_ptr)  -- /homes/taft/_distrib/include/zsock.h:862
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_gssapi_principal";

  --  Get socket option `gssapi_service_principal`.
  --  Available from libzmq 4.0.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_gssapi_service_principal (self : System.Address) return Interfaces.C.Strings.chars_ptr  -- /homes/taft/_distrib/include/zsock.h:868
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_gssapi_service_principal";

  --  Set socket option `gssapi_service_principal`.
  --  Available from libzmq 4.0.0.
   procedure zsock_set_gssapi_service_principal (self : System.Address; gssapi_service_principal : Interfaces.C.Strings.chars_ptr)  -- /homes/taft/_distrib/include/zsock.h:873
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_gssapi_service_principal";

  --  Get socket option `ipv6`.
  --  Available from libzmq 4.0.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_ipv6 (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:879
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_ipv6";

  --  Set socket option `ipv6`.
  --  Available from libzmq 4.0.0.
   procedure zsock_set_ipv6 (self : System.Address; ipv6 : int)  -- /homes/taft/_distrib/include/zsock.h:884
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_ipv6";

  --  Get socket option `immediate`.
  --  Available from libzmq 4.0.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_immediate (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:890
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_immediate";

  --  Set socket option `immediate`.
  --  Available from libzmq 4.0.0.
   procedure zsock_set_immediate (self : System.Address; immediate : int)  -- /homes/taft/_distrib/include/zsock.h:895
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_immediate";

  --  Get socket option `sndhwm`.
  --  Available from libzmq 3.0.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_sndhwm (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:901
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_sndhwm";

  --  Set socket option `sndhwm`.
  --  Available from libzmq 3.0.0.
   procedure zsock_set_sndhwm (self : System.Address; sndhwm : int)  -- /homes/taft/_distrib/include/zsock.h:906
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_sndhwm";

  --  Get socket option `rcvhwm`.
  --  Available from libzmq 3.0.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_rcvhwm (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:912
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_rcvhwm";

  --  Set socket option `rcvhwm`.
  --  Available from libzmq 3.0.0.
   procedure zsock_set_rcvhwm (self : System.Address; rcvhwm : int)  -- /homes/taft/_distrib/include/zsock.h:917
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_rcvhwm";

  --  Get socket option `maxmsgsize`.
  --  Available from libzmq 3.0.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_maxmsgsize (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:923
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_maxmsgsize";

  --  Set socket option `maxmsgsize`.
  --  Available from libzmq 3.0.0.
   procedure zsock_set_maxmsgsize (self : System.Address; maxmsgsize : int)  -- /homes/taft/_distrib/include/zsock.h:928
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_maxmsgsize";

  --  Get socket option `multicast_hops`.
  --  Available from libzmq 3.0.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_multicast_hops (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:934
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_multicast_hops";

  --  Set socket option `multicast_hops`.
  --  Available from libzmq 3.0.0.
   procedure zsock_set_multicast_hops (self : System.Address; multicast_hops : int)  -- /homes/taft/_distrib/include/zsock.h:939
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_multicast_hops";

  --  Set socket option `xpub_verbose`.
  --  Available from libzmq 3.0.0.
   procedure zsock_set_xpub_verbose (self : System.Address; xpub_verbose : int)  -- /homes/taft/_distrib/include/zsock.h:944
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_xpub_verbose";

  --  Get socket option `tcp_keepalive`.
  --  Available from libzmq 3.0.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_tcp_keepalive (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:950
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_tcp_keepalive";

  --  Set socket option `tcp_keepalive`.
  --  Available from libzmq 3.0.0.
   procedure zsock_set_tcp_keepalive (self : System.Address; tcp_keepalive : int)  -- /homes/taft/_distrib/include/zsock.h:955
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_tcp_keepalive";

  --  Get socket option `tcp_keepalive_idle`.
  --  Available from libzmq 3.0.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_tcp_keepalive_idle (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:961
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_tcp_keepalive_idle";

  --  Set socket option `tcp_keepalive_idle`.
  --  Available from libzmq 3.0.0.
   procedure zsock_set_tcp_keepalive_idle (self : System.Address; tcp_keepalive_idle : int)  -- /homes/taft/_distrib/include/zsock.h:966
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_tcp_keepalive_idle";

  --  Get socket option `tcp_keepalive_cnt`.
  --  Available from libzmq 3.0.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_tcp_keepalive_cnt (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:972
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_tcp_keepalive_cnt";

  --  Set socket option `tcp_keepalive_cnt`.
  --  Available from libzmq 3.0.0.
   procedure zsock_set_tcp_keepalive_cnt (self : System.Address; tcp_keepalive_cnt : int)  -- /homes/taft/_distrib/include/zsock.h:977
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_tcp_keepalive_cnt";

  --  Get socket option `tcp_keepalive_intvl`.
  --  Available from libzmq 3.0.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_tcp_keepalive_intvl (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:983
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_tcp_keepalive_intvl";

  --  Set socket option `tcp_keepalive_intvl`.
  --  Available from libzmq 3.0.0.
   procedure zsock_set_tcp_keepalive_intvl (self : System.Address; tcp_keepalive_intvl : int)  -- /homes/taft/_distrib/include/zsock.h:988
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_tcp_keepalive_intvl";

  --  Get socket option `tcp_accept_filter`.
  --  Available from libzmq 3.0.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_tcp_accept_filter (self : System.Address) return Interfaces.C.Strings.chars_ptr  -- /homes/taft/_distrib/include/zsock.h:994
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_tcp_accept_filter";

  --  Set socket option `tcp_accept_filter`.
  --  Available from libzmq 3.0.0.
   procedure zsock_set_tcp_accept_filter (self : System.Address; tcp_accept_filter : Interfaces.C.Strings.chars_ptr)  -- /homes/taft/_distrib/include/zsock.h:999
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_tcp_accept_filter";

  --  Get socket option `last_endpoint`.
  --  Available from libzmq 3.0.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_last_endpoint (self : System.Address) return Interfaces.C.Strings.chars_ptr  -- /homes/taft/_distrib/include/zsock.h:1005
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_last_endpoint";

  --  Set socket option `router_raw`.
  --  Available from libzmq 3.0.0.
   procedure zsock_set_router_raw (self : System.Address; router_raw : int)  -- /homes/taft/_distrib/include/zsock.h:1010
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_router_raw";

  --  Get socket option `ipv4only`.
  --  Available from libzmq 3.0.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_ipv4only (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:1016
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_ipv4only";

  --  Set socket option `ipv4only`.
  --  Available from libzmq 3.0.0.
   procedure zsock_set_ipv4only (self : System.Address; ipv4only : int)  -- /homes/taft/_distrib/include/zsock.h:1021
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_ipv4only";

  --  Set socket option `delay_attach_on_connect`.
  --  Available from libzmq 3.0.0.
   procedure zsock_set_delay_attach_on_connect (self : System.Address; delay_attach_on_connect : int)  -- /homes/taft/_distrib/include/zsock.h:1026
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_delay_attach_on_connect";

  --  Get socket option `hwm`.
  --  Available from libzmq 2.0.0 to 3.0.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_hwm (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:1032
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_hwm";

  --  Set socket option `hwm`.
  --  Available from libzmq 2.0.0 to 3.0.0.
   procedure zsock_set_hwm (self : System.Address; hwm : int)  -- /homes/taft/_distrib/include/zsock.h:1037
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_hwm";

  --  Get socket option `swap`.
  --  Available from libzmq 2.0.0 to 3.0.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_swap (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:1043
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_swap";

  --  Set socket option `swap`.
  --  Available from libzmq 2.0.0 to 3.0.0.
   procedure zsock_set_swap (self : System.Address; swap : int)  -- /homes/taft/_distrib/include/zsock.h:1048
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_swap";

  --  Get socket option `affinity`.
  --  Available from libzmq 2.0.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_affinity (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:1054
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_affinity";

  --  Set socket option `affinity`.
  --  Available from libzmq 2.0.0.
   procedure zsock_set_affinity (self : System.Address; affinity : int)  -- /homes/taft/_distrib/include/zsock.h:1059
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_affinity";

  --  Get socket option `identity`.
  --  Available from libzmq 2.0.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_identity (self : System.Address) return Interfaces.C.Strings.chars_ptr  -- /homes/taft/_distrib/include/zsock.h:1065
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_identity";

  --  Set socket option `identity`.
  --  Available from libzmq 2.0.0.
   procedure zsock_set_identity (self : System.Address; identity : Interfaces.C.Strings.chars_ptr)  -- /homes/taft/_distrib/include/zsock.h:1070
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_identity";

  --  Get socket option `rate`.
  --  Available from libzmq 2.0.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_rate (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:1076
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_rate";

  --  Set socket option `rate`.
  --  Available from libzmq 2.0.0.
   procedure zsock_set_rate (self : System.Address; rate : int)  -- /homes/taft/_distrib/include/zsock.h:1081
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_rate";

  --  Get socket option `recovery_ivl`.
  --  Available from libzmq 2.0.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_recovery_ivl (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:1087
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_recovery_ivl";

  --  Set socket option `recovery_ivl`.
  --  Available from libzmq 2.0.0.
   procedure zsock_set_recovery_ivl (self : System.Address; recovery_ivl : int)  -- /homes/taft/_distrib/include/zsock.h:1092
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_recovery_ivl";

  --  Get socket option `recovery_ivl_msec`.
  --  Available from libzmq 2.0.0 to 3.0.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_recovery_ivl_msec (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:1098
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_recovery_ivl_msec";

  --  Set socket option `recovery_ivl_msec`.
  --  Available from libzmq 2.0.0 to 3.0.0.
   procedure zsock_set_recovery_ivl_msec (self : System.Address; recovery_ivl_msec : int)  -- /homes/taft/_distrib/include/zsock.h:1103
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_recovery_ivl_msec";

  --  Get socket option `mcast_loop`.
  --  Available from libzmq 2.0.0 to 3.0.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_mcast_loop (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:1109
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_mcast_loop";

  --  Set socket option `mcast_loop`.
  --  Available from libzmq 2.0.0 to 3.0.0.
   procedure zsock_set_mcast_loop (self : System.Address; mcast_loop : int)  -- /homes/taft/_distrib/include/zsock.h:1114
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_mcast_loop";

  --  Get socket option `rcvtimeo`.
  --  Available from libzmq 2.2.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_rcvtimeo (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:1120
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_rcvtimeo";

  --  Set socket option `rcvtimeo`.
  --  Available from libzmq 2.2.0.
   procedure zsock_set_rcvtimeo (self : System.Address; rcvtimeo : int)  -- /homes/taft/_distrib/include/zsock.h:1125
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_rcvtimeo";

  --  Get socket option `sndtimeo`.
  --  Available from libzmq 2.2.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_sndtimeo (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:1131
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_sndtimeo";

  --  Set socket option `sndtimeo`.
  --  Available from libzmq 2.2.0.
   procedure zsock_set_sndtimeo (self : System.Address; sndtimeo : int)  -- /homes/taft/_distrib/include/zsock.h:1136
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_sndtimeo";

  --  Get socket option `sndbuf`.
  --  Available from libzmq 2.0.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_sndbuf (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:1142
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_sndbuf";

  --  Set socket option `sndbuf`.
  --  Available from libzmq 2.0.0.
   procedure zsock_set_sndbuf (self : System.Address; sndbuf : int)  -- /homes/taft/_distrib/include/zsock.h:1147
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_sndbuf";

  --  Get socket option `rcvbuf`.
  --  Available from libzmq 2.0.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_rcvbuf (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:1153
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_rcvbuf";

  --  Set socket option `rcvbuf`.
  --  Available from libzmq 2.0.0.
   procedure zsock_set_rcvbuf (self : System.Address; rcvbuf : int)  -- /homes/taft/_distrib/include/zsock.h:1158
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_rcvbuf";

  --  Get socket option `linger`.
  --  Available from libzmq 2.0.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_linger (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:1164
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_linger";

  --  Set socket option `linger`.
  --  Available from libzmq 2.0.0.
   procedure zsock_set_linger (self : System.Address; linger : int)  -- /homes/taft/_distrib/include/zsock.h:1169
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_linger";

  --  Get socket option `reconnect_ivl`.
  --  Available from libzmq 2.0.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_reconnect_ivl (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:1175
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_reconnect_ivl";

  --  Set socket option `reconnect_ivl`.
  --  Available from libzmq 2.0.0.
   procedure zsock_set_reconnect_ivl (self : System.Address; reconnect_ivl : int)  -- /homes/taft/_distrib/include/zsock.h:1180
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_reconnect_ivl";

  --  Get socket option `reconnect_ivl_max`.
  --  Available from libzmq 2.0.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_reconnect_ivl_max (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:1186
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_reconnect_ivl_max";

  --  Set socket option `reconnect_ivl_max`.
  --  Available from libzmq 2.0.0.
   procedure zsock_set_reconnect_ivl_max (self : System.Address; reconnect_ivl_max : int)  -- /homes/taft/_distrib/include/zsock.h:1191
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_reconnect_ivl_max";

  --  Get socket option `backlog`.
  --  Available from libzmq 2.0.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_backlog (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:1197
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_backlog";

  --  Set socket option `backlog`.
  --  Available from libzmq 2.0.0.
   procedure zsock_set_backlog (self : System.Address; backlog : int)  -- /homes/taft/_distrib/include/zsock.h:1202
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_backlog";

  --  Set socket option `subscribe`.
  --  Available from libzmq 2.0.0.
   procedure zsock_set_subscribe (self : System.Address; subscribe : Interfaces.C.Strings.chars_ptr)  -- /homes/taft/_distrib/include/zsock.h:1207
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_subscribe";

  --  Set socket option `unsubscribe`.
  --  Available from libzmq 2.0.0.
   procedure zsock_set_unsubscribe (self : System.Address; unsubscribe : Interfaces.C.Strings.chars_ptr)  -- /homes/taft/_distrib/include/zsock.h:1212
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_set_unsubscribe";

  --  Get socket option `type`.
  --  Available from libzmq 2.0.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_type (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:1218
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_type";

  --  Get socket option `rcvmore`.
  --  Available from libzmq 2.0.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_rcvmore (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:1224
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_rcvmore";

  --  Get socket option `fd`.
  --  Available from libzmq 2.0.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_fd (self : System.Address) return czmq_prelude_h.SOCKET  -- /homes/taft/_distrib/include/zsock.h:1230
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_fd";

  --  Get socket option `events`.
  --  Available from libzmq 2.0.0.
  --  Caller owns return value and must destroy it when done.
   function zsock_events (self : System.Address) return int  -- /homes/taft/_distrib/include/zsock.h:1236
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_events";

  --  Self test of this class.
   procedure zsock_test (verbose : Extensions.bool)  -- /homes/taft/_distrib/include/zsock.h:1240
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_test";

  --  *** Draft method, for development use, may change without warning ***
  --  Create a SERVER socket. Default action is bind.
  --  *** Draft method, for development use, may change without warning ***
  --  Create a CLIENT socket. Default action is connect.
  --  *** Draft method, for development use, may change without warning ***
  --  Create a RADIO socket. Default action is bind.
  --  *** Draft method, for development use, may change without warning ***
  --  Create a DISH socket. Default action is connect.
  --  *** Draft method, for development use, may change without warning ***
  --  Create a GATHER socket. Default action is bind.
  --  *** Draft method, for development use, may change without warning ***
  --  Create a SCATTER socket. Default action is connect.
  --  *** Draft method, for development use, may change without warning ***
  --  Create a DGRAM (UDP) socket. Default action is bind.
  --  The endpoint is a string consisting of a
  --  'transport'`://` followed by an 'address'. As this is
  --  a UDP socket the 'transport' has to be 'udp'. The
  --  'address' specifies the ip address and port to
  --  bind to. For example:  udp://127.0.0.1:1234
  --  Note: To send to an endpoint over UDP you have to
  --  send a message with the destination endpoint address
  --  as a first message!
  --  *** Draft method, for development use, may change without warning ***
  --  Return socket routing ID if any. This returns 0 if the socket is not
  --  of type ZMQ_SERVER or if no request was already received on it.
  --  *** Draft method, for development use, may change without warning ***
  --  Set routing ID on socket. The socket MUST be of type ZMQ_SERVER.
  --  This will be used when sending messages on the socket via the zsock API.
  --  *** Draft method, for development use, may change without warning ***
  --  Join a group for the RADIO-DISH pattern. Call only on ZMQ_DISH.
  --  Returns 0 if OK, -1 if failed.
  --  *** Draft method, for development use, may change without warning ***
  --  Leave a group for the RADIO-DISH pattern. Call only on ZMQ_DISH.
  --  Returns 0 if OK, -1 if failed.
  --  *** Draft method, for development use, may change without warning ***
  --  Check whether the socket has available message to read.
  --  @end
  -- zsock leak detection - not a part of the official interface to zsock. This
  -- enables CZMQ to report socket leaks intelligently.
  -- no checking active - use the above interface methods directly.
   function zsock_new_checked
     (c_type : int;
      filename : Interfaces.C.Strings.chars_ptr;
      line_nbr : stddef_h.size_t) return access czmq_library_h.zsock_t  -- /homes/taft/_distrib/include/zsock.h:1341
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_new_checked";

   procedure zsock_destroy_checked
     (self_p : System.Address;
      filename : Interfaces.C.Strings.chars_ptr;
      line_nbr : stddef_h.size_t)  -- /homes/taft/_distrib/include/zsock.h:1344
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_destroy_checked";

   function zsock_new_pub_checked
     (endpoint : Interfaces.C.Strings.chars_ptr;
      filename : Interfaces.C.Strings.chars_ptr;
      line_nbr : stddef_h.size_t) return access czmq_library_h.zsock_t  -- /homes/taft/_distrib/include/zsock.h:1347
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_new_pub_checked";

   function zsock_new_sub_checked
     (endpoint : Interfaces.C.Strings.chars_ptr;
      subscribe : Interfaces.C.Strings.chars_ptr;
      filename : Interfaces.C.Strings.chars_ptr;
      line_nbr : stddef_h.size_t) return access czmq_library_h.zsock_t  -- /homes/taft/_distrib/include/zsock.h:1350
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_new_sub_checked";

   function zsock_new_req_checked
     (endpoint : Interfaces.C.Strings.chars_ptr;
      filename : Interfaces.C.Strings.chars_ptr;
      line_nbr : stddef_h.size_t) return access czmq_library_h.zsock_t  -- /homes/taft/_distrib/include/zsock.h:1353
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_new_req_checked";

   function zsock_new_rep_checked
     (endpoint : Interfaces.C.Strings.chars_ptr;
      filename : Interfaces.C.Strings.chars_ptr;
      line_nbr : stddef_h.size_t) return access czmq_library_h.zsock_t  -- /homes/taft/_distrib/include/zsock.h:1356
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_new_rep_checked";

   function zsock_new_dealer_checked
     (endpoint : Interfaces.C.Strings.chars_ptr;
      filename : Interfaces.C.Strings.chars_ptr;
      line_nbr : stddef_h.size_t) return access czmq_library_h.zsock_t  -- /homes/taft/_distrib/include/zsock.h:1359
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_new_dealer_checked";

   function zsock_new_router_checked
     (endpoint : Interfaces.C.Strings.chars_ptr;
      filename : Interfaces.C.Strings.chars_ptr;
      line_nbr : stddef_h.size_t) return access czmq_library_h.zsock_t  -- /homes/taft/_distrib/include/zsock.h:1362
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_new_router_checked";

   function zsock_new_push_checked
     (endpoint : Interfaces.C.Strings.chars_ptr;
      filename : Interfaces.C.Strings.chars_ptr;
      line_nbr : stddef_h.size_t) return access czmq_library_h.zsock_t  -- /homes/taft/_distrib/include/zsock.h:1365
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_new_push_checked";

   function zsock_new_pull_checked
     (endpoint : Interfaces.C.Strings.chars_ptr;
      filename : Interfaces.C.Strings.chars_ptr;
      line_nbr : stddef_h.size_t) return access czmq_library_h.zsock_t  -- /homes/taft/_distrib/include/zsock.h:1368
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_new_pull_checked";

   function zsock_new_xpub_checked
     (endpoint : Interfaces.C.Strings.chars_ptr;
      filename : Interfaces.C.Strings.chars_ptr;
      line_nbr : stddef_h.size_t) return access czmq_library_h.zsock_t  -- /homes/taft/_distrib/include/zsock.h:1371
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_new_xpub_checked";

   function zsock_new_xsub_checked
     (endpoint : Interfaces.C.Strings.chars_ptr;
      filename : Interfaces.C.Strings.chars_ptr;
      line_nbr : stddef_h.size_t) return access czmq_library_h.zsock_t  -- /homes/taft/_distrib/include/zsock.h:1374
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_new_xsub_checked";

   function zsock_new_pair_checked
     (endpoint : Interfaces.C.Strings.chars_ptr;
      filename : Interfaces.C.Strings.chars_ptr;
      line_nbr : stddef_h.size_t) return access czmq_library_h.zsock_t  -- /homes/taft/_distrib/include/zsock.h:1377
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_new_pair_checked";

   function zsock_new_stream_checked
     (endpoint : Interfaces.C.Strings.chars_ptr;
      filename : Interfaces.C.Strings.chars_ptr;
      line_nbr : stddef_h.size_t) return access czmq_library_h.zsock_t  -- /homes/taft/_distrib/include/zsock.h:1380
   with Import => True, 
        Convention => C, 
        External_Name => "zsock_new_stream_checked";

end zsock_h;
