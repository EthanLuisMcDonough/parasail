pragma Ada_2012;
pragma Style_Checks (Off);
pragma Warnings ("U");

with Interfaces.C; use Interfaces.C;
with czmq_library_h;
with System;
with Interfaces.C.Extensions;
with stddef_h;

package zlist_h is

  --  =========================================================================
  --    zlist - simple generic list container
  --    Copyright (c) the Contributors as noted in the AUTHORS file.
  --    This file is part of CZMQ, the high-level C binding for 0MQ:
  --    http://czmq.zeromq.org.
  --    This Source Code Form is subject to the terms of the Mozilla Public
  --    License, v. 2.0. If a copy of the MPL was not distributed with this
  --    file, You can obtain one at http://mozilla.org/MPL/2.0/.
  --    =========================================================================
  -- 

  --  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
  --  @warning Please edit the model at "api/zlist.api" to make changes.
  --  @interface
  --  This is a stable class, and may not change except for emergencies. It
  --  is provided in stable builds.
  -- Comparison function e.g. for sorting and removing.
   --  skipped function type zlist_compare_fn

  -- Callback function for zlist_freefn method
   --  skipped function type zlist_free_fn

  --  Create a new list container
   function zlist_new return access czmq_library_h.zlist_t  -- /homes/taft/_distrib/include/zlist.h:36
   with Import => True, 
        Convention => C, 
        External_Name => "zlist_new";

  --  Destroy a list container
   procedure zlist_destroy (self_p : System.Address)  -- /homes/taft/_distrib/include/zlist.h:40
   with Import => True, 
        Convention => C, 
        External_Name => "zlist_destroy";

  --  Return the item at the head of list. If the list is empty, returns NULL.
  --  Leaves cursor pointing at the head item, or NULL if the list is empty.
   function zlist_first (self : access czmq_library_h.zlist_t) return System.Address  -- /homes/taft/_distrib/include/zlist.h:45
   with Import => True, 
        Convention => C, 
        External_Name => "zlist_first";

  --  Return the next item. If the list is empty, returns NULL. To move to
  --  the start of the list call zlist_first (). Advances the cursor.
   function zlist_next (self : access czmq_library_h.zlist_t) return System.Address  -- /homes/taft/_distrib/include/zlist.h:50
   with Import => True, 
        Convention => C, 
        External_Name => "zlist_next";

  --  Return the item at the tail of list. If the list is empty, returns NULL.
  --  Leaves cursor pointing at the tail item, or NULL if the list is empty.
   function zlist_last (self : access czmq_library_h.zlist_t) return System.Address  -- /homes/taft/_distrib/include/zlist.h:55
   with Import => True, 
        Convention => C, 
        External_Name => "zlist_last";

  --  Return first item in the list, or null, leaves the cursor
   function zlist_head (self : access czmq_library_h.zlist_t) return System.Address  -- /homes/taft/_distrib/include/zlist.h:59
   with Import => True, 
        Convention => C, 
        External_Name => "zlist_head";

  --  Return last item in the list, or null, leaves the cursor
   function zlist_tail (self : access czmq_library_h.zlist_t) return System.Address  -- /homes/taft/_distrib/include/zlist.h:63
   with Import => True, 
        Convention => C, 
        External_Name => "zlist_tail";

  --  Return the current item of list. If the list is empty, returns NULL.
  --  Leaves cursor pointing at the current item, or NULL if the list is empty.
   function zlist_item (self : access czmq_library_h.zlist_t) return System.Address  -- /homes/taft/_distrib/include/zlist.h:68
   with Import => True, 
        Convention => C, 
        External_Name => "zlist_item";

  --  Append an item to the end of the list, return 0 if OK or -1 if this
  --  failed for some reason (out of memory). Note that if a duplicator has
  --  been set, this method will also duplicate the item.
   function zlist_append (self : access czmq_library_h.zlist_t; item : System.Address) return int  -- /homes/taft/_distrib/include/zlist.h:74
   with Import => True, 
        Convention => C, 
        External_Name => "zlist_append";

  --  Push an item to the start of the list, return 0 if OK or -1 if this
  --  failed for some reason (out of memory). Note that if a duplicator has
  --  been set, this method will also duplicate the item.
   function zlist_push (self : access czmq_library_h.zlist_t; item : System.Address) return int  -- /homes/taft/_distrib/include/zlist.h:80
   with Import => True, 
        Convention => C, 
        External_Name => "zlist_push";

  --  Pop the item off the start of the list, if any
   function zlist_pop (self : access czmq_library_h.zlist_t) return System.Address  -- /homes/taft/_distrib/include/zlist.h:84
   with Import => True, 
        Convention => C, 
        External_Name => "zlist_pop";

  --  Checks if an item already is present. Uses compare method to determine if
  --  items are equal. If the compare method is NULL the check will only compare
  --  pointers. Returns true if item is present else false.
   function zlist_exists (self : access czmq_library_h.zlist_t; item : System.Address) return Extensions.bool  -- /homes/taft/_distrib/include/zlist.h:90
   with Import => True, 
        Convention => C, 
        External_Name => "zlist_exists";

  --  Remove the specified item from the list if present
   procedure zlist_remove (self : access czmq_library_h.zlist_t; item : System.Address)  -- /homes/taft/_distrib/include/zlist.h:94
   with Import => True, 
        Convention => C, 
        External_Name => "zlist_remove";

  --  Make a copy of list. If the list has autofree set, the copied list will
  --  duplicate all items, which must be strings. Otherwise, the list will hold
  --  pointers back to the items in the original list. If list is null, returns
  --  NULL.
  --  Caller owns return value and must destroy it when done.
   function zlist_dup (self : access czmq_library_h.zlist_t) return access czmq_library_h.zlist_t  -- /homes/taft/_distrib/include/zlist.h:102
   with Import => True, 
        Convention => C, 
        External_Name => "zlist_dup";

  --  Purge all items from list
   procedure zlist_purge (self : access czmq_library_h.zlist_t)  -- /homes/taft/_distrib/include/zlist.h:106
   with Import => True, 
        Convention => C, 
        External_Name => "zlist_purge";

  --  Return number of items in the list
   function zlist_size (self : access czmq_library_h.zlist_t) return stddef_h.size_t  -- /homes/taft/_distrib/include/zlist.h:110
   with Import => True, 
        Convention => C, 
        External_Name => "zlist_size";

  --  Sort the list. If the compare function is null, sorts the list by
  --  ascending key value using a straight ASCII comparison. If you specify
  --  a compare function, this decides how items are sorted. The sort is not
  --  stable, so may reorder items with the same keys. The algorithm used is
  --  combsort, a compromise between performance and simplicity.
   procedure zlist_sort (self : access czmq_library_h.zlist_t; compare : access function (arg1 : System.Address; arg2 : System.Address) return int)  -- /homes/taft/_distrib/include/zlist.h:118
   with Import => True, 
        Convention => C, 
        External_Name => "zlist_sort";

  --  Set list for automatic item destruction; item values MUST be strings.
  --  By default a list item refers to a value held elsewhere. When you set
  --  this, each time you append or push a list item, zlist will take a copy
  --  of the string value. Then, when you destroy the list, it will free all
  --  item values automatically. If you use any other technique to allocate
  --  list values, you must free them explicitly before destroying the list.
  --  The usual technique is to pop list items and destroy them, until the
  --  list is empty.
   procedure zlist_autofree (self : access czmq_library_h.zlist_t)  -- /homes/taft/_distrib/include/zlist.h:129
   with Import => True, 
        Convention => C, 
        External_Name => "zlist_autofree";

  --  Sets a compare function for this list. The function compares two items.
  --  It returns an integer less than, equal to, or greater than zero if the
  --  first item is found, respectively, to be less than, to match, or be
  --  greater than the second item.
  --  This function is used for sorting, removal and exists checking.
   procedure zlist_comparefn (self : access czmq_library_h.zlist_t; fn : access function (arg1 : System.Address; arg2 : System.Address) return int)  -- /homes/taft/_distrib/include/zlist.h:137
   with Import => True, 
        Convention => C, 
        External_Name => "zlist_comparefn";

  --  Set a free function for the specified list item. When the item is
  --  destroyed, the free function, if any, is called on that item.
  --  Use this when list items are dynamically allocated, to ensure that
  --  you don't have memory leaks. You can pass 'free' or NULL as a free_fn.
  --  Returns the item, or NULL if there is no such item.
   function zlist_freefn
     (self : access czmq_library_h.zlist_t;
      item : System.Address;
      fn : access procedure (arg1 : System.Address);
      at_tail : Extensions.bool) return System.Address  -- /homes/taft/_distrib/include/zlist.h:145
   with Import => True, 
        Convention => C, 
        External_Name => "zlist_freefn";

  --  Self test of this class.
   procedure zlist_test (verbose : Extensions.bool)  -- /homes/taft/_distrib/include/zlist.h:149
   with Import => True, 
        Convention => C, 
        External_Name => "zlist_test";

  --  @end
end zlist_h;
