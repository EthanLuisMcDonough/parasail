pragma Ada_2012;
pragma Style_Checks (Off);
pragma Warnings ("U");

with Interfaces.C; use Interfaces.C;
with System;
with Interfaces.C.Strings;
with Interfaces.C.Extensions;

package zstr_h is

  --  =========================================================================
  --    zstr - sending and receiving strings
  --    Copyright (c) the Contributors as noted in the AUTHORS file.
  --    This file is part of CZMQ, the high-level C binding for 0MQ:
  --    http://czmq.zeromq.org.
  --    This Source Code Form is subject to the terms of the Mozilla Public
  --    License, v. 2.0. If a copy of the MPL was not distributed with this
  --    file, You can obtain one at http://mozilla.org/MPL/2.0/.
  --    =========================================================================
  -- 

  --  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
  --  @warning Please edit the model at "api/zstr.api" to make changes.
  --  @interface
  --  This is a stable class, and may not change except for emergencies. It
  --  is provided in stable builds.
  --  This class has draft methods, which may change over time. They are not
  --  in stable releases, by default. Use --enable-drafts to enable.
  --  Receive C string from socket. Caller must free returned string using
  --  zstr_free(). Returns NULL if the context is being terminated or the
  --  process was interrupted.
  --  Caller owns return value and must destroy it when done.
   function zstr_recv (source : System.Address) return Interfaces.C.Strings.chars_ptr  -- /homes/taft/_distrib/include/zstr.h:33
   with Import => True, 
        Convention => C, 
        External_Name => "zstr_recv";

  --  Receive a series of strings (until NULL) from multipart data.
  --  Each string is allocated and filled with string data; if there
  --  are not enough frames, unallocated strings are set to NULL.
  --  Returns -1 if the message could not be read, else returns the
  --  number of strings filled, zero or more. Free each returned string
  --  using zstr_free(). If not enough strings are provided, remaining
  --  multipart frames in the message are dropped.
   function zstr_recvx (source : System.Address; string_p : System.Address  -- , ...
      ) return int  -- /homes/taft/_distrib/include/zstr.h:43
   with Import => True, 
        Convention => C, 
        External_Name => "zstr_recvx";

  --  Send a C string to a socket, as a frame. The string is sent without
  --  trailing null byte; to read this you can use zstr_recv, or a similar
  --  method that adds a null terminator on the received string. String
  --  may be NULL, which is sent as "".
   function zstr_send (dest : System.Address; string : Interfaces.C.Strings.chars_ptr) return int  -- /homes/taft/_distrib/include/zstr.h:50
   with Import => True, 
        Convention => C, 
        External_Name => "zstr_send";

  --  Send a C string to a socket, as zstr_send(), with a MORE flag, so that
  --  you can send further strings in the same multi-part message.
   function zstr_sendm (dest : System.Address; string : Interfaces.C.Strings.chars_ptr) return int  -- /homes/taft/_distrib/include/zstr.h:55
   with Import => True, 
        Convention => C, 
        External_Name => "zstr_sendm";

  --  Send a formatted string to a socket. Note that you should NOT use
  --  user-supplied strings in the format (they may contain '%' which
  --  will create security holes).
  --  Send a formatted string to a socket, as for zstr_sendf(), with a
  --  MORE flag, so that you can send further strings in the same multi-part
  --  message.
   function zstr_sendfm (dest : System.Address; format : Interfaces.C.Strings.chars_ptr  -- , ...
      ) return int  -- /homes/taft/_distrib/include/zstr.h:67
   with Import => True, 
        Convention => C, 
        External_Name => "zstr_sendfm";

  --  Send a series of strings (until NULL) as multipart data
  --  Returns 0 if the strings could be sent OK, or -1 on error.
   function zstr_sendx (dest : System.Address; string : Interfaces.C.Strings.chars_ptr  -- , ...
      ) return int  -- /homes/taft/_distrib/include/zstr.h:72
   with Import => True, 
        Convention => C, 
        External_Name => "zstr_sendx";

  --  Free a provided string, and nullify the parent pointer. Safe to call on
  --  a null pointer.
   procedure zstr_free (string_p : System.Address)  -- /homes/taft/_distrib/include/zstr.h:77
   with Import => True, 
        Convention => C, 
        External_Name => "zstr_free";

  --  Self test of this class.
   procedure zstr_test (verbose : Extensions.bool)  -- /homes/taft/_distrib/include/zstr.h:81
   with Import => True, 
        Convention => C, 
        External_Name => "zstr_test";

  --  *** Draft method, for development use, may change without warning ***
  --  De-compress and receive C string from socket, received as a message
  --  with two frames: size of the uncompressed string, and the string itself.
  --  Caller must free returned string using zstr_free(). Returns NULL if the
  --  context is being terminated or the process was interrupted.
  --  Caller owns return value and must destroy it when done.
  --  *** Draft method, for development use, may change without warning ***
  --  Compress and send a C string to a socket, as a message with two frames:
  --  size of the uncompressed string, and the string itself. The string is
  --  sent without trailing null byte; to read this you can use
  --  zstr_recv_compress, or a similar method that de-compresses and adds a
  --  null terminator on the received string.
  --  *** Draft method, for development use, may change without warning ***
  --  Compress and send a C string to a socket, as zstr_send_compress(),
  --  with a MORE flag, so that you can send further strings in the same
  --  multi-part message.
  --  *** Draft method, for development use, may change without warning ***
  --  Accepts a void pointer and returns a fresh character string. If source
  --  is null, returns an empty string.
  --  Caller owns return value and must destroy it when done.
  --  @end
  --  DEPRECATED as poor style -- callers should use zloop or zpoller
  --  Receive C string from socket, if socket had input ready. Caller must
  --  free returned string using zstr_free. Returns NULL if there was no input
  --  waiting, or if the context was terminated. Use zctx_interrupted to exit
  --  any loop that relies on this method.
   function zstr_recv_nowait (source : System.Address) return Interfaces.C.Strings.chars_ptr  -- /homes/taft/_distrib/include/zstr.h:126
   with Import => True, 
        Convention => C, 
        External_Name => "zstr_recv_nowait";

  --  Compiler hints
   function zstr_sendf (dest : System.Address; format : Interfaces.C.Strings.chars_ptr  -- , ...
      ) return int  -- /homes/taft/_distrib/include/zstr.h:129
   with Import => True, 
        Convention => C, 
        External_Name => "zstr_sendf";

end zstr_h;
