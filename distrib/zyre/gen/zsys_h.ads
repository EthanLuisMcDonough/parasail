pragma Ada_2012;
pragma Style_Checks (Off);
pragma Warnings ("U");

with Interfaces.C; use Interfaces.C;
with System;
with Interfaces.C.Strings;
with stddef_h;
limited with czmq_library_h;
with Interfaces.C.Extensions;
with time_h;
with czmq_prelude_h;
with stdio_h;

package zsys_h is

   UDP_FRAME_MAX : constant := 255;  --  /homes/taft/_distrib/include/zsys.h:21

  --  =========================================================================
  --    zsys - system-level methods
  --    Copyright (c) the Contributors as noted in the AUTHORS file.
  --    This file is part of CZMQ, the high-level C binding for 0MQ:
  --    http://czmq.zeromq.org.
  --    This Source Code Form is subject to the terms of the Mozilla Public
  --    License, v. 2.0. If a copy of the MPL was not distributed with this
  --    file, You can obtain one at http://mozilla.org/MPL/2.0/.
  --    =========================================================================
  -- 

  --  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
  --  @warning Please edit the model at "api/zsys.api" to make changes.
  --  @interface
  --  This is a stable class, and may not change except for emergencies. It
  --  is provided in stable builds.
  --  This class has draft methods, which may change over time. They are not
  --  in stable releases, by default. Use --enable-drafts to enable.
  -- Callback for interrupt signal handler
   --  skipped function type zsys_handler_fn

  --  Initialize CZMQ zsys layer; this happens automatically when you create
  --  a socket or an actor; however this call lets you force initialization
  --  earlier, so e.g. logging is properly set-up before you start working.
  --  Not threadsafe, so call only from main thread. Safe to call multiple
  --  times. Returns global CZMQ context.
   function zsys_init return System.Address  -- /homes/taft/_distrib/include/zsys.h:40
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_init";

  --  Optionally shut down the CZMQ zsys layer; this normally happens automatically
  --  when the process exits; however this call lets you force a shutdown
  --  earlier, avoiding any potential problems with atexit() ordering, especially
  --  with Windows dlls.
   procedure zsys_shutdown  -- /homes/taft/_distrib/include/zsys.h:47
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_shutdown";

  --  Get a new ZMQ socket, automagically creating a ZMQ context if this is
  --  the first time. Caller is responsible for destroying the ZMQ socket
  --  before process exits, to avoid a ZMQ deadlock. Note: you should not use
  --  this method in CZMQ apps, use zsock_new() instead.
  --  *** This is for CZMQ internal use only and may change arbitrarily ***
   function zsys_socket
     (c_type : int;
      filename : Interfaces.C.Strings.chars_ptr;
      line_nbr : stddef_h.size_t) return System.Address  -- /homes/taft/_distrib/include/zsys.h:55
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_socket";

  --  Destroy/close a ZMQ socket. You should call this for every socket you
  --  create using zsys_socket().
  --  *** This is for CZMQ internal use only and may change arbitrarily ***
   function zsys_close
     (handle : System.Address;
      filename : Interfaces.C.Strings.chars_ptr;
      line_nbr : stddef_h.size_t) return int  -- /homes/taft/_distrib/include/zsys.h:61
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_close";

  --  Return ZMQ socket name for socket type
  --  *** This is for CZMQ internal use only and may change arbitrarily ***
   function zsys_sockname (socktype : int) return Interfaces.C.Strings.chars_ptr  -- /homes/taft/_distrib/include/zsys.h:66
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_sockname";

  --  Create a pipe, which consists of two PAIR sockets connected over inproc.
  --  The pipe is configured to use the zsys_pipehwm setting. Returns the
  --  frontend socket successful, NULL if failed.
   function zsys_create_pipe (backend_p : System.Address) return access czmq_library_h.zsock_t  -- /homes/taft/_distrib/include/zsys.h:72
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_create_pipe";

  --  Set interrupt handler; this saves the default handlers so that a
  --  zsys_handler_reset () can restore them. If you call this multiple times
  --  then the last handler will take affect. If handler_fn is NULL, disables
  --  default SIGINT/SIGTERM handling in CZMQ.
   procedure zsys_handler_set (handler_fn : access procedure (arg1 : int))  -- /homes/taft/_distrib/include/zsys.h:79
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_handler_set";

  --  Reset interrupt handler, call this at exit if needed
   procedure zsys_handler_reset  -- /homes/taft/_distrib/include/zsys.h:83
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_handler_reset";

  --  Set default interrupt handler, so Ctrl-C or SIGTERM will set
  --  zsys_interrupted. Idempotent; safe to call multiple times.
  --  Can be suppressed by ZSYS_SIGHANDLER=false
  --  *** This is for CZMQ internal use only and may change arbitrarily ***
   procedure zsys_catch_interrupts  -- /homes/taft/_distrib/include/zsys.h:90
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_catch_interrupts";

  --  Return 1 if file exists, else zero
   function zsys_file_exists (filename : Interfaces.C.Strings.chars_ptr) return Extensions.bool  -- /homes/taft/_distrib/include/zsys.h:94
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_file_exists";

  --  Return file modification time. Returns 0 if the file does not exist.
   function zsys_file_modified (filename : Interfaces.C.Strings.chars_ptr) return time_h.time_t  -- /homes/taft/_distrib/include/zsys.h:98
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_file_modified";

  --  Return file mode; provides at least support for the POSIX S_ISREG(m)
  --  and S_ISDIR(m) macros and the S_IRUSR and S_IWUSR bits, on all boxes.
  --  Returns a mode_t cast to int, or -1 in case of error.
   function zsys_file_mode (filename : Interfaces.C.Strings.chars_ptr) return int  -- /homes/taft/_distrib/include/zsys.h:104
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_file_mode";

  --  Delete file. Does not complain if the file is absent
   function zsys_file_delete (filename : Interfaces.C.Strings.chars_ptr) return int  -- /homes/taft/_distrib/include/zsys.h:108
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_file_delete";

  --  Check if file is 'stable'
   function zsys_file_stable (filename : Interfaces.C.Strings.chars_ptr) return Extensions.bool  -- /homes/taft/_distrib/include/zsys.h:112
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_file_stable";

  --  Create a file path if it doesn't exist. The file path is treated as
  --  printf format.
   function zsys_dir_create (pathname : Interfaces.C.Strings.chars_ptr  -- , ...
      ) return int  -- /homes/taft/_distrib/include/zsys.h:117
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_dir_create";

  --  Remove a file path if empty; the pathname is treated as printf format.
   function zsys_dir_delete (pathname : Interfaces.C.Strings.chars_ptr  -- , ...
      ) return int  -- /homes/taft/_distrib/include/zsys.h:121
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_dir_delete";

  --  Move to a specified working directory. Returns 0 if OK, -1 if this failed.
   function zsys_dir_change (pathname : Interfaces.C.Strings.chars_ptr) return int  -- /homes/taft/_distrib/include/zsys.h:125
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_dir_change";

  --  Set private file creation mode; all files created from here will be
  --  readable/writable by the owner only.
   procedure zsys_file_mode_private  -- /homes/taft/_distrib/include/zsys.h:130
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_file_mode_private";

  --  Reset default file creation mode; all files created from here will use
  --  process file mode defaults.
   procedure zsys_file_mode_default  -- /homes/taft/_distrib/include/zsys.h:135
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_file_mode_default";

  --  Return the CZMQ version for run-time API detection; returns version
  --  number into provided fields, providing reference isn't null in each case.
   procedure zsys_version
     (major : access int;
      minor : access int;
      patch : access int)  -- /homes/taft/_distrib/include/zsys.h:140
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_version";

  --  Format a string using printf formatting, returning a freshly allocated
  --  buffer. If there was insufficient memory, returns NULL. Free the returned
  --  string using zstr_free().
   function zsys_sprintf (format : Interfaces.C.Strings.chars_ptr  -- , ...
      ) return Interfaces.C.Strings.chars_ptr  -- /homes/taft/_distrib/include/zsys.h:146
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_sprintf";

  --  Format a string with a va_list argument, returning a freshly allocated
  --  buffer. If there was insufficient memory, returns NULL. Free the returned
  --  string using zstr_free().
   function zsys_vprintf (format : Interfaces.C.Strings.chars_ptr; argptr : access System.Address) return Interfaces.C.Strings.chars_ptr  -- /homes/taft/_distrib/include/zsys.h:152
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_vprintf";

  --  Create UDP beacon socket; if the routable option is true, uses
  --  multicast (not yet implemented), else uses broadcast. This method
  --  and related ones might _eventually_ be moved to a zudp class.
  --  *** This is for CZMQ internal use only and may change arbitrarily ***
   function zsys_udp_new (routable : Extensions.bool) return czmq_prelude_h.SOCKET  -- /homes/taft/_distrib/include/zsys.h:159
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_udp_new";

  --  Close a UDP socket
  --  *** This is for CZMQ internal use only and may change arbitrarily ***
   function zsys_udp_close (handle : czmq_prelude_h.SOCKET) return int  -- /homes/taft/_distrib/include/zsys.h:164
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_udp_close";

  --  Send zframe to UDP socket, return -1 if sending failed due to
  --  interface having disappeared (happens easily with WiFi)
  --  *** This is for CZMQ internal use only and may change arbitrarily ***
   function zsys_udp_send
     (udpsock : czmq_prelude_h.SOCKET;
      frame : access czmq_library_h.zframe_t;
      address : access czmq_prelude_h.inaddr_t;
      addrlen : int) return int  -- /homes/taft/_distrib/include/zsys.h:170
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_udp_send";

  --  Receive zframe from UDP socket, and set address of peer that sent it
  --  The peername must be a char [INET_ADDRSTRLEN] array if IPv6 is disabled or
  --  NI_MAXHOST if it's enabled. Returns NULL when failing to get peer address.
  --  *** This is for CZMQ internal use only and may change arbitrarily ***
   function zsys_udp_recv
     (udpsock : czmq_prelude_h.SOCKET;
      peername : Interfaces.C.Strings.chars_ptr;
      peerlen : int) return access czmq_library_h.zframe_t  -- /homes/taft/_distrib/include/zsys.h:177
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_udp_recv";

  --  Handle an I/O error on some socket operation; will report and die on
  --  fatal errors, and continue silently on "try again" errors.
  --  *** This is for CZMQ internal use only and may change arbitrarily ***
   procedure zsys_socket_error (reason : Interfaces.C.Strings.chars_ptr)  -- /homes/taft/_distrib/include/zsys.h:183
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_socket_error";

  --  Return current host name, for use in public tcp:// endpoints. Caller gets
  --  a freshly allocated string, should free it using zstr_free(). If the host
  --  name is not resolvable, returns NULL.
   function zsys_hostname return Interfaces.C.Strings.chars_ptr  -- /homes/taft/_distrib/include/zsys.h:189
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_hostname";

  --  Move the current process into the background. The precise effect depends
  --  on the operating system. On POSIX boxes, moves to a specified working
  --  directory (if specified), closes all file handles, reopens stdin, stdout,
  --  and stderr to the null device, and sets the process to ignore SIGHUP. On
  --  Windows, does nothing. Returns 0 if OK, -1 if there was an error.
   function zsys_daemonize (workdir : Interfaces.C.Strings.chars_ptr) return int  -- /homes/taft/_distrib/include/zsys.h:197
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_daemonize";

  --  Drop the process ID into the lockfile, with exclusive lock, and switch
  --  the process to the specified group and/or user. Any of the arguments
  --  may be null, indicating a no-op. Returns 0 on success, -1 on failure.
  --  Note if you combine this with zsys_daemonize, run after, not before
  --  that method, or the lockfile will hold the wrong process ID.
   function zsys_run_as
     (lockfile : Interfaces.C.Strings.chars_ptr;
      group : Interfaces.C.Strings.chars_ptr;
      user : Interfaces.C.Strings.chars_ptr) return int  -- /homes/taft/_distrib/include/zsys.h:205
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_run_as";

  --  Returns true if the underlying libzmq supports CURVE security.
  --  Uses a heuristic probe according to the version of libzmq being used.
   function zsys_has_curve return Extensions.bool  -- /homes/taft/_distrib/include/zsys.h:210
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_has_curve";

  --  Configure the number of I/O threads that ZeroMQ will use. A good
  --  rule of thumb is one thread per gigabit of traffic in or out. The
  --  default is 1, sufficient for most applications. If the environment
  --  variable ZSYS_IO_THREADS is defined, that provides the default.
  --  Note that this method is valid only before any socket is created.
   procedure zsys_set_io_threads (io_threads : stddef_h.size_t)  -- /homes/taft/_distrib/include/zsys.h:218
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_set_io_threads";

  --  Configure the scheduling policy of the ZMQ context thread pool.
  --  Not available on Windows. See the sched_setscheduler man page or sched.h
  --  for more information. If the environment variable ZSYS_THREAD_SCHED_POLICY
  --  is defined, that provides the default.
  --  Note that this method is valid only before any socket is created.
   procedure zsys_set_thread_sched_policy (policy : int)  -- /homes/taft/_distrib/include/zsys.h:226
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_set_thread_sched_policy";

  --  Configure the scheduling priority of the ZMQ context thread pool.
  --  Not available on Windows. See the sched_setscheduler man page or sched.h
  --  for more information. If the environment variable ZSYS_THREAD_PRIORITY is
  --  defined, that provides the default.
  --  Note that this method is valid only before any socket is created.
   procedure zsys_set_thread_priority (priority : int)  -- /homes/taft/_distrib/include/zsys.h:234
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_set_thread_priority";

  --  Configure the numeric prefix to each thread created for the internal
  --  context's thread pool. This option is only supported on Linux.
  --  If the environment variable ZSYS_THREAD_NAME_PREFIX is defined, that
  --  provides the default.
  --  Note that this method is valid only before any socket is created.
   procedure zsys_set_thread_name_prefix (prefix : int)  -- /homes/taft/_distrib/include/zsys.h:242
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_set_thread_name_prefix";

  --  Return thread name prefix.
   function zsys_thread_name_prefix return int  -- /homes/taft/_distrib/include/zsys.h:246
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_thread_name_prefix";

  --  Adds a specific CPU to the affinity list of the ZMQ context thread pool.
  --  This option is only supported on Linux.
  --  Note that this method is valid only before any socket is created.
   procedure zsys_thread_affinity_cpu_add (cpu : int)  -- /homes/taft/_distrib/include/zsys.h:252
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_thread_affinity_cpu_add";

  --  Removes a specific CPU to the affinity list of the ZMQ context thread pool.
  --  This option is only supported on Linux.
  --  Note that this method is valid only before any socket is created.
   procedure zsys_thread_affinity_cpu_remove (cpu : int)  -- /homes/taft/_distrib/include/zsys.h:258
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_thread_affinity_cpu_remove";

  --  Configure the number of sockets that ZeroMQ will allow. The default
  --  is 1024. The actual limit depends on the system, and you can query it
  --  by using zsys_socket_limit (). A value of zero means "maximum".
  --  Note that this method is valid only before any socket is created.
   procedure zsys_set_max_sockets (max_sockets : stddef_h.size_t)  -- /homes/taft/_distrib/include/zsys.h:265
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_set_max_sockets";

  --  Return maximum number of ZeroMQ sockets that the system will support.
   function zsys_socket_limit return stddef_h.size_t  -- /homes/taft/_distrib/include/zsys.h:269
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_socket_limit";

  --  Configure the maximum allowed size of a message sent.
  --  The default is INT_MAX.
   procedure zsys_set_max_msgsz (max_msgsz : int)  -- /homes/taft/_distrib/include/zsys.h:274
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_set_max_msgsz";

  --  Return maximum message size.
   function zsys_max_msgsz return int  -- /homes/taft/_distrib/include/zsys.h:278
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_max_msgsz";

  --  Configure the default linger timeout in msecs for new zsock instances.
  --  You can also set this separately on each zsock_t instance. The default
  --  linger time is zero, i.e. any pending messages will be dropped. If the
  --  environment variable ZSYS_LINGER is defined, that provides the default.
  --  Note that process exit will typically be delayed by the linger time.
   procedure zsys_set_linger (linger : stddef_h.size_t)  -- /homes/taft/_distrib/include/zsys.h:286
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_set_linger";

  --  Configure the default outgoing pipe limit (HWM) for new zsock instances.
  --  You can also set this separately on each zsock_t instance. The default
  --  HWM is 1,000, on all versions of ZeroMQ. If the environment variable
  --  ZSYS_SNDHWM is defined, that provides the default. Note that a value of
  --  zero means no limit, i.e. infinite memory consumption.
   procedure zsys_set_sndhwm (sndhwm : stddef_h.size_t)  -- /homes/taft/_distrib/include/zsys.h:294
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_set_sndhwm";

  --  Configure the default incoming pipe limit (HWM) for new zsock instances.
  --  You can also set this separately on each zsock_t instance. The default
  --  HWM is 1,000, on all versions of ZeroMQ. If the environment variable
  --  ZSYS_RCVHWM is defined, that provides the default. Note that a value of
  --  zero means no limit, i.e. infinite memory consumption.
   procedure zsys_set_rcvhwm (rcvhwm : stddef_h.size_t)  -- /homes/taft/_distrib/include/zsys.h:302
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_set_rcvhwm";

  --  Configure the default HWM for zactor internal pipes; this is set on both
  --  ends of the pipe, for outgoing messages only (sndhwm). The default HWM is
  --  1,000, on all versions of ZeroMQ. If the environment var ZSYS_ACTORHWM is
  --  defined, that provides the default. Note that a value of zero means no
  --  limit, i.e. infinite memory consumption.
   procedure zsys_set_pipehwm (pipehwm : stddef_h.size_t)  -- /homes/taft/_distrib/include/zsys.h:310
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_set_pipehwm";

  --  Return the HWM for zactor internal pipes.
   function zsys_pipehwm return stddef_h.size_t  -- /homes/taft/_distrib/include/zsys.h:314
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_pipehwm";

  --  Configure use of IPv6 for new zsock instances. By default sockets accept
  --  and make only IPv4 connections. When you enable IPv6, sockets will accept
  --  and connect to both IPv4 and IPv6 peers. You can override the setting on
  --  each zsock_t instance. The default is IPv4 only (ipv6 set to 0). If the
  --  environment variable ZSYS_IPV6 is defined (as 1 or 0), this provides the
  --  default. Note: has no effect on ZMQ v2.
   procedure zsys_set_ipv6 (ipv6 : int)  -- /homes/taft/_distrib/include/zsys.h:323
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_set_ipv6";

  --  Return use of IPv6 for zsock instances.
   function zsys_ipv6 return int  -- /homes/taft/_distrib/include/zsys.h:327
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_ipv6";

  --  Set network interface name to use for broadcasts, particularly zbeacon.
  --  This lets the interface be configured for test environments where required.
  --  For example, on Mac OS X, zbeacon cannot bind to 255.255.255.255 which is
  --  the default when there is no specified interface. If the environment
  --  variable ZSYS_INTERFACE is set, use that as the default interface name.
  --  Setting the interface to "*" means "use all available interfaces".
   procedure zsys_set_interface (value : Interfaces.C.Strings.chars_ptr)  -- /homes/taft/_distrib/include/zsys.h:336
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_set_interface";

  --  Return network interface to use for broadcasts, or "" if none was set.
   function zsys_interface return Interfaces.C.Strings.chars_ptr  -- /homes/taft/_distrib/include/zsys.h:340
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_interface";

  --  Set IPv6 address to use zbeacon socket, particularly for receiving zbeacon.
  --  This needs to be set IPv6 is enabled as IPv6 can have multiple addresses
  --  on a given interface. If the environment variable ZSYS_IPV6_ADDRESS is set,
  --  use that as the default IPv6 address.
   procedure zsys_set_ipv6_address (value : Interfaces.C.Strings.chars_ptr)  -- /homes/taft/_distrib/include/zsys.h:347
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_set_ipv6_address";

  --  Return IPv6 address to use for zbeacon reception, or "" if none was set.
   function zsys_ipv6_address return Interfaces.C.Strings.chars_ptr  -- /homes/taft/_distrib/include/zsys.h:351
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_ipv6_address";

  --  Set IPv6 milticast address to use for sending zbeacon messages. This needs
  --  to be set if IPv6 is enabled. If the environment variable
  --  ZSYS_IPV6_MCAST_ADDRESS is set, use that as the default IPv6 multicast
  --  address.
   procedure zsys_set_ipv6_mcast_address (value : Interfaces.C.Strings.chars_ptr)  -- /homes/taft/_distrib/include/zsys.h:358
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_set_ipv6_mcast_address";

  --  Return IPv6 multicast address to use for sending zbeacon, or "" if none was
  --  set.
   function zsys_ipv6_mcast_address return Interfaces.C.Strings.chars_ptr  -- /homes/taft/_distrib/include/zsys.h:363
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_ipv6_mcast_address";

  --  Configure the automatic use of pre-allocated FDs when creating new sockets.
  --  If 0 (default), nothing will happen. Else, when a new socket is bound, the
  --  system API will be used to check if an existing pre-allocated FD with a
  --  matching port (if TCP) or path (if IPC) exists, and if it does it will be
  --  set via the ZMQ_USE_FD socket option so that the library will use it
  --  instead of creating a new socket.
   procedure zsys_set_auto_use_fd (auto_use_fd : int)  -- /homes/taft/_distrib/include/zsys.h:372
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_set_auto_use_fd";

  --  Return use of automatic pre-allocated FDs for zsock instances.
   function zsys_auto_use_fd return int  -- /homes/taft/_distrib/include/zsys.h:376
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_auto_use_fd";

  --  Set log identity, which is a string that prefixes all log messages sent
  --  by this process. The log identity defaults to the environment variable
  --  ZSYS_LOGIDENT, if that is set.
   procedure zsys_set_logident (value : Interfaces.C.Strings.chars_ptr)  -- /homes/taft/_distrib/include/zsys.h:382
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_set_logident";

  --  Set stream to receive log traffic. By default, log traffic is sent to
  --  stdout. If you set the stream to NULL, no stream will receive the log
  --  traffic (it may still be sent to the system facility).
   procedure zsys_set_logstream (stream : access stdio_h.FILE)  -- /homes/taft/_distrib/include/zsys.h:388
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_set_logstream";

  --  Sends log output to a PUB socket bound to the specified endpoint. To
  --  collect such log output, create a SUB socket, subscribe to the traffic
  --  you care about, and connect to the endpoint. Log traffic is sent as a
  --  single string frame, in the same format as when sent to stdout. The
  --  log system supports a single sender; multiple calls to this method will
  --  bind the same sender to multiple endpoints. To disable the sender, call
  --  this method with a null argument.
   procedure zsys_set_logsender (endpoint : Interfaces.C.Strings.chars_ptr)  -- /homes/taft/_distrib/include/zsys.h:398
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_set_logsender";

  --  Enable or disable logging to the system facility (syslog on POSIX boxes,
  --  event log on Windows). By default this is disabled.
   procedure zsys_set_logsystem (logsystem : Extensions.bool)  -- /homes/taft/_distrib/include/zsys.h:403
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_set_logsystem";

  --  Log error condition - highest priority
   procedure zsys_error (format : Interfaces.C.Strings.chars_ptr  -- , ...
      )  -- /homes/taft/_distrib/include/zsys.h:407
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_error";

  --  Log warning condition - high priority
   procedure zsys_warning (format : Interfaces.C.Strings.chars_ptr  -- , ...
      )  -- /homes/taft/_distrib/include/zsys.h:411
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_warning";

  --  Log normal, but significant, condition - normal priority
   procedure zsys_notice (format : Interfaces.C.Strings.chars_ptr  -- , ...
      )  -- /homes/taft/_distrib/include/zsys.h:415
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_notice";

  --  Log informational message - low priority
   procedure zsys_info (format : Interfaces.C.Strings.chars_ptr  -- , ...
      )  -- /homes/taft/_distrib/include/zsys.h:419
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_info";

  --  Log debug-level message - lowest priority
   procedure zsys_debug (format : Interfaces.C.Strings.chars_ptr  -- , ...
      )  -- /homes/taft/_distrib/include/zsys.h:423
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_debug";

  --  Self test of this class.
   procedure zsys_test (verbose : Extensions.bool)  -- /homes/taft/_distrib/include/zsys.h:427
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_test";

  --  *** Draft method, for development use, may change without warning ***
  --  Check if default interrupt handler of Ctrl-C or SIGTERM was called.
  --  Does not work if ZSYS_SIGHANDLER is false and code does not call
  --  set interrupted on signal.
  --  *** Draft method, for development use, may change without warning ***
  --  Set interrupted flag. This is done by default signal handler, however
  --  this can be handy for language bindings or cases without default
  --  signal handler.
  --  *** Draft method, for development use, may change without warning ***
  --  Format a string using printf formatting, returning a freshly allocated
  --  buffer. If there was insufficient memory, returns NULL. Free the returned
  --  string using zstr_free(). The hinted version allows to optimize by using
  --  a larger starting buffer size (known to/assumed by the developer) and so
  --  avoid reallocations.
  --  *** Draft method, for development use, may change without warning ***
  --  Configure whether to use zero copy strategy in libzmq. If the environment
  --  variable ZSYS_ZERO_COPY_RECV is defined, that provides the default.
  --  Otherwise the default is 1.
  --  *** Draft method, for development use, may change without warning ***
  --  Return ZMQ_ZERO_COPY_RECV option.
  --  *** Draft method, for development use, may change without warning ***
  --  Configure the threshold value of filesystem object age per st_mtime
  --  that should elapse until we consider that object "stable" at the
  --  current zclock_time() moment.
  --  The default is S_DEFAULT_ZSYS_FILE_STABLE_AGE_MSEC defined in zsys.c
  --  which generally depends on host OS, with fallback value of 5000.
  --  *** Draft method, for development use, may change without warning ***
  --  Return current threshold value of file stable age in msec.
  --  This can be used in code that chooses to wait for this timeout
  --  before testing if a filesystem object is "stable" or not.
  --  *** Draft method, for development use, may change without warning ***
  --  Test if ipv6 is available on the system. Return true if available.
  --  The only way to reliably check is to actually open a socket and
  --  try to bind it. (ported from libzmq)
  --  *** Draft method, for development use, may change without warning ***
  --  Set IPv4 multicast address to use for sending zbeacon messages. By default
  --  IPv4 multicast is NOT used. If the environment variable
  --  ZSYS_IPV4_MCAST_ADDRESS is set, use that as the default IPv4 multicast
  --  address. Calling this function or setting ZSYS_IPV4_MCAST_ADDRESS
  --  will enable IPv4 zbeacon messages.
  --  *** Draft method, for development use, may change without warning ***
  --  Return IPv4 multicast address to use for sending zbeacon, or NULL if none was
  --  set.
  --  *** Draft method, for development use, may change without warning ***
  --  Set multicast TTL default is 1
  --  *** Draft method, for development use, may change without warning ***
  --  Get multicast TTL
  --  *** Draft method, for development use, may change without warning ***
  --  Print formatted string. Format is specified by variable names
  --  in Python-like format style
  --  "%(KEY)s=%(VALUE)s", KEY=key, VALUE=value
  --  become
  --  "key=value"
  --  Returns freshly allocated string or NULL in a case of error.
  --  Not enough memory, invalid format specifier, name not in args
  --  Caller owns return value and must destroy it when done.
  --  *** Draft method, for development use, may change without warning ***
  --  Return error string for given format/args combination.
  --  Caller owns return value and must destroy it when done.
  --  *** Draft method, for development use, may change without warning ***
  --  Print formatted string. Format is specified by variable names
  --  in Python-like format style
  --  "%(KEY)s=%(VALUE)s", KEY=key, VALUE=value
  --  become
  --  "key=value"
  --  Returns freshly allocated string or NULL in a case of error.
  --  Not enough memory, invalid format specifier, name not in args
  --  Caller owns return value and must destroy it when done.
  --  *** Draft method, for development use, may change without warning ***
  --  Return error string for given format/args combination.
  --  Caller owns return value and must destroy it when done.
  --  @end
  --  Return size of file, or -1 if not found
   function zsys_file_size (filename : Interfaces.C.Strings.chars_ptr) return stdio_h.ssize_t  -- /homes/taft/_distrib/include/zsys.h:558
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_file_size";

  --  Global signal indicator, TRUE when user presses Ctrl-C or the process
  --  gets a SIGTERM signal.
   zsys_interrupted : aliased int  -- /homes/taft/_distrib/include/zsys.h:562
   with Import => True, 
        Convention => C, 
        External_Name => "zsys_interrupted";

  --  Deprecated name for this variable
   zctx_interrupted : aliased int  -- /homes/taft/_distrib/include/zsys.h:564
   with Import => True, 
        Convention => C, 
        External_Name => "zctx_interrupted";

end zsys_h;
