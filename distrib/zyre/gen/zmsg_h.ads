pragma Ada_2012;
pragma Style_Checks (Off);
pragma Warnings ("U");

with Interfaces.C; use Interfaces.C;
with czmq_library_h;
with System;
with stdio_h;
with czmq_prelude_h;
with stddef_h;
with Interfaces.C.Strings;
with Interfaces.C.Extensions;

package zmsg_h is

   --  arg-macro: procedure zmsg_dump (s)
   --    zmsg_print(s)
   --  arg-macro: procedure zmsg_dump_to_stream (s, F)
   --    zmsg_fprint(s,F)
  --  =========================================================================
  --    zmsg - working with multipart messages
  --    Copyright (c) the Contributors as noted in the AUTHORS file.
  --    This file is part of CZMQ, the high-level C binding for 0MQ:
  --    http://czmq.zeromq.org.
  --    This Source Code Form is subject to the terms of the Mozilla Public
  --    License, v. 2.0. If a copy of the MPL was not distributed with this
  --    file, You can obtain one at http://mozilla.org/MPL/2.0/.
  --    =========================================================================
  -- 

  --  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
  --  @warning Please edit the model at "api/zmsg.api" to make changes.
  --  @interface
  --  This is a stable class, and may not change except for emergencies. It
  --  is provided in stable builds.
  --  This class has draft methods, which may change over time. They are not
  --  in stable releases, by default. Use --enable-drafts to enable.
  --  Create a new empty message object
   function zmsg_new return access czmq_library_h.zmsg_t  -- /homes/taft/_distrib/include/zmsg.h:30
   with Import => True, 
        Convention => C, 
        External_Name => "zmsg_new";

  --  Receive message from socket, returns zmsg_t object or NULL if the recv
  --  was interrupted. Does a blocking recv. If you want to not block then use
  --  the zloop class or zmsg_recv_nowait or zmq_poll to check for socket input
  --  before receiving.
   function zmsg_recv (source : System.Address) return access czmq_library_h.zmsg_t  -- /homes/taft/_distrib/include/zmsg.h:37
   with Import => True, 
        Convention => C, 
        External_Name => "zmsg_recv";

  --  Load/append an open file into new message, return the message.
  --  Returns NULL if the message could not be loaded.
   function zmsg_load (the_file : access stdio_h.FILE) return access czmq_library_h.zmsg_t  -- /homes/taft/_distrib/include/zmsg.h:42
   with Import => True, 
        Convention => C, 
        External_Name => "zmsg_load";

  --  Decodes a serialized message frame created by zmsg_encode () and returns
  --  a new zmsg_t object. Returns NULL if the frame was badly formatted or
  --  there was insufficient memory to work.
   function zmsg_decode (frame : access czmq_library_h.zframe_t) return access czmq_library_h.zmsg_t  -- /homes/taft/_distrib/include/zmsg.h:48
   with Import => True, 
        Convention => C, 
        External_Name => "zmsg_decode";

  --  Generate a signal message encoding the given status. A signal is a short
  --  message carrying a 1-byte success/failure code (by convention, 0 means
  --  OK). Signals are encoded to be distinguishable from "normal" messages.
   function zmsg_new_signal (status : czmq_prelude_h.byte) return access czmq_library_h.zmsg_t  -- /homes/taft/_distrib/include/zmsg.h:54
   with Import => True, 
        Convention => C, 
        External_Name => "zmsg_new_signal";

  --  Destroy a message object and all frames it contains
   procedure zmsg_destroy (self_p : System.Address)  -- /homes/taft/_distrib/include/zmsg.h:58
   with Import => True, 
        Convention => C, 
        External_Name => "zmsg_destroy";

  --  Send message to destination socket, and destroy the message after sending
  --  it successfully. If the message has no frames, sends nothing but destroys
  --  the message anyhow. Nullifies the caller's reference to the message (as
  --  it is a destructor).
   function zmsg_send (self_p : System.Address; dest : System.Address) return int  -- /homes/taft/_distrib/include/zmsg.h:65
   with Import => True, 
        Convention => C, 
        External_Name => "zmsg_send";

  --  Send message to destination socket as part of a multipart sequence, and
  --  destroy the message after sending it successfully. Note that after a
  --  zmsg_sendm, you must call zmsg_send or another method that sends a final
  --  message part. If the message has no frames, sends nothing but destroys
  --  the message anyhow. Nullifies the caller's reference to the message (as
  --  it is a destructor).
   function zmsg_sendm (self_p : System.Address; dest : System.Address) return int  -- /homes/taft/_distrib/include/zmsg.h:74
   with Import => True, 
        Convention => C, 
        External_Name => "zmsg_sendm";

  --  Return size of message, i.e. number of frames (0 or more).
   function zmsg_size (self : access czmq_library_h.zmsg_t) return stddef_h.size_t  -- /homes/taft/_distrib/include/zmsg.h:78
   with Import => True, 
        Convention => C, 
        External_Name => "zmsg_size";

  --  Return total size of all frames in message.
   function zmsg_content_size (self : access czmq_library_h.zmsg_t) return stddef_h.size_t  -- /homes/taft/_distrib/include/zmsg.h:82
   with Import => True, 
        Convention => C, 
        External_Name => "zmsg_content_size";

  --  Push frame to the front of the message, i.e. before all other frames.
  --  Message takes ownership of frame, will destroy it when message is sent.
  --  Returns 0 on success, -1 on error. Deprecates zmsg_push, which did not
  --  nullify the caller's frame reference.
   function zmsg_prepend (self : access czmq_library_h.zmsg_t; frame_p : System.Address) return int  -- /homes/taft/_distrib/include/zmsg.h:89
   with Import => True, 
        Convention => C, 
        External_Name => "zmsg_prepend";

  --  Add frame to the end of the message, i.e. after all other frames.
  --  Message takes ownership of frame, will destroy it when message is sent.
  --  Returns 0 on success. Deprecates zmsg_add, which did not nullify the
  --  caller's frame reference.
   function zmsg_append (self : access czmq_library_h.zmsg_t; frame_p : System.Address) return int  -- /homes/taft/_distrib/include/zmsg.h:96
   with Import => True, 
        Convention => C, 
        External_Name => "zmsg_append";

  --  Remove first frame from message, if any. Returns frame, or NULL.
  --  Caller owns return value and must destroy it when done.
   function zmsg_pop (self : access czmq_library_h.zmsg_t) return access czmq_library_h.zframe_t  -- /homes/taft/_distrib/include/zmsg.h:101
   with Import => True, 
        Convention => C, 
        External_Name => "zmsg_pop";

  --  Push block of memory to front of message, as a new frame.
  --  Returns 0 on success, -1 on error.
   function zmsg_pushmem
     (self : access czmq_library_h.zmsg_t;
      data : System.Address;
      size : stddef_h.size_t) return int  -- /homes/taft/_distrib/include/zmsg.h:106
   with Import => True, 
        Convention => C, 
        External_Name => "zmsg_pushmem";

  --  Add block of memory to the end of the message, as a new frame.
  --  Returns 0 on success, -1 on error.
   function zmsg_addmem
     (self : access czmq_library_h.zmsg_t;
      data : System.Address;
      size : stddef_h.size_t) return int  -- /homes/taft/_distrib/include/zmsg.h:111
   with Import => True, 
        Convention => C, 
        External_Name => "zmsg_addmem";

  --  Push string as new frame to front of message.
  --  Returns 0 on success, -1 on error.
   function zmsg_pushstr (self : access czmq_library_h.zmsg_t; string : Interfaces.C.Strings.chars_ptr) return int  -- /homes/taft/_distrib/include/zmsg.h:116
   with Import => True, 
        Convention => C, 
        External_Name => "zmsg_pushstr";

  --  Push string as new frame to end of message.
  --  Returns 0 on success, -1 on error.
   function zmsg_addstr (self : access czmq_library_h.zmsg_t; string : Interfaces.C.Strings.chars_ptr) return int  -- /homes/taft/_distrib/include/zmsg.h:121
   with Import => True, 
        Convention => C, 
        External_Name => "zmsg_addstr";

  --  Push formatted string as new frame to front of message.
  --  Returns 0 on success, -1 on error.
  --  Push formatted string as new frame to end of message.
  --  Returns 0 on success, -1 on error.
  --  Pop frame off front of message, return as fresh string. If there were
  --  no more frames in the message, returns NULL.
  --  Caller owns return value and must destroy it when done.
   function zmsg_popstr (self : access czmq_library_h.zmsg_t) return Interfaces.C.Strings.chars_ptr  -- /homes/taft/_distrib/include/zmsg.h:137
   with Import => True, 
        Convention => C, 
        External_Name => "zmsg_popstr";

  --  Push encoded message as a new frame. Message takes ownership of
  --  submessage, so the original is destroyed in this call. Returns 0 on
  --  success, -1 on error.
   function zmsg_addmsg (self : access czmq_library_h.zmsg_t; msg_p : System.Address) return int  -- /homes/taft/_distrib/include/zmsg.h:143
   with Import => True, 
        Convention => C, 
        External_Name => "zmsg_addmsg";

  --  Remove first submessage from message, if any. Returns zmsg_t, or NULL if
  --  decoding was not successful.
  --  Caller owns return value and must destroy it when done.
   function zmsg_popmsg (self : access czmq_library_h.zmsg_t) return access czmq_library_h.zmsg_t  -- /homes/taft/_distrib/include/zmsg.h:149
   with Import => True, 
        Convention => C, 
        External_Name => "zmsg_popmsg";

  --  Remove specified frame from list, if present. Does not destroy frame.
   procedure zmsg_remove (self : access czmq_library_h.zmsg_t; frame : access czmq_library_h.zframe_t)  -- /homes/taft/_distrib/include/zmsg.h:153
   with Import => True, 
        Convention => C, 
        External_Name => "zmsg_remove";

  --  Set cursor to first frame in message. Returns frame, or NULL, if the
  --  message is empty. Use this to navigate the frames as a list.
   function zmsg_first (self : access czmq_library_h.zmsg_t) return access czmq_library_h.zframe_t  -- /homes/taft/_distrib/include/zmsg.h:158
   with Import => True, 
        Convention => C, 
        External_Name => "zmsg_first";

  --  Return the next frame. If there are no more frames, returns NULL. To move
  --  to the first frame call zmsg_first(). Advances the cursor.
   function zmsg_next (self : access czmq_library_h.zmsg_t) return access czmq_library_h.zframe_t  -- /homes/taft/_distrib/include/zmsg.h:163
   with Import => True, 
        Convention => C, 
        External_Name => "zmsg_next";

  --  Return the last frame. If there are no frames, returns NULL.
   function zmsg_last (self : access czmq_library_h.zmsg_t) return access czmq_library_h.zframe_t  -- /homes/taft/_distrib/include/zmsg.h:167
   with Import => True, 
        Convention => C, 
        External_Name => "zmsg_last";

  --  Save message to an open file, return 0 if OK, else -1. The message is
  --  saved as a series of frames, each with length and data. Note that the
  --  file is NOT guaranteed to be portable between operating systems, not
  --  versions of CZMQ. The file format is at present undocumented and liable
  --  to arbitrary change.
   function zmsg_save (self : access czmq_library_h.zmsg_t; the_file : access stdio_h.FILE) return int  -- /homes/taft/_distrib/include/zmsg.h:175
   with Import => True, 
        Convention => C, 
        External_Name => "zmsg_save";

  --  Serialize multipart message to a single message frame. Use this method
  --  to send structured messages across transports that do not support
  --  multipart data. Allocates and returns a new frame containing the
  --  serialized message. To decode a serialized message frame, use
  --  zmsg_decode ().
  --  Caller owns return value and must destroy it when done.
   function zmsg_encode (self : access czmq_library_h.zmsg_t) return access czmq_library_h.zframe_t  -- /homes/taft/_distrib/include/zmsg.h:184
   with Import => True, 
        Convention => C, 
        External_Name => "zmsg_encode";

  --  Create copy of message, as new message object. Returns a fresh zmsg_t
  --  object. If message is null, or memory was exhausted, returns null.
  --  Caller owns return value and must destroy it when done.
   function zmsg_dup (self : access czmq_library_h.zmsg_t) return access czmq_library_h.zmsg_t  -- /homes/taft/_distrib/include/zmsg.h:190
   with Import => True, 
        Convention => C, 
        External_Name => "zmsg_dup";

  --  Send message to zsys log sink (may be stdout, or system facility as
  --  configured by zsys_set_logstream).
  --  Long messages are truncated.
   procedure zmsg_print (self : access czmq_library_h.zmsg_t)  -- /homes/taft/_distrib/include/zmsg.h:196
   with Import => True, 
        Convention => C, 
        External_Name => "zmsg_print";

  --  Return true if the two messages have the same number of frames and each
  --  frame in the first message is identical to the corresponding frame in the
  --  other message. As with zframe_eq, return false if either message is NULL.
   function zmsg_eq (self : access czmq_library_h.zmsg_t; other : access czmq_library_h.zmsg_t) return Extensions.bool  -- /homes/taft/_distrib/include/zmsg.h:202
   with Import => True, 
        Convention => C, 
        External_Name => "zmsg_eq";

  --  Return signal value, 0 or greater, if message is a signal, -1 if not.
   function zmsg_signal (self : access czmq_library_h.zmsg_t) return int  -- /homes/taft/_distrib/include/zmsg.h:206
   with Import => True, 
        Convention => C, 
        External_Name => "zmsg_signal";

  --  Probe the supplied object, and report if it looks like a zmsg_t.
   function zmsg_is (self : System.Address) return Extensions.bool  -- /homes/taft/_distrib/include/zmsg.h:210
   with Import => True, 
        Convention => C, 
        External_Name => "zmsg_is";

  --  Self test of this class.
   procedure zmsg_test (verbose : Extensions.bool)  -- /homes/taft/_distrib/include/zmsg.h:214
   with Import => True, 
        Convention => C, 
        External_Name => "zmsg_test";

  --  *** Draft method, for development use, may change without warning ***
  --  Return message routing ID, if the message came from a ZMQ_SERVER socket.
  --  Else returns zero.
  --  *** Draft method, for development use, may change without warning ***
  --  Set routing ID on message. This is used if/when the message is sent to a
  --  ZMQ_SERVER socket.
  --  *** Draft method, for development use, may change without warning ***
  --  Send message to zsys log sink (may be stdout, or system facility as
  --  configured by zsys_set_logstream).
  --  Message length is specified; no truncation unless length is zero.
  --  Backwards compatible with zframe_print when length is zero.
  --  @end
  --  DEPRECATED as over-engineered, poor style
  --  Pop frame off front of message, caller now owns frame
  --  If next frame is empty, pops and destroys that empty frame.
   function zmsg_unwrap (self : access czmq_library_h.zmsg_t) return access czmq_library_h.zframe_t  -- /homes/taft/_distrib/include/zmsg.h:245
   with Import => True, 
        Convention => C, 
        External_Name => "zmsg_unwrap";

  --  DEPRECATED as poor style -- callers should use zloop or zpoller
  --  Receive message from socket, returns zmsg_t object, or NULL either if
  --  there was no input waiting, or the recv was interrupted.
   function zmsg_recv_nowait (source : System.Address) return access czmq_library_h.zmsg_t  -- /homes/taft/_distrib/include/zmsg.h:251
   with Import => True, 
        Convention => C, 
        External_Name => "zmsg_recv_nowait";

  --  DEPRECATED as unsafe -- does not nullify frame reference.
  --  Push frame plus empty frame to front of message, before first frame.
  --  Message takes ownership of frame, will destroy it when message is sent.
   procedure zmsg_wrap (self : access czmq_library_h.zmsg_t; frame : access czmq_library_h.zframe_t)  -- /homes/taft/_distrib/include/zmsg.h:257
   with Import => True, 
        Convention => C, 
        External_Name => "zmsg_wrap";

  --  DEPRECATED - will be removed for next + 1 stable release
  --  Add frame to the front of the message, i.e. before all other frames.
  --  Message takes ownership of frame, will destroy it when message is sent.
  --  Returns 0 on success, -1 on error.
   function zmsg_push (self : access czmq_library_h.zmsg_t; frame : access czmq_library_h.zframe_t) return int  -- /homes/taft/_distrib/include/zmsg.h:264
   with Import => True, 
        Convention => C, 
        External_Name => "zmsg_push";

  --  DEPRECATED - will be removed for next stable release
   function zmsg_add (self : access czmq_library_h.zmsg_t; frame : access czmq_library_h.zframe_t) return int  -- /homes/taft/_distrib/include/zmsg.h:268
   with Import => True, 
        Convention => C, 
        External_Name => "zmsg_add";

  --  DEPRECATED as inconsistent; breaks principle that logging should all go
  --  to a single destination.
  --  Print message to open stream
  --  Truncates to first 10 frames, for readability.
   procedure zmsg_fprint (self : access czmq_library_h.zmsg_t; the_file : access stdio_h.FILE)  -- /homes/taft/_distrib/include/zmsg.h:275
   with Import => True, 
        Convention => C, 
        External_Name => "zmsg_fprint";

  --  Compiler hints
   function zmsg_addstrf (self : access czmq_library_h.zmsg_t; format : Interfaces.C.Strings.chars_ptr  -- , ...
      ) return int  -- /homes/taft/_distrib/include/zmsg.h:278
   with Import => True, 
        Convention => C, 
        External_Name => "zmsg_addstrf";

   function zmsg_pushstrf (self : access czmq_library_h.zmsg_t; format : Interfaces.C.Strings.chars_ptr  -- , ...
      ) return int  -- /homes/taft/_distrib/include/zmsg.h:279
   with Import => True, 
        Convention => C, 
        External_Name => "zmsg_pushstrf";

  --  Deprecated method aliases
end zmsg_h;
