pragma Ada_2012;
pragma Style_Checks (Off);
pragma Warnings ("U");

with Interfaces.C; use Interfaces.C;
limited with czmq_library_h;
with System;
with stddef_h;
with Interfaces.C.Strings;
with Interfaces.C.Extensions;

package zhashx_h is

  --  =========================================================================
  --    zhashx - extended generic type-free hash container
  --    Copyright (c) the Contributors as noted in the AUTHORS file.
  --    This file is part of CZMQ, the high-level C binding for 0MQ:
  --    http://czmq.zeromq.org.
  --    This Source Code Form is subject to the terms of the Mozilla Public
  --    License, v. 2.0. If a copy of the MPL was not distributed with this
  --    file, You can obtain one at http://mozilla.org/MPL/2.0/.
  --    =========================================================================
  -- 

  --  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
  --  @warning Please edit the model at "api/zhashx.api" to make changes.
  --  @interface
  --  This is a stable class, and may not change except for emergencies. It
  --  is provided in stable builds.
  --  This class has draft methods, which may change over time. They are not
  --  in stable releases, by default. Use --enable-drafts to enable.
  -- Destroy an item
   --  skipped function type zhashx_destructor_fn

  -- Duplicate an item
   --  skipped function type zhashx_duplicator_fn

  -- Compare two items, for sorting
   --  skipped function type zhashx_comparator_fn

  -- Destroy an item.
   --  skipped function type zhashx_free_fn

  -- Hash function for keys.
   --  skipped function type zhashx_hash_fn

  -- Serializes an item to a longstr.
  -- The caller takes ownership of the newly created object.
   --  skipped function type zhashx_serializer_fn

  -- Deserializes a longstr into an item.
  -- The caller takes ownership of the newly created object.
   --  skipped function type zhashx_deserializer_fn

  --  Create a new, empty hash container
   function zhashx_new return access czmq_library_h.zhashx_t  -- /homes/taft/_distrib/include/zhashx.h:61
   with Import => True, 
        Convention => C, 
        External_Name => "zhashx_new";

  --  Unpack binary frame into a new hash table. Packed data must follow format
  --  defined by zhashx_pack. Hash table is set to autofree. An empty frame
  --  unpacks to an empty hash table.
   function zhashx_unpack (frame : access czmq_library_h.zframe_t) return access czmq_library_h.zhashx_t  -- /homes/taft/_distrib/include/zhashx.h:67
   with Import => True, 
        Convention => C, 
        External_Name => "zhashx_unpack";

  --  Destroy a hash container and all items in it
   procedure zhashx_destroy (self_p : System.Address)  -- /homes/taft/_distrib/include/zhashx.h:71
   with Import => True, 
        Convention => C, 
        External_Name => "zhashx_destroy";

  --  Insert item into hash table with specified key and item.
  --  If key is already present returns -1 and leaves existing item unchanged
  --  Returns 0 on success.
   function zhashx_insert
     (self : access czmq_library_h.zhashx_t;
      key : System.Address;
      item : System.Address) return int  -- /homes/taft/_distrib/include/zhashx.h:77
   with Import => True, 
        Convention => C, 
        External_Name => "zhashx_insert";

  --  Update or insert item into hash table with specified key and item. If the
  --  key is already present, destroys old item and inserts new one. If you set
  --  a container item destructor, this is called on the old value. If the key
  --  was not already present, inserts a new item. Sets the hash cursor to the
  --  new item.
   procedure zhashx_update
     (self : access czmq_library_h.zhashx_t;
      key : System.Address;
      item : System.Address)  -- /homes/taft/_distrib/include/zhashx.h:85
   with Import => True, 
        Convention => C, 
        External_Name => "zhashx_update";

  --  Remove an item specified by key from the hash table. If there was no such
  --  item, this function does nothing.
   procedure zhashx_delete (self : access czmq_library_h.zhashx_t; key : System.Address)  -- /homes/taft/_distrib/include/zhashx.h:90
   with Import => True, 
        Convention => C, 
        External_Name => "zhashx_delete";

  --  Delete all items from the hash table. If the key destructor is
  --  set, calls it on every key. If the item destructor is set, calls
  --  it on every item.
   procedure zhashx_purge (self : access czmq_library_h.zhashx_t)  -- /homes/taft/_distrib/include/zhashx.h:96
   with Import => True, 
        Convention => C, 
        External_Name => "zhashx_purge";

  --  Return the item at the specified key, or null
   function zhashx_lookup (self : access czmq_library_h.zhashx_t; key : System.Address) return System.Address  -- /homes/taft/_distrib/include/zhashx.h:100
   with Import => True, 
        Convention => C, 
        External_Name => "zhashx_lookup";

  --  Reindexes an item from an old key to a new key. If there was no such
  --  item, does nothing. Returns 0 if successful, else -1.
   function zhashx_rename
     (self : access czmq_library_h.zhashx_t;
      old_key : System.Address;
      new_key : System.Address) return int  -- /homes/taft/_distrib/include/zhashx.h:105
   with Import => True, 
        Convention => C, 
        External_Name => "zhashx_rename";

  --  Set a free function for the specified hash table item. When the item is
  --  destroyed, the free function, if any, is called on that item.
  --  Use this when hash items are dynamically allocated, to ensure that
  --  you don't have memory leaks. You can pass 'free' or NULL as a free_fn.
  --  Returns the item, or NULL if there is no such item.
   function zhashx_freefn
     (self : access czmq_library_h.zhashx_t;
      key : System.Address;
      free_fn : access procedure (arg1 : System.Address)) return System.Address  -- /homes/taft/_distrib/include/zhashx.h:113
   with Import => True, 
        Convention => C, 
        External_Name => "zhashx_freefn";

  --  Return the number of keys/items in the hash table
   function zhashx_size (self : access czmq_library_h.zhashx_t) return stddef_h.size_t  -- /homes/taft/_distrib/include/zhashx.h:117
   with Import => True, 
        Convention => C, 
        External_Name => "zhashx_size";

  --  Return a zlistx_t containing the keys for the items in the
  --  table. Uses the key_duplicator to duplicate all keys and sets the
  --  key_destructor as destructor for the list.
  --  Caller owns return value and must destroy it when done.
   function zhashx_keys (self : access czmq_library_h.zhashx_t) return access czmq_library_h.zlistx_t  -- /homes/taft/_distrib/include/zhashx.h:124
   with Import => True, 
        Convention => C, 
        External_Name => "zhashx_keys";

  --  Return a zlistx_t containing the values for the items in the
  --  table. Uses the duplicator to duplicate all items and sets the
  --  destructor as destructor for the list.
  --  Caller owns return value and must destroy it when done.
   function zhashx_values (self : access czmq_library_h.zhashx_t) return access czmq_library_h.zlistx_t  -- /homes/taft/_distrib/include/zhashx.h:131
   with Import => True, 
        Convention => C, 
        External_Name => "zhashx_values";

  --  Simple iterator; returns first item in hash table, in no given order,
  --  or NULL if the table is empty. This method is simpler to use than the
  --  foreach() method, which is deprecated. To access the key for this item
  --  use zhashx_cursor(). NOTE: do NOT modify the table while iterating.
   function zhashx_first (self : access czmq_library_h.zhashx_t) return System.Address  -- /homes/taft/_distrib/include/zhashx.h:138
   with Import => True, 
        Convention => C, 
        External_Name => "zhashx_first";

  --  Simple iterator; returns next item in hash table, in no given order,
  --  or NULL if the last item was already returned. Use this together with
  --  zhashx_first() to process all items in a hash table. If you need the
  --  items in sorted order, use zhashx_keys() and then zlistx_sort(). To
  --  access the key for this item use zhashx_cursor(). NOTE: do NOT modify
  --  the table while iterating.
   function zhashx_next (self : access czmq_library_h.zhashx_t) return System.Address  -- /homes/taft/_distrib/include/zhashx.h:147
   with Import => True, 
        Convention => C, 
        External_Name => "zhashx_next";

  --  After a successful first/next method, returns the key for the item that
  --  was returned. This is a constant string that you may not modify or
  --  deallocate, and which lasts as long as the item in the hash. After an
  --  unsuccessful first/next, returns NULL.
   function zhashx_cursor (self : access czmq_library_h.zhashx_t) return System.Address  -- /homes/taft/_distrib/include/zhashx.h:154
   with Import => True, 
        Convention => C, 
        External_Name => "zhashx_cursor";

  --  Add a comment to hash table before saving to disk. You can add as many
  --  comment lines as you like. These comment lines are discarded when loading
  --  the file. If you use a null format, all comments are deleted.
   procedure zhashx_comment (self : access czmq_library_h.zhashx_t; format : Interfaces.C.Strings.chars_ptr  -- , ...
      )  -- /homes/taft/_distrib/include/zhashx.h:160
   with Import => True, 
        Convention => C, 
        External_Name => "zhashx_comment";

  --  Save hash table to a text file in name=value format. Hash values must be
  --  printable strings; keys may not contain '=' character. Returns 0 if OK,
  --  else -1 if a file error occurred.
   function zhashx_save (self : access czmq_library_h.zhashx_t; filename : Interfaces.C.Strings.chars_ptr) return int  -- /homes/taft/_distrib/include/zhashx.h:166
   with Import => True, 
        Convention => C, 
        External_Name => "zhashx_save";

  --  Load hash table from a text file in name=value format; hash table must
  --  already exist. Hash values must printable strings; keys may not contain
  --  '=' character. Returns 0 if OK, else -1 if a file was not readable.
   function zhashx_load (self : access czmq_library_h.zhashx_t; filename : Interfaces.C.Strings.chars_ptr) return int  -- /homes/taft/_distrib/include/zhashx.h:172
   with Import => True, 
        Convention => C, 
        External_Name => "zhashx_load";

  --  When a hash table was loaded from a file by zhashx_load, this method will
  --  reload the file if it has been modified since, and is "stable", i.e. not
  --  still changing. Returns 0 if OK, -1 if there was an error reloading the
  --  file.
   function zhashx_refresh (self : access czmq_library_h.zhashx_t) return int  -- /homes/taft/_distrib/include/zhashx.h:179
   with Import => True, 
        Convention => C, 
        External_Name => "zhashx_refresh";

  --  Serialize hash table to a binary frame that can be sent in a message.
  --  The packed format is compatible with the 'dictionary' type defined in
  --  http://rfc.zeromq.org/spec:35/FILEMQ, and implemented by zproto:
  --     ; A list of name/value pairs
  --     dictionary      = dict-count *( dict-name dict-value )
  --     dict-count      = number-4
  --     dict-value      = longstr
  --     dict-name       = string
  --     ; Strings are always length + text contents
  --     longstr         = number-4 *VCHAR
  --     string          = number-1 *VCHAR
  --     ; Numbers are unsigned integers in network byte order
  --     number-1        = 1OCTET
  --     number-4        = 4OCTET
  --  Comments are not included in the packed data. Item values MUST be
  --  strings.
  --  Caller owns return value and must destroy it when done.
   function zhashx_pack (self : access czmq_library_h.zhashx_t) return access czmq_library_h.zframe_t  -- /homes/taft/_distrib/include/zhashx.h:203
   with Import => True, 
        Convention => C, 
        External_Name => "zhashx_pack";

  --  Make a copy of the list; items are duplicated if you set a duplicator
  --  for the list, otherwise not. Copying a null reference returns a null
  --  reference. Note that this method's behavior changed slightly for CZMQ
  --  v3.x, as it does not set nor respect autofree. It does however let you
  --  duplicate any hash table safely. The old behavior is in zhashx_dup_v2.
  --  Caller owns return value and must destroy it when done.
   function zhashx_dup (self : access czmq_library_h.zhashx_t) return access czmq_library_h.zhashx_t  -- /homes/taft/_distrib/include/zhashx.h:212
   with Import => True, 
        Convention => C, 
        External_Name => "zhashx_dup";

  --  Set a user-defined deallocator for hash items; by default items are not
  --  freed when the hash is destroyed.
   procedure zhashx_set_destructor (self : access czmq_library_h.zhashx_t; destructor : access procedure (arg1 : System.Address))  -- /homes/taft/_distrib/include/zhashx.h:217
   with Import => True, 
        Convention => C, 
        External_Name => "zhashx_set_destructor";

  --  Set a user-defined duplicator for hash items; by default items are not
  --  copied when the hash is duplicated.
   procedure zhashx_set_duplicator (self : access czmq_library_h.zhashx_t; duplicator : access function (arg1 : System.Address) return System.Address)  -- /homes/taft/_distrib/include/zhashx.h:222
   with Import => True, 
        Convention => C, 
        External_Name => "zhashx_set_duplicator";

  --  Set a user-defined deallocator for keys; by default keys are freed
  --  when the hash is destroyed using free().
   procedure zhashx_set_key_destructor (self : access czmq_library_h.zhashx_t; destructor : access procedure (arg1 : System.Address))  -- /homes/taft/_distrib/include/zhashx.h:227
   with Import => True, 
        Convention => C, 
        External_Name => "zhashx_set_key_destructor";

  --  Set a user-defined duplicator for keys; by default keys are duplicated
  --  using strdup.
   procedure zhashx_set_key_duplicator (self : access czmq_library_h.zhashx_t; duplicator : access function (arg1 : System.Address) return System.Address)  -- /homes/taft/_distrib/include/zhashx.h:232
   with Import => True, 
        Convention => C, 
        External_Name => "zhashx_set_key_duplicator";

  --  Set a user-defined comparator for keys; by default keys are
  --  compared using strcmp.
  --  The callback function should return zero (0) on matching
  --  items.
   procedure zhashx_set_key_comparator (self : access czmq_library_h.zhashx_t; comparator : access function (arg1 : System.Address; arg2 : System.Address) return int)  -- /homes/taft/_distrib/include/zhashx.h:239
   with Import => True, 
        Convention => C, 
        External_Name => "zhashx_set_key_comparator";

  --  Set a user-defined hash function for keys; by default keys are
  --  hashed by a modified Bernstein hashing function.
   procedure zhashx_set_key_hasher (self : access czmq_library_h.zhashx_t; hasher : access function (arg1 : System.Address) return stddef_h.size_t)  -- /homes/taft/_distrib/include/zhashx.h:244
   with Import => True, 
        Convention => C, 
        External_Name => "zhashx_set_key_hasher";

  --  Make copy of hash table; if supplied table is null, returns null.
  --  Does not copy items themselves. Rebuilds new table so may be slow on
  --  very large tables. NOTE: only works with item values that are strings
  --  since there's no other way to know how to duplicate the item value.
   function zhashx_dup_v2 (self : access czmq_library_h.zhashx_t) return access czmq_library_h.zhashx_t  -- /homes/taft/_distrib/include/zhashx.h:251
   with Import => True, 
        Convention => C, 
        External_Name => "zhashx_dup_v2";

  --  Self test of this class.
   procedure zhashx_test (verbose : Extensions.bool)  -- /homes/taft/_distrib/include/zhashx.h:255
   with Import => True, 
        Convention => C, 
        External_Name => "zhashx_test";

  --  *** Draft method, for development use, may change without warning ***
  --  Same as unpack but uses a user-defined deserializer function to convert
  --  a longstr back into item format.
  --  *** Draft method, for development use, may change without warning ***
  --  Same as pack but uses a user-defined serializer function to convert items
  --  into longstr.
  --  Caller owns return value and must destroy it when done.
  --  @end
end zhashx_h;
