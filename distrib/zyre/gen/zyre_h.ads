pragma Ada_2012;
pragma Style_Checks (Off);
pragma Warnings ("U");

with Interfaces.C; use Interfaces.C;
with Interfaces.C.Strings;
with zyre_library_h;
with System;
with stddef_h;
with czmq_library_h;
with stdint_h;
with Interfaces.C.Extensions;

package zyre_h is

   --  arg-macro: procedure zyre_dump (z)
   --    zyre_print((z))
  --  =========================================================================
  --    zyre_api.h - Zyre public API
  --    -------------------------------------------------------------------------
  --    Copyright (c) the Contributors as noted in the AUTHORS file.
  --    This file is part of Zyre, an open-source framework for proximity-based
  --    peer-to-peer applications -- See http://zyre.org.
  --    This Source Code Form is subject to the terms of the Mozilla Public
  --    License, v. 2.0. If a copy of the MPL was not distributed with this
  --    file, You can obtain one at http://mozilla.org/MPL/2.0/.
  --    =========================================================================
  -- 

  --  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
  --  @warning Please edit the model at "api/zyre.api" to make changes.
  --  @interface
  --  This is a stable class, and may not change except for emergencies. It
  --  is provided in stable builds.
  --  This class has draft methods, which may change over time. They are not
  --  in stable releases, by default. Use --enable-drafts to enable.
  --  Constructor, creates a new Zyre node. Note that until you start the
  --  node it is silent and invisible to other nodes on the network.
  --  The node name is provided to other nodes during discovery. If you
  --  specify NULL, Zyre generates a randomized node name from the UUID.
   function zyre_new (name : Interfaces.C.Strings.chars_ptr) return access zyre_library_h.zyre_t  -- include/zyre.h:37
   with Import => True, 
        Convention => C, 
        External_Name => "zyre_new";

  --  Destructor, destroys a Zyre node. When you destroy a node, any
  --  messages it is sending or receiving will be discarded.
   procedure zyre_destroy (self_p : System.Address)  -- include/zyre.h:42
   with Import => True, 
        Convention => C, 
        External_Name => "zyre_destroy";

  --  Return our node UUID string, after successful initialization
   function zyre_uuid (self : access zyre_library_h.zyre_t) return Interfaces.C.Strings.chars_ptr  -- include/zyre.h:46
   with Import => True, 
        Convention => C, 
        External_Name => "zyre_uuid";

  --  Return our node name, after successful initialization. First 6
  --  characters of UUID by default.
   function zyre_name (self : access zyre_library_h.zyre_t) return Interfaces.C.Strings.chars_ptr  -- include/zyre.h:51
   with Import => True, 
        Convention => C, 
        External_Name => "zyre_name";

  --  Set the public name of this node overriding the default. The name is
  --  provide during discovery and come in each ENTER message.
   procedure zyre_set_name (self : access zyre_library_h.zyre_t; name : Interfaces.C.Strings.chars_ptr)  -- include/zyre.h:56
   with Import => True, 
        Convention => C, 
        External_Name => "zyre_set_name";

  --  Set node header; these are provided to other nodes during discovery
  --  and come in each ENTER message.
   procedure zyre_set_header
     (self : access zyre_library_h.zyre_t;
      name : Interfaces.C.Strings.chars_ptr;
      format : Interfaces.C.Strings.chars_ptr  -- , ...
      )  -- include/zyre.h:61
   with Import => True, 
        Convention => C, 
        External_Name => "zyre_set_header";

  --  Set verbose mode; this tells the node to log all traffic as well as
  --  all major events.
   procedure zyre_set_verbose (self : access zyre_library_h.zyre_t)  -- include/zyre.h:66
   with Import => True, 
        Convention => C, 
        External_Name => "zyre_set_verbose";

  --  Set UDP beacon discovery port; defaults to 5670, this call overrides
  --  that so you can create independent clusters on the same network, for
  --  e.g. development vs. production. Has no effect after zyre_start().
   procedure zyre_set_port (self : access zyre_library_h.zyre_t; port_nbr : int)  -- include/zyre.h:72
   with Import => True, 
        Convention => C, 
        External_Name => "zyre_set_port";

  --  Set the peer evasiveness timeout, in milliseconds. Default is 5000.
  --  This can be tuned in order to deal with expected network conditions
  --  and the response time expected by the application. This is tied to
  --  the beacon interval and rate of messages received.
   procedure zyre_set_evasive_timeout (self : access zyre_library_h.zyre_t; interval : int)  -- include/zyre.h:79
   with Import => True, 
        Convention => C, 
        External_Name => "zyre_set_evasive_timeout";

  --  Set the peer silence timeout, in milliseconds. Default is 5000.
  --  This can be tuned in order to deal with expected network conditions
  --  and the response time expected by the application. This is tied to
  --  the beacon interval and rate of messages received.
  --  Silence is triggered one second after the timeout if peer has not
  --  answered ping and has not sent any message.
  --  NB: this is currently redundant with the evasiveness timeout. Both
  --  affect the same timeout value.
   procedure zyre_set_silent_timeout (self : access zyre_library_h.zyre_t; interval : int)  -- include/zyre.h:90
   with Import => True, 
        Convention => C, 
        External_Name => "zyre_set_silent_timeout";

  --  Set the peer expiration timeout, in milliseconds. Default is 30000.
  --  This can be tuned in order to deal with expected network conditions
  --  and the response time expected by the application. This is tied to
  --  the beacon interval and rate of messages received.
   procedure zyre_set_expired_timeout (self : access zyre_library_h.zyre_t; interval : int)  -- include/zyre.h:97
   with Import => True, 
        Convention => C, 
        External_Name => "zyre_set_expired_timeout";

  --  Set UDP beacon discovery interval, in milliseconds. Default is instant
  --  beacon exploration followed by pinging every 1,000 msecs.
   procedure zyre_set_interval (self : access zyre_library_h.zyre_t; interval : stddef_h.size_t)  -- include/zyre.h:102
   with Import => True, 
        Convention => C, 
        External_Name => "zyre_set_interval";

  --  Set network interface for UDP beacons. If you do not set this, CZMQ will
  --  choose an interface for you. On boxes with several interfaces you should
  --  specify which one you want to use, or strange things can happen.
  --  The interface may by specified by either the interface name e.g. "eth0" or
  --  an IP address associalted with the interface e.g. "192.168.0.1"
   procedure zyre_set_interface (self : access zyre_library_h.zyre_t; value : Interfaces.C.Strings.chars_ptr)  -- include/zyre.h:110
   with Import => True, 
        Convention => C, 
        External_Name => "zyre_set_interface";

  --  By default, Zyre binds to an ephemeral TCP port and broadcasts the local
  --  host name using UDP beaconing. When you call this method, Zyre will use
  --  gossip discovery instead of UDP beaconing. You MUST set-up the gossip
  --  service separately using zyre_gossip_bind() and _connect(). Note that the
  --  endpoint MUST be valid for both bind and connect operations. You can use
  --  inproc://, ipc://, or tcp:// transports (for tcp://, use an IP address
  --  that is meaningful to remote as well as local nodes). Returns 0 if
  --  the bind was successful, else -1.
   function zyre_set_endpoint (self : access zyre_library_h.zyre_t; format : Interfaces.C.Strings.chars_ptr  -- , ...
      ) return int  -- include/zyre.h:121
   with Import => True, 
        Convention => C, 
        External_Name => "zyre_set_endpoint";

  --  Set-up gossip discovery of other nodes. At least one node in the cluster
  --  must bind to a well-known gossip endpoint, so other nodes can connect to
  --  it. Note that gossip endpoints are completely distinct from Zyre node
  --  endpoints, and should not overlap (they can use the same transport).
   procedure zyre_gossip_bind (self : access zyre_library_h.zyre_t; format : Interfaces.C.Strings.chars_ptr  -- , ...
      )  -- include/zyre.h:128
   with Import => True, 
        Convention => C, 
        External_Name => "zyre_gossip_bind";

  --  Set-up gossip discovery of other nodes. A node may connect to multiple
  --  other nodes, for redundancy paths. For details of the gossip network
  --  design, see the CZMQ zgossip class.
   procedure zyre_gossip_connect (self : access zyre_library_h.zyre_t; format : Interfaces.C.Strings.chars_ptr  -- , ...
      )  -- include/zyre.h:134
   with Import => True, 
        Convention => C, 
        External_Name => "zyre_gossip_connect";

  --  Start node, after setting header values. When you start a node it
  --  begins discovery and connection. Returns 0 if OK, -1 if it wasn't
  --  possible to start the node.
   function zyre_start (self : access zyre_library_h.zyre_t) return int  -- include/zyre.h:140
   with Import => True, 
        Convention => C, 
        External_Name => "zyre_start";

  --  Stop node; this signals to other peers that this node will go away.
  --  This is polite; however you can also just destroy the node without
  --  stopping it.
   procedure zyre_stop (self : access zyre_library_h.zyre_t)  -- include/zyre.h:146
   with Import => True, 
        Convention => C, 
        External_Name => "zyre_stop";

  --  Join a named group; after joining a group you can send messages to
  --  the group and all Zyre nodes in that group will receive them.
   function zyre_join (self : access zyre_library_h.zyre_t; group : Interfaces.C.Strings.chars_ptr) return int  -- include/zyre.h:151
   with Import => True, 
        Convention => C, 
        External_Name => "zyre_join";

  --  Leave a group
   function zyre_leave (self : access zyre_library_h.zyre_t; group : Interfaces.C.Strings.chars_ptr) return int  -- include/zyre.h:155
   with Import => True, 
        Convention => C, 
        External_Name => "zyre_leave";

  --  Receive next message from network; the message may be a control
  --  message (ENTER, EXIT, JOIN, LEAVE) or data (WHISPER, SHOUT).
  --  Returns zmsg_t object, or NULL if interrupted
  --  Caller owns return value and must destroy it when done.
   function zyre_recv (self : access zyre_library_h.zyre_t) return access czmq_library_h.zmsg_t  -- include/zyre.h:162
   with Import => True, 
        Convention => C, 
        External_Name => "zyre_recv";

  --  Send message to single peer, specified as a UUID string
  --  Destroys message after sending
   function zyre_whisper
     (self : access zyre_library_h.zyre_t;
      peer : Interfaces.C.Strings.chars_ptr;
      msg_p : System.Address) return int  -- include/zyre.h:167
   with Import => True, 
        Convention => C, 
        External_Name => "zyre_whisper";

  --  Send message to a named group
  --  Destroys message after sending
   function zyre_shout
     (self : access zyre_library_h.zyre_t;
      group : Interfaces.C.Strings.chars_ptr;
      msg_p : System.Address) return int  -- include/zyre.h:172
   with Import => True, 
        Convention => C, 
        External_Name => "zyre_shout";

  --  Send formatted string to a single peer specified as UUID string
   function zyre_whispers
     (self : access zyre_library_h.zyre_t;
      peer : Interfaces.C.Strings.chars_ptr;
      format : Interfaces.C.Strings.chars_ptr  -- , ...
      ) return int  -- include/zyre.h:176
   with Import => True, 
        Convention => C, 
        External_Name => "zyre_whispers";

  --  Send formatted string to a named group
   function zyre_shouts
     (self : access zyre_library_h.zyre_t;
      group : Interfaces.C.Strings.chars_ptr;
      format : Interfaces.C.Strings.chars_ptr  -- , ...
      ) return int  -- include/zyre.h:180
   with Import => True, 
        Convention => C, 
        External_Name => "zyre_shouts";

  --  Return zlist of current peer ids.
  --  Caller owns return value and must destroy it when done.
   function zyre_peers (self : access zyre_library_h.zyre_t) return access czmq_library_h.zlist_t  -- include/zyre.h:185
   with Import => True, 
        Convention => C, 
        External_Name => "zyre_peers";

  --  Return zlist of current peers of this group.
  --  Caller owns return value and must destroy it when done.
   function zyre_peers_by_group (self : access zyre_library_h.zyre_t; name : Interfaces.C.Strings.chars_ptr) return access czmq_library_h.zlist_t  -- include/zyre.h:190
   with Import => True, 
        Convention => C, 
        External_Name => "zyre_peers_by_group";

  --  Return zlist of currently joined groups.
  --  Caller owns return value and must destroy it when done.
   function zyre_own_groups (self : access zyre_library_h.zyre_t) return access czmq_library_h.zlist_t  -- include/zyre.h:195
   with Import => True, 
        Convention => C, 
        External_Name => "zyre_own_groups";

  --  Return zlist of groups known through connected peers.
  --  Caller owns return value and must destroy it when done.
   function zyre_peer_groups (self : access zyre_library_h.zyre_t) return access czmq_library_h.zlist_t  -- include/zyre.h:200
   with Import => True, 
        Convention => C, 
        External_Name => "zyre_peer_groups";

  --  Return the endpoint of a connected peer.
  --  Returns empty string if peer does not exist.
  --  Caller owns return value and must destroy it when done.
   function zyre_peer_address (self : access zyre_library_h.zyre_t; peer : Interfaces.C.Strings.chars_ptr) return Interfaces.C.Strings.chars_ptr  -- include/zyre.h:206
   with Import => True, 
        Convention => C, 
        External_Name => "zyre_peer_address";

  --  Return the value of a header of a conected peer.
  --  Returns null if peer or key doesn't exits.
  --  Caller owns return value and must destroy it when done.
   function zyre_peer_header_value
     (self : access zyre_library_h.zyre_t;
      peer : Interfaces.C.Strings.chars_ptr;
      name : Interfaces.C.Strings.chars_ptr) return Interfaces.C.Strings.chars_ptr  -- include/zyre.h:212
   with Import => True, 
        Convention => C, 
        External_Name => "zyre_peer_header_value";

  --  Return socket for talking to the Zyre node, for polling
   function zyre_socket (self : access zyre_library_h.zyre_t) return access czmq_library_h.zsock_t  -- include/zyre.h:216
   with Import => True, 
        Convention => C, 
        External_Name => "zyre_socket";

  --  Print zyre node information to stdout
   procedure zyre_print (self : access zyre_library_h.zyre_t)  -- include/zyre.h:220
   with Import => True, 
        Convention => C, 
        External_Name => "zyre_print";

  --  Return the Zyre version for run-time API detection; returns
  --  major * 10000 + minor * 100 + patch, as a single integer.
   function zyre_version return stdint_h.uint64_t  -- include/zyre.h:225
   with Import => True, 
        Convention => C, 
        External_Name => "zyre_version";

  --  Self test of this class.
   procedure zyre_test (verbose : Extensions.bool)  -- include/zyre.h:229
   with Import => True, 
        Convention => C, 
        External_Name => "zyre_test";

  --  *** Draft method, for development use, may change without warning ***
  --  Set the TCP port bound by the ROUTER peer-to-peer socket (beacon mode).
  --  Defaults to * (the port is randomly assigned by the system).
  --  This call overrides this, to bypass some firewall issues when ports are
  --  random. Has no effect after zyre_start().
  --  *** Draft method, for development use, may change without warning ***
  --  This options enables a peer to actively contest for leadership in the
  --  given group. If this option is not set the peer will still participate in
  --  elections but never gets elected. This ensures that a consent for a leader
  --  is reached within a group even though not every peer is contesting for
  --  leadership.
  --  *** Draft method, for development use, may change without warning ***
  --  Set an alternative endpoint value when using GOSSIP ONLY. This is useful
  --  if you're advertising an endpoint behind a NAT.
  --  *** Draft method, for development use, may change without warning ***
  --  Apply a azcert to a Zyre node.
  --  *** Draft method, for development use, may change without warning ***
  --  Specify the ZAP domain (for use with CURVE).
  --  *** Draft method, for development use, may change without warning ***
  --  Set-up gossip discovery with CURVE enabled.
  --  *** Draft method, for development use, may change without warning ***
  --  Unpublish a GOSSIP node from local list, useful in removing nodes from list when they EXIT
  --  *** Draft method, for development use, may change without warning ***
  --  Explicitly connect to a peer
  --  *** Draft method, for development use, may change without warning ***
  --  Return underlying ZMQ socket for talking to the Zyre node,
  --  for polling with libzmq (base ZMQ library)
  --  @end
end zyre_h;
