pragma Ada_2012;
pragma Style_Checks (Off);
pragma Warnings ("U");

with Interfaces.C; use Interfaces.C;
limited with czmq_library_h;
with System;
with Interfaces.C.Strings;
with stddef_h;
with Interfaces.C.Extensions;

package zhash_h is

  --  =========================================================================
  --    zhash - generic type-free hash container (simple)
  --    Copyright (c) the Contributors as noted in the AUTHORS file.
  --    This file is part of CZMQ, the high-level C binding for 0MQ:
  --    http://czmq.zeromq.org.
  --    This Source Code Form is subject to the terms of the Mozilla Public
  --    License, v. 2.0. If a copy of the MPL was not distributed with this
  --    file, You can obtain one at http://mozilla.org/MPL/2.0/.
  --    =========================================================================
  -- 

  --  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
  --  @warning Please edit the model at "api/zhash.api" to make changes.
  --  @interface
  --  This is a stable class, and may not change except for emergencies. It
  --  is provided in stable builds.
  -- Callback function for zhash_freefn method
   --  skipped function type zhash_free_fn

  --  Create a new, empty hash container
   function zhash_new return access czmq_library_h.zhash_t  -- /homes/taft/_distrib/include/zhash.h:32
   with Import => True, 
        Convention => C, 
        External_Name => "zhash_new";

  --  Unpack binary frame into a new hash table. Packed data must follow format
  --  defined by zhash_pack. Hash table is set to autofree. An empty frame
  --  unpacks to an empty hash table.
   function zhash_unpack (frame : access czmq_library_h.zframe_t) return access czmq_library_h.zhash_t  -- /homes/taft/_distrib/include/zhash.h:38
   with Import => True, 
        Convention => C, 
        External_Name => "zhash_unpack";

  --  Destroy a hash container and all items in it
   procedure zhash_destroy (self_p : System.Address)  -- /homes/taft/_distrib/include/zhash.h:42
   with Import => True, 
        Convention => C, 
        External_Name => "zhash_destroy";

  --  Insert item into hash table with specified key and item.
  --  If key is already present returns -1 and leaves existing item unchanged
  --  Returns 0 on success.
   function zhash_insert
     (self : access czmq_library_h.zhash_t;
      key : Interfaces.C.Strings.chars_ptr;
      item : System.Address) return int  -- /homes/taft/_distrib/include/zhash.h:48
   with Import => True, 
        Convention => C, 
        External_Name => "zhash_insert";

  --  Update item into hash table with specified key and item.
  --  If key is already present, destroys old item and inserts new one.
  --  Use free_fn method to ensure deallocator is properly called on item.
   procedure zhash_update
     (self : access czmq_library_h.zhash_t;
      key : Interfaces.C.Strings.chars_ptr;
      item : System.Address)  -- /homes/taft/_distrib/include/zhash.h:54
   with Import => True, 
        Convention => C, 
        External_Name => "zhash_update";

  --  Remove an item specified by key from the hash table. If there was no such
  --  item, this function does nothing.
   procedure zhash_delete (self : access czmq_library_h.zhash_t; key : Interfaces.C.Strings.chars_ptr)  -- /homes/taft/_distrib/include/zhash.h:59
   with Import => True, 
        Convention => C, 
        External_Name => "zhash_delete";

  --  Return the item at the specified key, or null
   function zhash_lookup (self : access czmq_library_h.zhash_t; key : Interfaces.C.Strings.chars_ptr) return System.Address  -- /homes/taft/_distrib/include/zhash.h:63
   with Import => True, 
        Convention => C, 
        External_Name => "zhash_lookup";

  --  Reindexes an item from an old key to a new key. If there was no such
  --  item, does nothing. Returns 0 if successful, else -1.
   function zhash_rename
     (self : access czmq_library_h.zhash_t;
      old_key : Interfaces.C.Strings.chars_ptr;
      new_key : Interfaces.C.Strings.chars_ptr) return int  -- /homes/taft/_distrib/include/zhash.h:68
   with Import => True, 
        Convention => C, 
        External_Name => "zhash_rename";

  --  Set a free function for the specified hash table item. When the item is
  --  destroyed, the free function, if any, is called on that item.
  --  Use this when hash items are dynamically allocated, to ensure that
  --  you don't have memory leaks. You can pass 'free' or NULL as a free_fn.
  --  Returns the item, or NULL if there is no such item.
   function zhash_freefn
     (self : access czmq_library_h.zhash_t;
      key : Interfaces.C.Strings.chars_ptr;
      free_fn : access procedure (arg1 : System.Address)) return System.Address  -- /homes/taft/_distrib/include/zhash.h:76
   with Import => True, 
        Convention => C, 
        External_Name => "zhash_freefn";

  --  Return the number of keys/items in the hash table
   function zhash_size (self : access czmq_library_h.zhash_t) return stddef_h.size_t  -- /homes/taft/_distrib/include/zhash.h:80
   with Import => True, 
        Convention => C, 
        External_Name => "zhash_size";

  --  Make copy of hash table; if supplied table is null, returns null.
  --  Does not copy items themselves. Rebuilds new table so may be slow on
  --  very large tables. NOTE: only works with item values that are strings
  --  since there's no other way to know how to duplicate the item value.
  --  Caller owns return value and must destroy it when done.
   function zhash_dup (self : access czmq_library_h.zhash_t) return access czmq_library_h.zhash_t  -- /homes/taft/_distrib/include/zhash.h:88
   with Import => True, 
        Convention => C, 
        External_Name => "zhash_dup";

  --  Return keys for items in table
  --  Caller owns return value and must destroy it when done.
   function zhash_keys (self : access czmq_library_h.zhash_t) return access czmq_library_h.zlist_t  -- /homes/taft/_distrib/include/zhash.h:93
   with Import => True, 
        Convention => C, 
        External_Name => "zhash_keys";

  --  Simple iterator; returns first item in hash table, in no given order,
  --  or NULL if the table is empty. This method is simpler to use than the
  --  foreach() method, which is deprecated. To access the key for this item
  --  use zhash_cursor(). NOTE: do NOT modify the table while iterating.
   function zhash_first (self : access czmq_library_h.zhash_t) return System.Address  -- /homes/taft/_distrib/include/zhash.h:100
   with Import => True, 
        Convention => C, 
        External_Name => "zhash_first";

  --  Simple iterator; returns next item in hash table, in no given order,
  --  or NULL if the last item was already returned. Use this together with
  --  zhash_first() to process all items in a hash table. If you need the
  --  items in sorted order, use zhash_keys() and then zlist_sort(). To
  --  access the key for this item use zhash_cursor(). NOTE: do NOT modify
  --  the table while iterating.
   function zhash_next (self : access czmq_library_h.zhash_t) return System.Address  -- /homes/taft/_distrib/include/zhash.h:109
   with Import => True, 
        Convention => C, 
        External_Name => "zhash_next";

  --  After a successful first/next method, returns the key for the item that
  --  was returned. This is a constant string that you may not modify or
  --  deallocate, and which lasts as long as the item in the hash. After an
  --  unsuccessful first/next, returns NULL.
   function zhash_cursor (self : access czmq_library_h.zhash_t) return Interfaces.C.Strings.chars_ptr  -- /homes/taft/_distrib/include/zhash.h:116
   with Import => True, 
        Convention => C, 
        External_Name => "zhash_cursor";

  --  Add a comment to hash table before saving to disk. You can add as many
  --  comment lines as you like. These comment lines are discarded when loading
  --  the file. If you use a null format, all comments are deleted.
   procedure zhash_comment (self : access czmq_library_h.zhash_t; format : Interfaces.C.Strings.chars_ptr  -- , ...
      )  -- /homes/taft/_distrib/include/zhash.h:122
   with Import => True, 
        Convention => C, 
        External_Name => "zhash_comment";

  --  Serialize hash table to a binary frame that can be sent in a message.
  --  The packed format is compatible with the 'dictionary' type defined in
  --  http://rfc.zeromq.org/spec:35/FILEMQ, and implemented by zproto:
  --     ; A list of name/value pairs
  --     dictionary      = dict-count *( dict-name dict-value )
  --     dict-count      = number-4
  --     dict-value      = longstr
  --     dict-name       = string
  --     ; Strings are always length + text contents
  --     longstr         = number-4 *VCHAR
  --     string          = number-1 *VCHAR
  --     ; Numbers are unsigned integers in network byte order
  --     number-1        = 1OCTET
  --     number-4        = 4OCTET
  --  Comments are not included in the packed data. Item values MUST be
  --  strings.
  --  Caller owns return value and must destroy it when done.
   function zhash_pack (self : access czmq_library_h.zhash_t) return access czmq_library_h.zframe_t  -- /homes/taft/_distrib/include/zhash.h:146
   with Import => True, 
        Convention => C, 
        External_Name => "zhash_pack";

  --  Save hash table to a text file in name=value format. Hash values must be
  --  printable strings; keys may not contain '=' character. Returns 0 if OK,
  --  else -1 if a file error occurred.
   function zhash_save (self : access czmq_library_h.zhash_t; filename : Interfaces.C.Strings.chars_ptr) return int  -- /homes/taft/_distrib/include/zhash.h:152
   with Import => True, 
        Convention => C, 
        External_Name => "zhash_save";

  --  Load hash table from a text file in name=value format; hash table must
  --  already exist. Hash values must printable strings; keys may not contain
  --  '=' character. Returns 0 if OK, else -1 if a file was not readable.
   function zhash_load (self : access czmq_library_h.zhash_t; filename : Interfaces.C.Strings.chars_ptr) return int  -- /homes/taft/_distrib/include/zhash.h:158
   with Import => True, 
        Convention => C, 
        External_Name => "zhash_load";

  --  When a hash table was loaded from a file by zhash_load, this method will
  --  reload the file if it has been modified since, and is "stable", i.e. not
  --  still changing. Returns 0 if OK, -1 if there was an error reloading the
  --  file.
   function zhash_refresh (self : access czmq_library_h.zhash_t) return int  -- /homes/taft/_distrib/include/zhash.h:165
   with Import => True, 
        Convention => C, 
        External_Name => "zhash_refresh";

  --  Set hash for automatic value destruction. Note that this assumes that
  --  values are NULL-terminated strings. Do not use with different types.
   procedure zhash_autofree (self : access czmq_library_h.zhash_t)  -- /homes/taft/_distrib/include/zhash.h:170
   with Import => True, 
        Convention => C, 
        External_Name => "zhash_autofree";

  --  Self test of this class.
   procedure zhash_test (verbose : Extensions.bool)  -- /homes/taft/_distrib/include/zhash.h:174
   with Import => True, 
        Convention => C, 
        External_Name => "zhash_test";

  --  @end
end zhash_h;
