pragma Ada_2012;
pragma Style_Checks (Off);
pragma Warnings ("U");

with Interfaces.C; use Interfaces.C;
with Interfaces.C.Strings;
limited with czmq_library_h;
with System;
with time_h;
with stdio_h;
with Interfaces.C.Extensions;
with stddef_h;
with x86_64_linux_gnu_sys_types_h;

package zfile_h is

  --  =========================================================================
  --    zfile - helper functions for working with files.
  --    Copyright (c) the Contributors as noted in the AUTHORS file.
  --    This file is part of CZMQ, the high-level C binding for 0MQ:
  --    http://czmq.zeromq.org.
  --    This Source Code Form is subject to the terms of the Mozilla Public
  --    License, v. 2.0. If a copy of the MPL was not distributed with this
  --    file, You can obtain one at http://mozilla.org/MPL/2.0/.
  --    =========================================================================
  -- 

  --  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
  --  @warning Please edit the model at "api/zfile.api" to make changes.
  --  @interface
  --  This is a stable class, and may not change except for emergencies. It
  --  is provided in stable builds.
  --  If file exists, populates properties. CZMQ supports portable symbolic
  --  links, which are files with the extension ".ln". A symbolic link is a
  --  text file containing one line, the filename of a target file. Reading
  --  data from the symbolic link actually reads from the target file. Path
  --  may be NULL, in which case it is not used.
   function zfile_new (path : Interfaces.C.Strings.chars_ptr; name : Interfaces.C.Strings.chars_ptr) return access czmq_library_h.zfile_t  -- /homes/taft/_distrib/include/zfile.h:32
   with Import => True, 
        Convention => C, 
        External_Name => "zfile_new";

  --  Destroy a file item
   procedure zfile_destroy (self_p : System.Address)  -- /homes/taft/_distrib/include/zfile.h:36
   with Import => True, 
        Convention => C, 
        External_Name => "zfile_destroy";

  --  Duplicate a file item, returns a newly constructed item. If the file
  --  is null, or memory was exhausted, returns null.
  --  Caller owns return value and must destroy it when done.
   function zfile_dup (self : access czmq_library_h.zfile_t) return access czmq_library_h.zfile_t  -- /homes/taft/_distrib/include/zfile.h:42
   with Import => True, 
        Convention => C, 
        External_Name => "zfile_dup";

  --  Return file name, remove path if provided
   function zfile_filename (self : access czmq_library_h.zfile_t; path : Interfaces.C.Strings.chars_ptr) return Interfaces.C.Strings.chars_ptr  -- /homes/taft/_distrib/include/zfile.h:46
   with Import => True, 
        Convention => C, 
        External_Name => "zfile_filename";

  --  Refresh file properties from disk; this is not done automatically
  --  on access methods, otherwise it is not possible to compare directory
  --  snapshots.
   procedure zfile_restat (self : access czmq_library_h.zfile_t)  -- /homes/taft/_distrib/include/zfile.h:52
   with Import => True, 
        Convention => C, 
        External_Name => "zfile_restat";

  --  Return when the file was last modified. If you want this to reflect the
  --  current situation, call zfile_restat before checking this property.
   function zfile_modified (self : access czmq_library_h.zfile_t) return time_h.time_t  -- /homes/taft/_distrib/include/zfile.h:57
   with Import => True, 
        Convention => C, 
        External_Name => "zfile_modified";

  --  Return the last-known size of the file. If you want this to reflect the
  --  current situation, call zfile_restat before checking this property.
   function zfile_cursize (self : access czmq_library_h.zfile_t) return stdio_h.off_t  -- /homes/taft/_distrib/include/zfile.h:62
   with Import => True, 
        Convention => C, 
        External_Name => "zfile_cursize";

  --  Return true if the file is a directory. If you want this to reflect
  --  any external changes, call zfile_restat before checking this property.
   function zfile_is_directory (self : access czmq_library_h.zfile_t) return Extensions.bool  -- /homes/taft/_distrib/include/zfile.h:67
   with Import => True, 
        Convention => C, 
        External_Name => "zfile_is_directory";

  --  Return true if the file is a regular file. If you want this to reflect
  --  any external changes, call zfile_restat before checking this property.
   function zfile_is_regular (self : access czmq_library_h.zfile_t) return Extensions.bool  -- /homes/taft/_distrib/include/zfile.h:72
   with Import => True, 
        Convention => C, 
        External_Name => "zfile_is_regular";

  --  Return true if the file is readable by this process. If you want this to
  --  reflect any external changes, call zfile_restat before checking this
  --  property.
   function zfile_is_readable (self : access czmq_library_h.zfile_t) return Extensions.bool  -- /homes/taft/_distrib/include/zfile.h:78
   with Import => True, 
        Convention => C, 
        External_Name => "zfile_is_readable";

  --  Return true if the file is writeable by this process. If you want this
  --  to reflect any external changes, call zfile_restat before checking this
  --  property.
   function zfile_is_writeable (self : access czmq_library_h.zfile_t) return Extensions.bool  -- /homes/taft/_distrib/include/zfile.h:84
   with Import => True, 
        Convention => C, 
        External_Name => "zfile_is_writeable";

  --  Check if file has stopped changing and can be safely processed.
  --  Updates the file statistics from disk at every call.
   function zfile_is_stable (self : access czmq_library_h.zfile_t) return Extensions.bool  -- /homes/taft/_distrib/include/zfile.h:89
   with Import => True, 
        Convention => C, 
        External_Name => "zfile_is_stable";

  --  Return true if the file was changed on disk since the zfile_t object
  --  was created, or the last zfile_restat() call made on it.
   function zfile_has_changed (self : access czmq_library_h.zfile_t) return Extensions.bool  -- /homes/taft/_distrib/include/zfile.h:94
   with Import => True, 
        Convention => C, 
        External_Name => "zfile_has_changed";

  --  Remove the file from disk
   procedure zfile_remove (self : access czmq_library_h.zfile_t)  -- /homes/taft/_distrib/include/zfile.h:98
   with Import => True, 
        Convention => C, 
        External_Name => "zfile_remove";

  --  Open file for reading
  --  Returns 0 if OK, -1 if not found or not accessible
   function zfile_input (self : access czmq_library_h.zfile_t) return int  -- /homes/taft/_distrib/include/zfile.h:103
   with Import => True, 
        Convention => C, 
        External_Name => "zfile_input";

  --  Open file for writing, creating directory if needed
  --  File is created if necessary; chunks can be written to file at any
  --  location. Returns 0 if OK, -1 if error.
   function zfile_output (self : access czmq_library_h.zfile_t) return int  -- /homes/taft/_distrib/include/zfile.h:109
   with Import => True, 
        Convention => C, 
        External_Name => "zfile_output";

  --  Read chunk from file at specified position. If this was the last chunk,
  --  sets the eof property. Returns a null chunk in case of error.
  --  Caller owns return value and must destroy it when done.
   function zfile_read
     (self : access czmq_library_h.zfile_t;
      bytes : stddef_h.size_t;
      offset : stdio_h.off_t) return access czmq_library_h.zchunk_t  -- /homes/taft/_distrib/include/zfile.h:115
   with Import => True, 
        Convention => C, 
        External_Name => "zfile_read";

  --  Returns true if zfile_read() just read the last chunk in the file.
   function zfile_eof (self : access czmq_library_h.zfile_t) return Extensions.bool  -- /homes/taft/_distrib/include/zfile.h:119
   with Import => True, 
        Convention => C, 
        External_Name => "zfile_eof";

  --  Write chunk to file at specified position
  --  Return 0 if OK, else -1
   function zfile_write
     (self : access czmq_library_h.zfile_t;
      chunk : access czmq_library_h.zchunk_t;
      offset : stdio_h.off_t) return int  -- /homes/taft/_distrib/include/zfile.h:124
   with Import => True, 
        Convention => C, 
        External_Name => "zfile_write";

  --  Read next line of text from file. Returns a pointer to the text line,
  --  or NULL if there was nothing more to read from the file.
   function zfile_readln (self : access czmq_library_h.zfile_t) return Interfaces.C.Strings.chars_ptr  -- /homes/taft/_distrib/include/zfile.h:129
   with Import => True, 
        Convention => C, 
        External_Name => "zfile_readln";

  --  Close file, if open
   procedure zfile_close (self : access czmq_library_h.zfile_t)  -- /homes/taft/_distrib/include/zfile.h:133
   with Import => True, 
        Convention => C, 
        External_Name => "zfile_close";

  --  Return file handle, if opened
   function zfile_handle (self : access czmq_library_h.zfile_t) return access stdio_h.FILE  -- /homes/taft/_distrib/include/zfile.h:137
   with Import => True, 
        Convention => C, 
        External_Name => "zfile_handle";

  --  Calculate SHA1 digest for file, using zdigest class.
   function zfile_digest (self : access czmq_library_h.zfile_t) return Interfaces.C.Strings.chars_ptr  -- /homes/taft/_distrib/include/zfile.h:141
   with Import => True, 
        Convention => C, 
        External_Name => "zfile_digest";

  --  Self test of this class.
   procedure zfile_test (verbose : Extensions.bool)  -- /homes/taft/_distrib/include/zfile.h:145
   with Import => True, 
        Convention => C, 
        External_Name => "zfile_test";

  --  *** Draft method, for development use, may change without warning ***
  --  Create new temporary file for writing via tmpfile. File is automatically
  --  deleted on destroy
  --  @end
  --  @interface
  --  These methods are deprecated, and now moved to zsys class.
   function zfile_exists (filename : Interfaces.C.Strings.chars_ptr) return Extensions.bool  -- /homes/taft/_distrib/include/zfile.h:161
   with Import => True, 
        Convention => C, 
        External_Name => "zfile_exists";

   function zfile_size (filename : Interfaces.C.Strings.chars_ptr) return stdio_h.ssize_t  -- /homes/taft/_distrib/include/zfile.h:163
   with Import => True, 
        Convention => C, 
        External_Name => "zfile_size";

   function zfile_mode (filename : Interfaces.C.Strings.chars_ptr) return x86_64_linux_gnu_sys_types_h.mode_t  -- /homes/taft/_distrib/include/zfile.h:165
   with Import => True, 
        Convention => C, 
        External_Name => "zfile_mode";

   function zfile_delete (filename : Interfaces.C.Strings.chars_ptr) return int  -- /homes/taft/_distrib/include/zfile.h:167
   with Import => True, 
        Convention => C, 
        External_Name => "zfile_delete";

   function zfile_stable (filename : Interfaces.C.Strings.chars_ptr) return Extensions.bool  -- /homes/taft/_distrib/include/zfile.h:169
   with Import => True, 
        Convention => C, 
        External_Name => "zfile_stable";

   function zfile_mkdir (pathname : Interfaces.C.Strings.chars_ptr) return int  -- /homes/taft/_distrib/include/zfile.h:171
   with Import => True, 
        Convention => C, 
        External_Name => "zfile_mkdir";

   function zfile_rmdir (pathname : Interfaces.C.Strings.chars_ptr) return int  -- /homes/taft/_distrib/include/zfile.h:173
   with Import => True, 
        Convention => C, 
        External_Name => "zfile_rmdir";

   procedure zfile_mode_private  -- /homes/taft/_distrib/include/zfile.h:175
   with Import => True, 
        Convention => C, 
        External_Name => "zfile_mode_private";

   procedure zfile_mode_default  -- /homes/taft/_distrib/include/zfile.h:177
   with Import => True, 
        Convention => C, 
        External_Name => "zfile_mode_default";

  --  @end
end zfile_h;
