pragma Ada_2012;
pragma Style_Checks (Off);
pragma Warnings ("U");

with Interfaces.C; use Interfaces.C;
with System;
with stddef_h;
with czmq_library_h;
with Interfaces.C.Strings;
with czmq_prelude_h;
with Interfaces.C.Extensions;
with stdio_h;

package zframe_h is

   ZFRAME_MORE_flag : constant := 1;
      --  /homes/taft/_distrib/include/zframe.h:28
   ZFRAME_REUSE_flag : constant := 2;
      --  /homes/taft/_distrib/include/zframe.h:29
   ZFRAME_DONTWAIT_flag : constant := 4;
      --  /homes/taft/_distrib/include/zframe.h:30
   --  arg-macro: procedure zframe_print_to_stream (s, p, F)
   --    zframe_fprint(s,p,F)

  --  =========================================================================
  --    zframe - working with single message frames
  --    Copyright (c) the Contributors as noted in the AUTHORS file.
  --    This file is part of CZMQ, the high-level C binding for 0MQ:
  --    http://czmq.zeromq.org.
  --    This Source Code Form is subject to the terms of the Mozilla Public
  --    License, v. 2.0. If a copy of the MPL was not distributed with this
  --    file, You can obtain one at http://mozilla.org/MPL/2.0/.
  --    ======================================================================
  -- 

  --  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
  --  @warning Please edit the model at "api/zframe.api" to make changes.
  --  @interface
  --  This is a stable class, and may not change except for emergencies. It
  --  is provided in stable builds.
  --  This class has draft methods, which may change over time. They are not
  --  in stable releases, by default. Use --enable-drafts to enable.
  --  Create a new frame. If size is not null, allocates the frame data
  --  to the specified size. If additionally, data is not null, copies
  --  size octets from the specified data into the frame body.
   function zframe_new (data : System.Address; size : stddef_h.size_t) return access czmq_library_h.zframe_t  -- /homes/taft/_distrib/include/zframe.h:36
   with Import => True, 
        Convention => C, 
        External_Name => "zframe_new";

  --  Create an empty (zero-sized) frame
   function zframe_new_empty return access czmq_library_h.zframe_t  -- /homes/taft/_distrib/include/zframe.h:40
   with Import => True, 
        Convention => C, 
        External_Name => "zframe_new_empty";

  --  Create a frame with a specified string content.
   function zframe_from (string : Interfaces.C.Strings.chars_ptr) return access czmq_library_h.zframe_t  -- /homes/taft/_distrib/include/zframe.h:44
   with Import => True, 
        Convention => C, 
        External_Name => "zframe_from";

  --  Receive frame from socket, returns zframe_t object or NULL if the recv
  --  was interrupted. Does a blocking recv, if you want to not block then use
  --  zpoller or zloop.
   function zframe_recv (source : System.Address) return access czmq_library_h.zframe_t  -- /homes/taft/_distrib/include/zframe.h:50
   with Import => True, 
        Convention => C, 
        External_Name => "zframe_recv";

  --  Destroy a frame
   procedure zframe_destroy (self_p : System.Address)  -- /homes/taft/_distrib/include/zframe.h:54
   with Import => True, 
        Convention => C, 
        External_Name => "zframe_destroy";

  --  Send a frame to a socket, destroy frame after sending.
  --  Return -1 on error, 0 on success.
   function zframe_send
     (self_p : System.Address;
      dest : System.Address;
      flags : int) return int  -- /homes/taft/_distrib/include/zframe.h:59
   with Import => True, 
        Convention => C, 
        External_Name => "zframe_send";

  --  Return number of bytes in frame data
   function zframe_size (self : access czmq_library_h.zframe_t) return stddef_h.size_t  -- /homes/taft/_distrib/include/zframe.h:63
   with Import => True, 
        Convention => C, 
        External_Name => "zframe_size";

  --  Return address of frame data
   function zframe_data (self : access czmq_library_h.zframe_t) return access czmq_prelude_h.byte  -- /homes/taft/_distrib/include/zframe.h:67
   with Import => True, 
        Convention => C, 
        External_Name => "zframe_data";

  --  Return meta data property for frame
  --  The caller shall not modify or free the returned value, which shall be
  --  owned by the message.
   function zframe_meta (self : access czmq_library_h.zframe_t; property : Interfaces.C.Strings.chars_ptr) return Interfaces.C.Strings.chars_ptr  -- /homes/taft/_distrib/include/zframe.h:73
   with Import => True, 
        Convention => C, 
        External_Name => "zframe_meta";

  --  Create a new frame that duplicates an existing frame. If frame is null,
  --  or memory was exhausted, returns null.
  --  Caller owns return value and must destroy it when done.
   function zframe_dup (self : access czmq_library_h.zframe_t) return access czmq_library_h.zframe_t  -- /homes/taft/_distrib/include/zframe.h:79
   with Import => True, 
        Convention => C, 
        External_Name => "zframe_dup";

  --  Return frame data encoded as printable hex string, useful for 0MQ UUIDs.
  --  Caller must free string when finished with it.
  --  Caller owns return value and must destroy it when done.
   function zframe_strhex (self : access czmq_library_h.zframe_t) return Interfaces.C.Strings.chars_ptr  -- /homes/taft/_distrib/include/zframe.h:85
   with Import => True, 
        Convention => C, 
        External_Name => "zframe_strhex";

  --  Return frame data copied into freshly allocated string
  --  Caller must free string when finished with it.
  --  Caller owns return value and must destroy it when done.
   function zframe_strdup (self : access czmq_library_h.zframe_t) return Interfaces.C.Strings.chars_ptr  -- /homes/taft/_distrib/include/zframe.h:91
   with Import => True, 
        Convention => C, 
        External_Name => "zframe_strdup";

  --  Return TRUE if frame body is equal to string, excluding terminator
   function zframe_streq (self : access czmq_library_h.zframe_t; string : Interfaces.C.Strings.chars_ptr) return Extensions.bool  -- /homes/taft/_distrib/include/zframe.h:95
   with Import => True, 
        Convention => C, 
        External_Name => "zframe_streq";

  --  Return frame MORE indicator (1 or 0), set when reading frame from socket
  --  or by the zframe_set_more() method
   function zframe_more (self : access czmq_library_h.zframe_t) return int  -- /homes/taft/_distrib/include/zframe.h:100
   with Import => True, 
        Convention => C, 
        External_Name => "zframe_more";

  --  Set frame MORE indicator (1 or 0). Note this is NOT used when sending
  --  frame to socket, you have to specify flag explicitly.
   procedure zframe_set_more (self : access czmq_library_h.zframe_t; more : int)  -- /homes/taft/_distrib/include/zframe.h:105
   with Import => True, 
        Convention => C, 
        External_Name => "zframe_set_more";

  --  Return TRUE if two frames have identical size and data
  --  If either frame is NULL, equality is always false.
   function zframe_eq (self : access czmq_library_h.zframe_t; other : access czmq_library_h.zframe_t) return Extensions.bool  -- /homes/taft/_distrib/include/zframe.h:110
   with Import => True, 
        Convention => C, 
        External_Name => "zframe_eq";

  --  Set new contents for frame
   procedure zframe_reset
     (self : access czmq_library_h.zframe_t;
      data : System.Address;
      size : stddef_h.size_t)  -- /homes/taft/_distrib/include/zframe.h:114
   with Import => True, 
        Convention => C, 
        External_Name => "zframe_reset";

  --  Send message to zsys log sink (may be stdout, or system facility as
  --  configured by zsys_set_logstream). Prefix shows before frame, if not null.
  --  Long messages are truncated.
   procedure zframe_print (self : access czmq_library_h.zframe_t; prefix : Interfaces.C.Strings.chars_ptr)  -- /homes/taft/_distrib/include/zframe.h:120
   with Import => True, 
        Convention => C, 
        External_Name => "zframe_print";

  --  Probe the supplied object, and report if it looks like a zframe_t.
   function zframe_is (self : System.Address) return Extensions.bool  -- /homes/taft/_distrib/include/zframe.h:124
   with Import => True, 
        Convention => C, 
        External_Name => "zframe_is";

  --  Self test of this class.
   procedure zframe_test (verbose : Extensions.bool)  -- /homes/taft/_distrib/include/zframe.h:128
   with Import => True, 
        Convention => C, 
        External_Name => "zframe_test";

  -- Destroy an item
  --  *** Draft method, for development use, may change without warning ***
  --  Create a new frame from memory. Take ownership of the memory and calling the destructor
  --  on destroy.
  --  *** Draft method, for development use, may change without warning ***
  --  Return frame routing ID, if the frame came from a ZMQ_SERVER socket.
  --  Else returns zero.
  --  *** Draft method, for development use, may change without warning ***
  --  Set routing ID on frame. This is used if/when the frame is sent to a
  --  ZMQ_SERVER socket.
  --  *** Draft method, for development use, may change without warning ***
  --  Return frame group of radio-dish pattern.
  --  *** Draft method, for development use, may change without warning ***
  --  Set group on frame. This is used if/when the frame is sent to a
  --  ZMQ_RADIO socket.
  --  Return -1 on error, 0 on success.
  --  *** Draft method, for development use, may change without warning ***
  --  Send message to zsys log sink (may be stdout, or system facility as
  --  configured by zsys_set_logstream). Prefix shows before frame, if not null.
  --  Message length is specified; no truncation unless length is zero.
  --  Backwards compatible with zframe_print when length is zero.
  --  @end
  --  DEPRECATED as poor style -- callers should use zloop or zpoller
  --  Receive a new frame off the socket. Returns newly allocated frame, or
  --  NULL if there was no input waiting, or if the read was interrupted.
   function zframe_recv_nowait (source : System.Address) return access czmq_library_h.zframe_t  -- /homes/taft/_distrib/include/zframe.h:181
   with Import => True, 
        Convention => C, 
        External_Name => "zframe_recv_nowait";

  --  DEPRECATED as inconsistent; breaks principle that logging should all go
  --  to a single destination.
  --  Print contents of the frame to FILE stream.
   procedure zframe_fprint
     (self : access czmq_library_h.zframe_t;
      prefix : Interfaces.C.Strings.chars_ptr;
      the_file : access stdio_h.FILE)  -- /homes/taft/_distrib/include/zframe.h:187
   with Import => True, 
        Convention => C, 
        External_Name => "zframe_fprint";

  --  Deprecated method aliases
end zframe_h;
