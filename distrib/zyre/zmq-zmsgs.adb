--  =========================================================================
--  zmsg - working with multipart messages

--  Copyright (c) the Contributors as noted in the AUTHORS file.
--  This file is part of CZMQ, the high-level C binding for 0MQ:
--  http://czmq.zeromq.org.

--  This Source Code Form is subject to the terms of the Mozilla Public
--  License, v. 2.0. If a copy of the MPL was not distributed with this
--  file, You can obtain one at http://mozilla.org/MPL/2.0/.
--  =========================================================================
--

with Interfaces.C.Strings;
with zmsg_h;
with stddef_h;
package body ZMQ.Zmsgs is

   NYI : exception;

   --  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
   --  @warning Please edit the model at "api/zmsg.api" to make changes.
   --  @interface
   --  This is a stable class, and may not change except for emergencies. It
   --  is provided in stable builds.
   --  This class has draft methods, which may change over time. They are not
   --  in stable releases, by default. Use --enable-drafts to enable.
   --  Create a new empty message object
   --  CZMQ_EXPORT zmsg_t *
   --  zmsg_new (void);

   function Zmsg_New return Zmsg is
   begin
      return Zmsg'(Raw => zmsg_h.zmsg_new);
   end;

   --  Receive message from socket, returns zmsg_t object or NULL if the recv
   --  was interrupted. Does a blocking recv. If you want to not block then use
   --  zloop class or zmsg_recv_nowait or zmq_poll to check for socket input
   --  before receiving.
   --  CZMQ_EXPORT zmsg_t *
   --  zmsg_recv (void *source);

   function Zmsg_Recv (Source : Socket) return Zmsg is
   begin
      return Zmsg'(Raw => zmsg_h.zmsg_recv (Source));
   end;

   --  Load/append an open file into new message, return the message.
   --  Returns NULL if the message could not be loaded.
   --  CZMQ_EXPORT zmsg_t *
   --  zmsg_load (FILE *file);

   function Zmsg_Load (File : String) return Zmsg is
   begin
      return raise NYI;
   end;

   --  Decodes a serialized message frame created by zmsg_encode () and returns
   --  a new zmsg_t object. Returns NULL if the frame was badly formatted or
   --  there was insufficient memory to work.
   --  CZMQ_EXPORT zmsg_t *
   --  zmsg_decode (zframe_t *frame);

   function Zmsg_Decode (Frame : Zframes.Zframe) return Zmsg is
   begin
      return raise NYI;
   end;

   --  Generate a signal message encoding the given status. A signal is a short
   --  message carrying a 1-byte success/failure code (by convention, 0 means
   --  OK). Signals are encoded to be distinguishable from "normal" messages.
   --  CZMQ_EXPORT zmsg_t *
   --  zmsg_new_signal (byte status);

   function Zmsg_New_Signal (Status : Character) return Zmsg is
   begin
      return raise NYI;
   end;

   --  Destroy a message object and all frames it contains
   --  CZMQ_EXPORT void
   --  zmsg_destroy (zmsg_t **self_p);

   procedure Zmsg_Destroy (Self_P : in out Zmsg) is
   begin
      zmsg_h.zmsg_destroy (Self_P.Raw'Address);
   end;

   --  Send message to destination socket, and destroy message after sending
   --  it successfully. If message has no frames, sends nothing but destroys
   --  the message anyhow. Nullifies the caller's reference to the message (as
   --  it is a destructor).
   --  CZMQ_EXPORT int
   --  zmsg_send (zmsg_t **self_p, void *dest);

   function Zmsg_Send (Self_P : in out Zmsg; Dest : Socket)
     return Return_Status is
   begin
      return Return_Status (zmsg_h.zmsg_send (Self_P.Raw'Address, Dest));
   end;

   --  Send message to destination socket as part of a multipart sequence, and
   --  destroy the message after sending it successfully. Note that after a
   --  zmsg_sendm, you must call zmsg_send or another method that sends a final
   --  message part. If the message has no frames, sends nothing but destroys
   --  the message anyhow. Nullifies the caller's reference to the message (as
   --  it is a destructor).
   --  CZMQ_EXPORT int
   --  zmsg_sendm (zmsg_t **self_p, void *dest);

   function Zmsg_Sendm (Self_P : in out Zmsg; Dest : Socket)
     return Return_Status is
   begin
      return raise NYI;
   end;

   --  Return size of message, i.e. number of frames (0 or more).
   --  CZMQ_EXPORT size_t
   --  zmsg_size (zmsg_t *self);

   function Zmsg_Size (Self : Zmsg) return Long_Integer is
   begin
      return Long_Integer (zmsg_h.zmsg_size (Self.Raw));
   end;

   --  Return total size of all frames in message.
   --  CZMQ_EXPORT size_t
   --  zmsg_content_size (zmsg_t *self);

   function Zmsg_Content_Size (Self : Zmsg) return Long_Integer is
   begin
      return raise NYI;
   end;

   --  Push frame to the front of the message, i.e. before all other frames.
   --  Message takes ownership of frame, will destroy it when message is sent.
   --  Returns 0 on success, -1 on error. Deprecates zmsg_push, which did not
   --  nullify the caller's frame reference.
   --  CZMQ_EXPORT int
   --  zmsg_prepend (zmsg_t *self, zframe_t **frame_p);

   function Zmsg_Prepend (Self : Zmsg; Frame_P : in out Zframes.Zframe)
     return Return_Status is
   begin
      return raise NYI;
   end;

   --  Add frame to the end of the message, i.e. after all other frames.
   --  Message takes ownership of frame, will destroy it when message is sent.
   --  Returns 0 on success. Deprecates zmsg_add, which did not nullify the
   --  caller's frame reference.
   --  CZMQ_EXPORT int
   --  zmsg_append (zmsg_t *self, zframe_t **frame_p);

   function Zmsg_Append (Self : Zmsg; Frame_P : in out Zframes.Zframe)
     return Return_Status is
   begin
      return Return_Status
        (zmsg_h.zmsg_append (Self.Raw, Frame_P.GetImplAddr));
   end;

   --  Remove first frame from message, if any. Returns frame, or NULL.
   --  Caller owns return value and must destroy it when done.
   --  CZMQ_EXPORT zframe_t *
   --  zmsg_pop (zmsg_t *self);

   function Zmsg_Pop (Self : Zmsg) return Zframes.Zframe is
   begin
      return Result : ZFrames.Zframe do
         Result.GetImplAcc.all := zmsg_h.zmsg_pop (Self.Raw);
      end return;
   end;

   --  Push block of memory to front of message, as a new frame.
   --  Returns 0 on success, -1 on error.
   --  CZMQ_EXPORT int
   --  zmsg_pushmem (zmsg_t *self, const void *data, size_t size);

   function Zmsg_Pushmem
     (Self : Zmsg; Data : System.Address; Size : Long_Integer)
     return Return_Status is
   begin
      return raise NYI;
   end;

   --  Add block of memory to the end of the message, as a new frame.
   --  Returns 0 on success, -1 on error.
   --  CZMQ_EXPORT int
   --  zmsg_addmem (zmsg_t *self, const void *data, size_t size);

   function Zmsg_Addmem
     (Self : Zmsg; Data : System.Address; Size : Long_Integer)
     return Return_Status is
   begin
      return Return_Status
        (zmsg_h.zmsg_addmem (Self.Raw, Data, stddef_h.size_t (Size)));
   end;

   --  Push string as new frame to front of message.
   --  Returns 0 on success, -1 on error.
   --  CZMQ_EXPORT int
   --  zmsg_pushstr (zmsg_t *self, const char *string);

   function Zmsg_Pushstr (Self : Zmsg; Str : String)
     return Return_Status is
   begin
      return raise NYI;
   end;

   --  Push string as new frame to end of message.
   --  Returns 0 on success, -1 on error.
   --  CZMQ_EXPORT int
   --  zmsg_addstr (zmsg_t *self, const char *string);

   function Zmsg_Addstr (Self : Zmsg; Str : String)
     return Return_Status is
      use Interfaces.C.Strings;
      c_str : chars_ptr := New_String (Str);
   begin
      return Result : constant Return_Status := Return_Status
        (zmsg_h.zmsg_addstr (Self.Raw, c_str))
      do
         Free (c_str);
      end return;
   end;

   --  Push formatted string as new frame to front of message.
   --  Returns 0 on success, -1 on error.
   --  CZMQ_EXPORT int
   --  zmsg_pushstrf (zmsg_t *self, const char *format, ...) CHECK_PRINTF (2);

   --  Push formatted string as new frame to end of message.
   --  Returns 0 on success, -1 on error.
   --  CZMQ_EXPORT int
   --  zmsg_addstrf (zmsg_t *self, const char *format, ...) CHECK_PRINTF (2);

   --  Pop frame off front of message, return as fresh string. If there were
   --  no more frames in the message, returns NULL.
   --  Caller owns return value and must destroy it when done.
   --  CZMQ_EXPORT char *
   --  zmsg_popstr (zmsg_t *self);

   function Zmsg_Popstr (Self : Zmsg) return String is
      use Interfaces.C.Strings;
   begin
      return Value (zmsg_h.zmsg_popstr (Self.Raw));
   end;

   --  Push encoded message as a new frame. Message takes ownership of
   --  submessage, so the original is destroyed in this call. Returns 0 on
   --  success, -1 on error.
   --  CZMQ_EXPORT int
   --  zmsg_addmsg (zmsg_t *self, zmsg_t **msg_p);

   function Zmsg_Addmsg (Self : Zmsg; Msg_P : in out Zmsg)
     return Return_Status is
   begin
      return raise NYI;
   end;

   --  Remove first submessage from message, if any. Returns zmsg_t, or NULL if
   --  decoding was not successful.
   --  Caller owns return value and must destroy it when done.
   --  CZMQ_EXPORT zmsg_t *
   --  zmsg_popmsg (zmsg_t *self);

   function Zmsg_Popmsg (Self : Zmsg) return Zmsg is
   begin
      return raise NYI;
   end;

   --  Remove specified frame from list, if present. Does not destroy frame.
   --  CZMQ_EXPORT void
   --  zmsg_remove (zmsg_t *self, zframe_t *frame);

   procedure Zmsg_Remove (Self : Zmsg; Frame : Zframes.Zframe) is
   begin
      raise NYI;
   end;

   --  Set cursor to first frame in message. Returns frame, or NULL, if the
   --  message is empty. Use this to navigate the frames as a list.
   --  CZMQ_EXPORT zframe_t *
   --  zmsg_first (zmsg_t *self);

   function Zmsg_First (Self : Zmsg) return Zframes.Zframe is
   begin
      return raise NYI;
   end;

   --  Return the next frame. If there are no more frames, returns NULL.
   --  To move to the first frame call zmsg_first(). Advances the cursor.
   --  CZMQ_EXPORT zframe_t *
   --  zmsg_next (zmsg_t *self);

   function Zmsg_Next (Self : Zmsg) return Zframes.Zframe is
   begin
      return raise NYI;
   end;

   --  Return the last frame. If there are no frames, returns NULL.
   --  CZMQ_EXPORT zframe_t *
   --  zmsg_last (zmsg_t *self);

   function Zmsg_Last (Self : Zmsg) return Zframes.Zframe is
   begin
      return raise NYI;
   end;

   --  Save message to an open file, return 0 if OK, else -1. The message is
   --  saved as a series of frames, each with length and data. Note that the
   --  file is NOT guaranteed to be portable between operating systems, not
   --  versions of CZMQ. The file format is at present undocumented and liable
   --  to arbitrary change.
   --  CZMQ_EXPORT int
   --  zmsg_save (zmsg_t *self, FILE *file);

   --  Serialize multipart message to a single message frame. Use this method
   --  to send structured messages across transports that do not support
   --  multipart data. Allocates and returns a new frame containing the
   --  serialized message. To decode a serialized message frame, use
   --  zmsg_decode ().
   --  Caller owns return value and must destroy it when done.
   --  CZMQ_EXPORT zframe_t *
   --  zmsg_encode (zmsg_t *self);

   --  Create copy of message, as new message object. Returns a fresh zmsg_t
   --  object. If message is null, or memory was exhausted, returns null.
   --  Caller owns return value and must destroy it when done.
   --  CZMQ_EXPORT zmsg_t *
   --  zmsg_dup (zmsg_t *self);

   function Zmsg_Dup (Self : Zmsg) return Zmsg is
   begin
      return raise NYI;
   end;

   --  Send message to zsys log sink (may be stdout, or system facility as
   --  configured by zsys_set_logstream).
   --  Long messages are truncated.
   --  CZMQ_EXPORT void
   --  zmsg_print (zmsg_t *self);

   --  Return true if the two messages have the same number of frames and each
   --  frame in the first message is identical to corresponding frame in the
   --  other message. As with zframe_eq, return false if either msg is NULL.
   --  CZMQ_EXPORT bool
   --  zmsg_eq (zmsg_t *self, zmsg_t *other);

   --  Return signal value, 0 or greater, if message is a signal, -1 if not.
   --  CZMQ_EXPORT int
   --  zmsg_signal (zmsg_t *self);

   --  Probe the supplied object, and report if it looks like a zmsg_t.
   --  CZMQ_EXPORT bool
   --  zmsg_is (void *self);

   --  Self test of this class.
   --  CZMQ_EXPORT void
   --  zmsg_test (bool verbose);

end ZMQ.Zmsgs;
