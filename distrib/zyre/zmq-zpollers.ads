--  =========================================================================
--  zpoller - trivial socket poller class

--  Copyright (c) the Contributors as noted in the AUTHORS file.
--  This file is part of CZMQ, the high-level C binding for 0MQ:
--  http://czmq.zeromq.org.

--  This Source Code Form is subject to the terms of the Mozilla Public
--  License, v. 2.0. If a copy of the MPL was not distributed with this
--  file, You can obtain one at http://mozilla.org/MPL/2.0/.
--  =========================================================================
--


--  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
--  @warning Please edit the model at "api/zpoller.api" to make changes.
--  @interface
--  This is a stable class, and may not change except for emergencies. It
--  is provided in stable builds.

with System;
private with czmq_library_h;
package ZMQ.Zpollers is

   type Zpoller is limited private;

   subtype Socket is System.Address;
   subtype Return_Status is Integer range -1 .. 0;

   --  Create new poller, specifying zero or more readers. The list of
   --  readers ends in a NULL. Each reader can be a zsock_t instance, a
   --  zactor_t instance, a libzmq socket (void *), or a file handle.
   --  CZMQ_EXPORT zpoller_t *
   --  zpoller_new (void *reader, ...);
   function Zpoller_New return Zpoller;
   function Zpoller_New (Reader : Socket) return Zpoller;
   function Zpoller_New (Reader, Reader2 : Socket) return Zpoller;
   function Zpoller_New (Reader, Reader2, Reader3 : Socket) return Zpoller;
   function Zpoller_New (Reader, Reader2, Reader3, Reader4 : Socket)
     return Zpoller;

   --  Destroy a poller
   --  CZMQ_EXPORT void
   --  zpoller_destroy (zpoller_t **self_p);
   procedure Zpoller_Destroy (Self_P : in out Zpoller);

   --  Add a reader to be polled. Returns 0 if OK, -1 if fails. The reader may
   --  be a libzmq void * socket, a zsock_t instance, a zactor_t instance or a
   --  file handle.
   --  CZMQ_EXPORT int
   --  zpoller_add (zpoller_t *self, void *reader);
   function Zpoller_Add (Self : Zpoller; Reader : Socket)
     return Return_Status;

   --  Remove a reader from poller; returns 0 if OK, -1 on failure. The reader
   --  must have been passed during construction, or in an zpoller_add () call.
   --  CZMQ_EXPORT int
   --  zpoller_remove (zpoller_t *self, void *reader);
   function Zpoller_Remove (Self : Zpoller; Reader : Socket)
     return Return_Status;

   --  By default the poller stops if the process receives a SIGINT or SIGTERM
   --  signal. This makes it impossible to shut-down msg-based architectures
   --  like zactors. This method lets you switch off break handling.
   --  The default nonstop setting is off (false).
   --  CZMQ_EXPORT void
   --  zpoller_set_nonstop (zpoller_t *self, bool nonstop);
   procedure Zpoller_Set_Nonstop (Self : Zpoller; Nonstop : Boolean);

   --  Poll the registered readers for I/O, return first reader that has input.
   --  The reader will be a libzmq void * socket, a zsock_t, a zactor_t
   --  instance or a file handle as specified in zpoller_new/zpoller_add. The
   --  timeout should be zero or greater, or -1 to wait indefinitely. Socket
   --  priority is defined by their order in the poll list. If you need a
   --  balanced poll, use the low level zmq_poll method directly. If the poll
   --  call was interrupted (SIGINT), or the ZMQ context was destroyed, or the
   --  timeout expired, returns NULL. You can test the actual exit condition by
   --  calling zpoller_expired () and zpoller_terminated (). The timeout is in
   --  msec.
   --  CZMQ_EXPORT void *
   --  zpoller_wait (zpoller_t *self, int timeout);
   function Zpoller_Wait (Self : Zpoller; Timeout : Integer)
     return Socket;

   --  Return true if the last zpoller_wait () call ended because the timeout
   --  expired, without any error.
   --  CZMQ_EXPORT bool
   --  zpoller_expired (zpoller_t *self);
   function Zpoller_Expired (Self : Zpoller) return Boolean;

   --  Return true if the last zpoller_wait () call ended because the process
   --  was interrupted, or the parent context was destroyed.
   --  CZMQ_EXPORT bool
   --  zpoller_terminated (zpoller_t *self);
   function Zpoller_Terminated (Self : Zpoller) return Boolean;

   --  Self test of this class.
   --  CZMQ_EXPORT void
   --  zpoller_test (bool verbose);

private
   type Zpoller is record
      Raw : access czmq_library_h.zpoller_t;
   end record;
end ZMQ.Zpollers;
--  @end
