//  Streaming in ParaSail is a three layer cake:
//    Byte Stream is the lowest layer
//    Value Stream is the middle layer
//    Object Stream is the top layer
//
//  This is the Object stream layer.  See byte_stream.psl for
//  an overview of the purpose of each layer.
interface PSL::Core::Output_Object_Stream<> is

   func Create(ref var Output_Value_Stream+) -> Output_Object_Stream;

   func Reached_End(Output_Object_Stream) -> Boolean;

   func Write_Obj (var Output_Object_Stream; Obj : Obj_Type is Assignable<>)
     is import (#write_obj);
   func Write_Optional_Obj
      (var Output_Object_Stream; Obj : optional Obj_Type is Assignable<>)
     is import (#write_optional_obj);

   func Write_Default
      (var Output_Object_Stream; Obj : Obj_Type is Assignable<>)
     is import (#write_default);
   func Write_Optional_Default
      (var Output_Object_Stream; Obj : optional Obj_Type is Assignable<>)
     is import (#write_optional_default);

end interface PSL::Core::Output_Object_Stream;

class PSL::Core::Output_Object_Stream is
   ref var Val_Str : Output_Value_Stream+;

 exports

   func Create(ref var Output_Value_Stream+) -> Output_Object_Stream is
     ((Val_Str => Output_Value_Stream));

   func Reached_End(Output_Object_Stream) -> Boolean is
     ((Output_Object_Stream.Val_Str.Reached_End()));

end class PSL::Core::Output_Object_Stream;

interface PSL::Core::Input_Object_Stream<> is

   func Create(ref var Input_Value_Stream+) -> Input_Object_Stream;

   func Reached_End(Input_Object_Stream) -> Boolean;

   func Read_Obj (var Input_Object_Stream; var Obj : Obj_Type is Assignable<>)
     is import (#read_obj);
   func Read_Optional_Obj
      (var Input_Object_Stream; var Obj : optional Obj_Type is Assignable<>)
     is import (#read_optional_obj);

   func Read_Default
      (var Input_Object_Stream; var Obj : Obj_Type is Assignable<>)
     is import (#read_default);
   func Read_Optional_Default
      (var Input_Object_Stream; var Obj : optional Obj_Type is Assignable<>)
     is import (#read_optional_default);

end interface PSL::Core::Input_Object_Stream;

class PSL::Core::Input_Object_Stream is
   ref var Val_Str : Input_Value_Stream+;

 exports

   func Create(ref var Input_Value_Stream+) -> Input_Object_Stream is
     ((Val_Str => Input_Value_Stream));

   func Reached_End(Input_Object_Stream) -> Boolean is
     ((Input_Object_Stream.Val_Str.Reached_End()));

end class PSL::Core::Input_Object_Stream;

abstract interface PSL::Core::Custom_Streaming<> is
   //  Implement this interface to provide type-specific
   //  streaming operations.
   op "write" (var Output_Object_Stream;
               Obj : Custom_Streaming;
               Is_Optional : Boolean);
   op "read"  (var Input_Object_Stream;
               var Obj : Custom_Streaming;
               Is_Optional : Boolean);
end interface PSL::Core::Custom_Streaming;

func PSL::Test::Test_Object_Stream() is

   var Buf : Byte_Stream_Buffer := Create (Size => 10000);

   ref var OVS : Binary_Output_Value_Stream => Create(Buf);
   ref var IVS : Binary_Input_Value_Stream => Create(Buf);

   ref var OOS : Output_Object_Stream => Create(OVS);
   ref var IOS : Input_Object_Stream => Create(IVS);

   Println ("Testing Read/Write_Optional_Object");

   
   for I in 1 .. 7 forward loop
      if I == 3 then
         Write_Optional_Obj (OOS, Univ_Integer::(null));
      else
         Write_Optional_Obj (OOS, I**3);
      end if;
        
      Println ("Bytes_To_Write = `(Buf.Bytes_To_Write())");
   end loop;

   for I in 1 .. 7 forward loop
      Println ("Bytes_To_Read = `(Buf.Bytes_To_Read())");
      var Z : Univ_Integer;
      Read_Optional_Obj (IOS, Z);
      if I == 3 then
         if Z not null then
            Println ("Expected null but found `(Z)");
         end if;
      else
         if Z != I**3 then
            Println ("Expected `(I**3) but found `(Z)");
         end if;
      end if;
      Println
        ("after read, Bytes_To_Write = `(Buf.Bytes_To_Write())");
   end loop;
   
   Println ("Testing write sets rather than integers");

   type Int_Set is Set<Integer>;

   func Img(II : Int_Set) -> Univ_String is
      return "[" | (for (I : Integer in II; Sep := "" then ",") =>
                 <""> | Sep | To_String (I)) | "]";
   end func Img;

   for I in 1 .. 7 forward loop
      if I == 3 then
         Write_Optional_Obj (OOS, Int_Set::(null));
      else
         var Test_Set : Int_Set := [for J in 1 .. I => J];

         Write_Optional_Obj (OOS, Test_Set);
      end if;
        
      Println ("Bytes_To_Write = `(Buf.Bytes_To_Write())");
   end loop;

   for I in 1 .. 7 forward loop
      Println ("Bytes_To_Read = `(Buf.Bytes_To_Read())");
      var Z : Int_Set;
      Read_Optional_Obj (IOS, Z);
      if I == 3 then
         if Z not null then
            Println ("Expected null but found `(Img(Z))");
         end if;
      else
         const Expected : Int_Set := [for J in 1 .. I => J];

         if Z != Expected then
            Println ("Expected `(Img(Expected)) but found `(Img(Z))");
         end if;
      end if;
      Println
        ("after read, Bytes_To_Write = `(Buf.Bytes_To_Write())");
   end loop;
   Println ("All done");
end func PSL::Test::Test_Object_Stream;
