// ParaSail Prototype Standard Library

// Copyright (C) 2011-2014, AdaCore, New York, NY
// This program is provided "as is" with no warranty.
// Report errors at http://groups.google.com/group/parasail-programming-language

interface PSL<> is
end interface PSL

interface PSL::Core<> is
end interface PSL::Core

interface PSL::Containers<> is
end interface PSL::Containers

interface PSL::Test<> is
end interface PSL::Test

abstract interface PSL::Core::Any<> is
end interface PSL::Core::Any

abstract interface PSL::Core::Assignable<> is
end interface PSL::Core::Assignable

interface PSL::Core::Boolean<> is
    op "from_univ"(Lit : Univ_Enumeration) 
      {Lit in [#false | #true]}
      -> Boolean is import(#bool_from_univ)

    op "to_univ"(Val : Boolean) -> Univ_Enumeration 
      is import(#bool_to_univ)

    op "=?"(Left, Right : Boolean) -> Ordering
      is import("=?")
	// NOTE: #true > #false

    op "not"(Boolean) -> Boolean is import("not")
    op "and"(Left, Right : Boolean) -> Boolean is import("and")
    op "or"(Left, Right : Boolean) -> Boolean is import("or")
    op "xor"(Left, Right : Boolean) -> Boolean is import("xor")

    op "and="(var Left : Boolean; Right : Boolean)
    op "or="(var Left : Boolean; Right : Boolean)
    op "xor="(var Left : Boolean; Right : Boolean)

    func Hash(Val : Boolean) -> Univ_Integer
      is import(#identity)

    // For Imageable
    func To_String(Val : optional Boolean) -> Univ_String
    func From_String(Str : Univ_String) -> optional Boolean

end interface PSL::Core::Boolean

interface PSL::Containers::Set<Element_Type is Hashable<>> is
  // A hashed-set module
    op "[]"() -> Set

    func Singleton(Elem : Element_Type) -> Set

    op "|"(Left, Right : Element_Type) -> Set
    op "|"(Left : Set; Right : Element_Type) -> Set
    op "|"(Left : Element_Type; Right : Set) -> Set
    op "|"(Left : Set; Right : Set) -> Set

    op "|="(var Left : Set; Right : Set)

    op "|="(var Left : Set; Right : Element_Type)
	// Add element to Set.

    op "<|="(var Left : Set; var Right : optional Element_Type)
	// Move element into Set.

    op "<|="(var Left : Set; var Right : Set)
	// Move all elements of Right into Left, leaving Right empty.

    op "in"(Left : Element_Type; Right : Set) -> Boolean<>

    op "=?"(Left, Right : Set) -> Ordering
	// Return #equal if Left and Right have the same elements
	// Return #less if Left is a proper subset of Right
	// Return #greater if Left is a proper superset of Right
	// Return #unordered otherwise

    op "or"(Left, Right : Set) -> Set is "|"  // Union
    op "or="(var Left : Set; Right : Set) is "|="

    op "+"(Left, Right : Set) -> Set is "|"   // Union
    op "+="(var Left : Set; Right : Set) is "|="
    op "+="(var Left : Set; Right : Element_Type) is "|="   // aka Include

    op "and"(Left, Right : Set) -> Set
	// Intersection
    op "and="(var Left : Set; Right : Set)

    op "xor"(Left, Right : Set) -> Set
	// Symmetric difference
    op "xor="(var Left : Set; Right : Set)

    op "-"(Left, Right : Set) -> Set
	// Set difference

    op "-="(var Left : Set; Right : Set)
	// Compute Set difference

    op "-="(var S : Set; Elem : Element_Type)   // aka Exclude
	// Remove one element, if present

    func Count(S : Set) -> Univ_Integer

    op "magnitude"(Set) -> Univ_Integer is Count

    func Is_Empty(S : Set) -> Boolean<>

    func Remove_Any(var S : Set) -> optional Element_Type
      // Remove and return an arbitrary element of the Set S

    func Dump_Statistics(S : Set)
      // A debugging routine to show bucket sizes of Set

end interface PSL::Containers::Set

interface PSL::Core::Univ_Enumeration<> is
    op "=?"(Left, Right : Univ_Enumeration) -> Ordering 
      is import(#unordered_compare)

    func To_String(Val : Univ_Enumeration) -> Univ_String
      is import(#identity)

    func From_String(Str : Univ_String) -> optional Univ_Enumeration
      is import(#identity)

    func Print(Val : Univ_Enumeration) 
      is import(#print_univ_enum)
    func Println(Val : Univ_Enumeration) 
      is (Println(To_String(Val)))

    func Hash(Val : Univ_Enumeration) -> Univ_Integer
      is import(#identity)

    op "in"(Left : Univ_Enumeration; Right : Set<Univ_Enumeration>) 
      -> Boolean<>
      is in Set<Univ_Enumeration>

end interface PSL::Core::Univ_Enumeration

abstract interface PSL::Core::Optional<> is
    op "null"() -> Optional
    op "is null"(Optional) -> Boolean
end interface PSL::Core::Optional

interface PSL::Core::Ordering<> is
  // Enumeration type used to represent value of "=?" operator
    op "from_univ"(Lit : Univ_Enumeration) 
      {Lit in [#less | #equal | #greater | #unordered]}
      -> Ordering is import(#ordering_from_univ)

    op "to_univ"(Val : Ordering) -> Univ_Enumeration 
      is import(#ordering_to_univ)

    op "to_bool"(Ord : Ordering; Mask : Univ_Integer) -> Boolean 
      is import(#ordering_to_bool)

    op "=?"(Left, Right : Ordering) -> Ordering is import("=?")

    func Hash(Val : Ordering) -> Univ_Integer
      is import(#identity)

    // For Imageable
    func To_String(Val : Ordering) -> Univ_String
    func From_String(Str : Univ_String) -> optional Ordering

    // Operators for Countable
    op "+"(Left : Univ_Integer; Right : Ordering) -> Ordering 
      is import("+")
    op "+"(Left : Ordering; Right : Univ_Integer) -> Ordering 
      is import("+")
    op "-"(Left, Right : Ordering) -> Univ_Integer 
      is import("-")
    op "-"(Left : Ordering; Right : Univ_Integer) -> Ordering 
      is import("-")

    func Min(Left, Right : optional Ordering) -> optional Ordering
      is import(#min)
    func Max(Left, Right : optional Ordering) -> optional Ordering
      is import(#max)

    // TBD: These should be properties some day (e.g. Ordering#first).
    func First()->Ordering
    func Last()->Ordering

    op ".."(Left, Right : Ordering) -> Countable_Set<Ordering>
    op "<.."(Left, Right : Ordering) -> Countable_Set<Ordering>
    op "..<"(Left, Right : Ordering) -> Countable_Set<Ordering>
    op "<..<"(Left, Right : Ordering) -> Countable_Set<Ordering>
    op "|"(Left, Right : Ordering) -> Countable_Set<Ordering>
end interface PSL::Core::Ordering

class PSL::Core::Ordering is
    type Ordering_Set is Countable_Set<Ordering>

  exports
    func First()->Ordering is
	return #less
    end func First

    func Last()->Ordering is
	return #unordered
    end func Last

    func To_String(Val : Ordering) -> Univ_String is
	case Val of
	  [#less] =>
	    return "#less"
	  [#equal] =>
	    return "#equal"
	  [#greater] =>
	    return "#greater"
	  [#unordered] =>
	    return "#unordered"
	end case
    end func To_String

    func From_String(Str : Univ_String) -> optional Ordering is
	case Str of
	  ["#less"] =>
	    return #less
	  ["#equal"] =>
	    return #equal
	  ["#greater"] =>
	    return #greater
	  ["#unordered"] =>
	    return #unordered
	  [..] =>
	    return null
	end case
    end func From_String

    // NOTE: For implementation reasons, we put these here rather than defining
    //       them in the interface using "is in Countable_Set<Ordering>"
    op ".."(Left, Right : Ordering) -> Countable_Set<Ordering> is
	return Ordering_Set::".."(Left, Right)
    end op ".."

    op "<.."(Left, Right : Ordering) -> Countable_Set<Ordering> is
        return Ordering_Set::"<.."(Left, Right)
    end op "<.."

    op "..<"(Left, Right : Ordering) -> Countable_Set<Ordering> is
        return Ordering_Set::"..<"(Left, Right)
    end op "..<"
    op "<..<"(Left, Right : Ordering) -> Countable_Set<Ordering> is
        return Ordering_Set::"<..<"(Left, Right)
    end op "<..<"

    op "|"(Left, Right : Ordering) -> Countable_Set<Ordering> is
	return Ordering_Set::"|"(Left, Right)
    end op "|"
end class PSL::Core::Ordering

abstract interface PSL::Core::Comparable<> implements Assignable<> is
    op "=?"(Left, Right : Comparable) -> Ordering
end interface PSL::Core::Comparable

abstract interface PSL::Core::Ordered<> implements Comparable<> is
  // The "=?" operator on Ordered types never returns #unordered
  // They also provide a Min and Max operator.

  // Note that Min and Max may be given null operands.
  // They each return null if both operands are null, and return the
  // non-null operand if only one of the operands is null.
  // This allows null to be used as the initial value when computing
  // the "Max" or "Min" of a possibly-empty sequence, rather than
  // having to start with the equivalent of negative or positive infinity.

    type Full_Ordering is Ordering
      // {Full_Ordering in #less | #equal | #greater}

    op "=?"(Left, Right : Ordered) -> Full_Ordering

    func Min(Left, Right : optional Ordered) -> optional Ordered
    func Max(Left, Right : optional Ordered) -> optional Ordered
end interface PSL::Core::Ordered

abstract interface PSL::Core::Hashable<> implements Comparable<> is
    // Types which aren't ordered nevertheless are often
    // hashable, which makes it possible to create an efficient
    // set or map using them as the index type.
    op "=?"(Left, Right : Hashable) -> Ordering
    func Hash(Val : Hashable) -> Univ_Integer
end interface PSL::Core::Hashable

interface PSL::Containers::Countable_Set<Element_Type is Countable<>> is
    op "[]"() -> Countable_Set

    func Singleton(Elem : Element_Type) -> Countable_Set

    op ".."(Left, Right : Element_Type) -> Countable_Set
    op "<.."(Left, Right : Element_Type) -> Countable_Set
    op "..<"(Left, Right : Element_Type) -> Countable_Set
    op "<..<"(Left, Right : Element_Type) -> Countable_Set

    op "|"(Left, Right : Element_Type) -> Countable_Set
    op "|"(Left : Countable_Set; Right : Element_Type) -> Countable_Set
    op "|"(Left : Element_Type; Right : Countable_Set) -> Countable_Set
    op "|"(Left : Countable_Set; Right : Countable_Set) -> Countable_Set

    op "|="(var Left : Countable_Set; Right : Element_Type)
    op "|="(var Left : Countable_Set; Right : Countable_Set)

    op "<|="(var Left : Countable_Set; var Right : optional Element_Type)
        // Move element into set, leaving Right null afterward.

    op "<|="(var Left : Countable_Set; var Right : Countable_Set)
	// Move all elements of Right into Left, leaving Right empty.

    op "-"(Left, Right : Countable_Set) -> Countable_Set
      // Set difference
    op "-"(Left : Countable_Set; Right : Element_Type) -> Countable_Set
      // Remove one element
    op "-="(var S : Countable_Set; Elem : Element_Type)
      // Remove the given element from the set, if present
    op "-="(var Left : Countable_Set; Right : Countable_Set)
      // Remove all elements of Right from Left, if present

    op "or"(Left : Countable_Set; Right : Countable_Set) 
      -> Countable_Set is "|"   // union
    op "or="(var Left : Countable_Set; Right : Countable_Set) is "|="

    op "+"(Left : Countable_Set; Right : Countable_Set) 
      -> Countable_Set is "|"   // Union
    op "+="(var Left : Countable_Set; Right : Countable_Set) is "|="
    op "+="(var Left : Countable_Set; Right : Element_Type) is "|="
   
    op "and"(Left, Right : Countable_Set) -> Countable_Set
	// Intersection
    op "and="(var Left : Countable_Set; Right : Countable_Set)

    op "xor"(Left, Right : Countable_Set) -> Countable_Set
	// Symmetric difference
    op "xor="(var Left : Countable_Set; Right : Countable_Set)

    op "in"(Left : Element_Type; Right : Countable_Set) -> Boolean

    op "=?"(Left, Right : Countable_Set) -> Ordering
	// Return #equal if Left and Right have the same elements
	// Return #less if Left is a proper subset of Right
	// Return #greater if Left is a proper superset of Right
	// Return #unordered otherwise

    func Count(S : Countable_Set) -> Univ_Integer

    op "magnitude"(Countable_Set) -> Univ_Integer is Count

    func Is_Empty(S : Countable_Set) -> Boolean

    func First(S : Countable_Set) -> optional Element_Type
    func Last(S : Countable_Set) -> optional Element_Type

    op "indexing"(S : Countable_Set; Index : Univ_Integer)
      -> optional Element_Type
         //  Return "Index"th element of set S, counting 1 .. Count(S)

    op "slicing"(S : Countable_Set; 
      Index_Set : Countable_Range<Univ_Integer>) -> Countable_Set
         //  Return subset of set S, elements S[Index_Set.First] through
         //  S[Index_Set.Last], counting 1 .. Count(S)

    op "/"(Set : Countable_Set; Num_Pieces : Univ_Integer)
      -> Vector<Countable_Set>
        // Divide a set into a vector of sets, each of similar size

    func Remove_First(var S : Countable_Set) -> optional Element_Type
	// Remove first element of set (lowest value)

    func Remove_Last(var S : Countable_Set) -> optional Element_Type
	// Remove last element of set (highest value)

    func Remove_Any(var S : Countable_Set) -> optional Element_Type
	// Remove an arbitrary element of set

end interface PSL::Containers::Countable_Set

abstract interface PSL::Core::Countable<> implements Ordered<> is
    op "+"(Left : Countable; Right : Univ_Integer) -> Countable
    op "+"(Left : Univ_Integer; Right : Countable) -> Countable

    op "-"(Left : Countable; Right : Univ_Integer) -> Countable
    op "-"(Left, Right : Countable) -> Univ_Integer

    op "=?"(Left, Right : Countable) -> Ordered::Full_Ordering

    func First() -> Countable

    func Last() -> Countable

    func Min(Left, Right : optional Countable) -> optional Countable
    func Max(Left, Right : optional Countable) -> optional Countable

    func Hash(Val : Countable) -> Univ_Integer

    op ".."(Left, Right : Countable) -> Countable_Set<Countable>
      is in Countable_Set<Countable>
    op "<.."(Left, Right : Countable) -> Countable_Set<Countable>
      is in Countable_Set<Countable>
    op "..<"(Left, Right : Countable) -> Countable_Set<Countable>
      is in Countable_Set<Countable>
    op "<..<"(Left, Right : Countable) -> Countable_Set<Countable>
      is in Countable_Set<Countable>
    op "|"(Left, Right : Countable) -> Countable_Set<Countable>
      is in Countable_Set<Countable>
end interface PSL::Core::Countable
    
interface PSL::Core::Univ_Integer<> is
    op "+"(Right : Univ_Integer) -> Univ_Integer
      is import(#identity)

    op "-"(Right : Univ_Integer) -> Univ_Integer
      is import(#negate)

    op "abs"(Right : Univ_Integer) -> Univ_Integer
      is import("abs")

    op "magnitude"(Univ_Integer) -> Univ_Integer is "abs"

    op "+"(Left, Right : Univ_Integer) -> Result : Univ_Integer 
      is import("+")

    op "-"(Left, Right : Univ_Integer) -> Result : Univ_Integer
      is import("-")

    op "*"(Left, Right : Univ_Integer) -> Result : Univ_Integer 
      is import("*")

    op "/"(Left, Right : Univ_Integer) -> Result : Univ_Integer
      is import("/")

    op "**"(Left, Right : Univ_Integer) -> Univ_Integer
      is import("**")

    op "mod"(Left, Right : Univ_Integer) -> Univ_Integer
      is import("mod")

    op "rem"(Left, Right : Univ_Integer) -> Univ_Integer
      is import("rem")


    op "+="(var Left : Univ_Integer; Right : Univ_Integer) 
      is import("+=")

    op "-="(var Left : Univ_Integer; Right : Univ_Integer) 
      is import("-=")

    op "*="(var Left : Univ_Integer; Right : Univ_Integer) 
      is import("*=")

    op "/="(var Left : Univ_Integer; Right : Univ_Integer) 
      is import("/=")

    op "**="(var Left : Univ_Integer; Right : Univ_Integer) 
      is import("**=")


    op "=?"(Left, Right : Univ_Integer) -> Ordering
      is import("=?")

    op ">>"(Univ_Integer; Univ_Integer) -> Univ_Integer is import(">>")

    op "<<"(Univ_Integer; Univ_Integer) -> Univ_Integer is import("<<")

    func Min(Left, Right : optional Univ_Integer) -> optional Univ_Integer
      is import(#min)
    func Max(Left, Right : optional Univ_Integer) -> optional Univ_Integer
      is import(#max)

    func Hash(Val : Univ_Integer) -> Univ_Integer
      is import(#identity)

    func To_String(Val : Univ_Integer) -> Univ_String
      is import(#to_string_int)

    func From_String(Str : Univ_String) -> optional Univ_Integer
      is import(#from_string_int)

    func Print(X : Univ_Integer) is import(#print_int)
    func Println(X : Univ_Integer) is (Println(To_String(X)))

    func First() -> Univ_Integer is
      import(#univ_integer_first)

    func Last() -> Univ_Integer is
      import(#univ_integer_last)

    op ".."(Left, Right : Univ_Integer) -> Countable_Set<Univ_Integer>
      is in Countable_Set<Univ_Integer>
    op "<.."(Left, Right : Univ_Integer) -> Countable_Set<Univ_Integer>
      is in Countable_Set<Univ_Integer>
    op "..<"(Left, Right : Univ_Integer) -> Countable_Set<Univ_Integer>
      is in Countable_Set<Univ_Integer>
    op "<..<"(Left, Right : Univ_Integer) -> Countable_Set<Univ_Integer>
      is in Countable_Set<Univ_Integer>
    op "|"(Left, Right : Univ_Integer) -> Countable_Set<Univ_Integer>
      is in Countable_Set<Univ_Integer>
end interface PSL::Core::Univ_Integer

interface PSL::Core::Univ_Character<> is
    op "+"(Left : Univ_Character; Right : Univ_Integer) -> Univ_Character
      is import("+")
    op "+"(Left : Univ_Integer; Right : Univ_Character) -> Univ_Character
      is import("+")

    op "-"(Left : Univ_Character; Right : Univ_Integer) -> Univ_Character
      is import("-")
    op "-"(Left, Right : Univ_Character) -> Univ_Integer
      is import("-")

    op "*"(Left : Univ_Integer; Right : Univ_Character) -> Univ_String
	// Produce specified number of "Right" chars in a row
    op "*"(Left : Univ_Character; Right : Univ_Integer) -> Univ_String
	// Produce specified number of "Left" chars in a row

    op "=?"(Left, Right : Univ_Character) -> Ordering
      is import("=?")

    func To_String(Val : Univ_Character) -> Univ_String
      is import(#to_string_char)

    func From_String(Str : Univ_String) -> optional Univ_Character
      is import(#from_string_char)

    func Print(C : Univ_Character) is import(#print_char)
    func Println(C : Univ_Character) is (Println(To_String(C)))

    func Hash(Val : Univ_Character) -> Univ_Integer
      is import(#identity)

    func First() -> Univ_Character

    func Last() -> Univ_Character

    func Min(Left, Right : optional Univ_Character) -> optional Univ_Character
      is import(#min)
    func Max(Left, Right : optional Univ_Character) -> optional Univ_Character
      is import(#max)

    op ".."(Left, Right : Univ_Character) -> Countable_Set<Univ_Character>
      is in Countable_Set<Univ_Character>
    op "<.."(Left, Right : Univ_Character) -> Countable_Set<Univ_Character>
      is in Countable_Set<Univ_Character>
    op "..<"(Left, Right : Univ_Character) -> Countable_Set<Univ_Character>
      is in Countable_Set<Univ_Character>
    op "<..<"(Left, Right : Univ_Character) -> Countable_Set<Univ_Character>
      is in Countable_Set<Univ_Character>
    op "|"(Left, Right : Univ_Character) -> Countable_Set<Univ_Character>
      is in Countable_Set<Univ_Character>
end interface PSL::Core::Univ_Character
    
class PSL::Core::Univ_Character is
  exports
    op "*"(Left : Univ_Integer; Right : Univ_Character) -> Univ_String is
	// Produce specified number of "Right" chars in a row
	return Left * To_String(Right)   // Just pass the buck to the string op
    end op "*"

    op "*"(Left : Univ_Character; Right : Univ_Integer) -> Univ_String is
	// Produce specified number of "Left" chars in a row
	return Right * To_String(Left)   // Just pass the buck to the string op
    end op "*"

    func First() -> Univ_Character is
	return '\0'
    end func First

    func Last() -> Univ_Character is
	return '\0' + 2**31-1
    end func Last
end class PSL::Core::Univ_Character

abstract interface PSL::Core::Imageable<> is
    func To_String(Val : Imageable) -> Univ_String<>

    func From_String(Str : Univ_String<>) -> optional Imageable

    // NOTE: We include Hashable<> operations here
    //       so that Set<Imageable+> works nicely.
    //       Clearly if something is Imageable it is possible
    //       to implement "=?" and Hash using the string image,
    //       so we might as well requires these operations too.

    op "=?"(Left, Right : Imageable) -> Ordering
    func Hash(Val : Imageable) -> Univ_Integer
end interface PSL::Core::Imageable

interface PSL::Containers::Packed_Array
  <Elem_Type is Countable<>; Indexed_By is Countable<>;
   Allow_Null : Boolean := #false> 
  implements Indexable<Elem_Type, Indexed_By> is
  // A packed array abstraction where the index type is not necessarily
  // Univ_Integer, but instead can be any Countable type (e.g. Enum<...>)
  // The element type must be countable, and only the range First()..Last()
  // need be represented.
  // If Allow_Null is #true, then one extra value per element is allowed
  // so that "null" can be represented (the "all ones" value is used for null).
  // In an instantiation, the Elem_Type should include "optional"
  // if Allow_Null is #true.

    func Create(Bounds : Countable_Range<Indexed_By>;
      Initial_Value : Elem_Type)
      -> Packed_Array

    func Length(Arr : Packed_Array) -> Univ_Integer
    op "magnitude"(Packed_Array) -> Univ_Integer is Length

    func Bounds(Arr : Packed_Array) -> Countable_Range<Indexed_By>

    interface Packed_Array_Ref<> is
        func Create(ref Arr : Packed_Array; Index : Indexed_By)
          -> ref Packed_Array_Ref
        op "ref"(ref Packed_Array_Ref) -> ref Elem_Type
        op "end"(var Packed_Array_Ref)
    end interface Packed_Array_Ref

    op "indexing"(Arr : Packed_Array; Index : Indexed_By)
      -> Elem_Type
    op "var_indexing"(ref var Arr : Packed_Array; Index : Indexed_By)
      -> ref var Packed_Array_Ref
    op "index_set"(Arr : Packed_Array) -> Countable_Range<Indexed_By>
    func Set(var Arr : Packed_Array; Index : Indexed_By; New_Val : Elem_Type)
    op "<|="(var Left : Packed_Array; var Right : Elem_Type)
    op "|"(Left : Packed_Array; Right : Key_Value<Indexed_By, Elem_Type>)
      -> Packed_Array
    op "[]"() -> Packed_Array
    func Dump()
end interface PSL::Containers::Packed_Array

class PSL::Containers::Packed_Array is
  // A packed array abstraction where the index type is not necessarily
  // Univ_Integer, but instead can be any Countable type (e.g. Enum<...>)
  // The element type must be countable, and only the range First()..Last()
  // need be represented.
  // If Allow_Null is #true, then one extra value per element is allowed
  // so that "null" can be represented (the "all ones" value is used for null).
  // In an instantiation, the Elem_Type should include "optional"
  // if Allow_Null is #true.
    const Word_Size := 62  // So as to avoid the null value of Univ_Integer
    func Num_Bits(Num_Vals : Univ_Integer) -> Univ_Integer is
        for (Bits in 1 .. Word_Size-1; Pow := 2 then Pow + Pow) forward loop
            if Pow >= Num_Vals then
                return Bits
            end if
        end loop
        return Word_Size
    end func Num_Bits

    type Word is Modular<2**Word_Size>

    //  TBD: the following causes order-of-eval problems:
    //    const Num_Elem_Vals := (Elem_Type::Last() - Elem_Type::First()) + 1
        
    func Num_Elem_Vals() -> Univ_Integer is
        //  Return number of values needed, including one for null if allowed.
        return (Elem_Type::Last() - Elem_Type::First()) + (Allow_Null? 2 : 1)
    end func Num_Elem_Vals

    const Bits_Per_Elem := Num_Bits (Num_Elem_Vals())
    const Elems_Per_Word := Word_Size / Bits_Per_Elem
    const Mask : Word := 2 ** Bits_Per_Elem - 1

    func Compute_Spreader() -> Result : Word is
      // Compute a value which when multiplied by the initial value
      // "spreads" it over the packed array
        Result := 0
        for (I in 1 .. Elems_Per_Word;
             One_Bit := 1 then One_Bit << Bits_Per_Elem) forward loop
           Result += One_Bit
        end loop
    end func Compute_Spreader

    const Spreader : Word := Compute_Spreader()

    type Word_Array is Basic_Array<Word>
    var Data : Word_Array
    const Bounds : Countable_Range<Indexed_By>

    func Nth_Elem(Arr : Packed_Array; Index : Indexed_By) -> Elem_Type is
        const Zero_Based_Index := Index - Arr.Bounds.First
        const Word_Index := Zero_Based_Index / Elems_Per_Word + 1
        const Word_Val := Arr.Data[ Word_Index ]
        const Val_Offset :=
           Mask and (Word_Val >>
             ((Zero_Based_Index rem Elems_Per_Word) * Bits_Per_Elem))
        if Allow_Null and then Val_Offset == Mask then
           return null
        else
           return Elem_Type::First() + Val_Offset
        end if
    end func Nth_Elem

  exports

    class Packed_Array_Ref is
        ref Arr : Packed_Array;
        const Index : Indexed_By;
        var Elem : Elem_Type;
      exports
        func Create(ref Arr : Packed_Array; Index : Indexed_By)
          -> ref Packed_Array_Ref is
            return (Arr, Index, Elem => Nth_Elem(Arr, Index))
        end func Create
        op "ref"(ref Packed_Array_Ref) -> ref Elem_Type is
            return Packed_Array_Ref.Elem
        end op "ref"
        op "end"(var Packed_Array_Ref) is
            Set(Packed_Array_Ref.Arr, Packed_Array_Ref.Index,
              New_Val => Packed_Array_Ref.Elem)
        end op "end"
    end class Packed_Array_Ref

    func Dump() is
        Println ("Bits_Per_Elem = " | Bits_Per_Elem)
        Println ("Elems_Per_Word = " | Elems_Per_Word)
        Println ("Mask = " | Mask)
    end func Dump

    func Create(Bounds : Countable_Range<Indexed_By>;
      Initial_Value : Elem_Type)
      -> Result : Packed_Array is
        const Num_Words :=
          (Length(Bounds) + Elems_Per_Word - 1) / Elems_Per_Word
        const Adjusted_Val := Initial_Value is null?
                                Mask : Initial_Value - Elem_Type::First()
	return (Data => Create(Num_Words, Adjusted_Val * Spreader),
	  Bounds => Bounds)
    end func Create

    func Length(Arr : Packed_Array) -> Univ_Integer is
	return Length(Arr.Bounds)
    end func Length

    func Bounds(Arr : Packed_Array) -> Countable_Range<Indexed_By> is
	return Arr.Bounds
    end func Bounds

    op "indexing"(Arr : Packed_Array; Index : Indexed_By)
      -> Elem_Type is (Nth_Elem(Arr, Index))

    op "var_indexing"(ref var Arr : Packed_Array; Index : Indexed_By)
      -> ref var Packed_Array_Ref is
        if Index not in Arr.Bounds then
           //  Need to extend the array
           Set (Arr, Index, Allow_Null? null: Elem_Type::First())
        end if
        return Create(Arr, Index)
    end op "var_indexing"

    op "index_set"(Arr : Packed_Array) -> Countable_Range<Indexed_By> is
        return Arr.Bounds
    end op "index_set"

    func Set(var Arr : Packed_Array; Index : Indexed_By; New_Val : Elem_Type) is
        if |Arr.Bounds| == 0 then
            // First element in array
            Arr := Create (Index .. Index, New_Val);
            return
        end if

        if Index < Arr.Bounds.First then
            //  Extending low bound (ugh)
            var Old_Arr <== Arr;
            //  Create a new array, and copy old values over
            Arr := Create (Index .. Old_Arr.Bounds.Last, New_Val);
            for each [I => E] of Old_Arr loop
                Arr[I] := Old_Arr[I]
            end loop
            Old_Arr := null
            return
        end if

        if Index > Arr.Bounds.Last then
            //  Extending high bound
            Arr := (Data <== Arr.Data,
                    Bounds => (First => Arr.Bounds.First, Last => Index))
        end if
        const Zero_Based_Index := Index - Arr.Bounds.First
        const Word_Index := Zero_Based_Index / Elems_Per_Word + 1
        if Word_Index > |Arr.Data| then
            // Need to extend the the word array
            Arr.Data[ Word_Index ] := (Allow_Null? Mask * Spreader: 0)
        end if
	const Elem_Loc :=
          (Zero_Based_Index rem Elems_Per_Word) * Bits_Per_Elem
        const Adjusted_Val := (New_Val is null?
          Mask : New_Val - Elem_Type::First()) << Elem_Loc
        const Elem_Mask := Mask << Elem_Loc
        Arr.Data[ Word_Index ] := (Arr.Data[ Word_Index ] and not Elem_Mask) or
          Adjusted_Val
    end func Set

    op "<|="(var Left : Packed_Array; var Right : Elem_Type) is
	// Add Right onto Array
	if Length(Left) == 0 then
	    Left := (Data => Create(1, 0),
	      Bounds => Indexed_By::First() .. Indexed_By::First())
	    Set (Left, Indexed_By::First(), Right)
	else
	    Set (Left, Left.Bounds.Last + 1, Right)
	end if
    end op "<|="
    
    op "|"(Left : Packed_Array; Right : Key_Value<Indexed_By, Elem_Type>) 
      -> Result : Packed_Array is
	Result := Left
	Set (Result, Right.Key, Right.Value)
    end op "|"

    op "[]"() -> Result : Packed_Array is
	return (Data => Create(0, 0),
	  Bounds => Indexed_By::First()+1 .. Indexed_By::First())
	    // Bounds not meaningful when empty
    end op "[]"

end class PSL::Containers::Packed_Array

func PSL::Test::Test_Packed() is
    type Color is Enum< [#red, #green, #blue] >
    type RCB is Packed_Array
      <optional Integer<Range => 0..0xFF>, Indexed_By => Color,
       Allow_Null => #true>

    RCB::Dump()

    const Red : RCB := [#red => 0x33, #green => 0, #blue => 0]
    const Blue : RCB := [#blue => 0x33, #green => 0, #red => 0]
    const Yellow : RCB := [#green => 0x33, #blue => 0x33, #red => 0] 
    const White : RCB := [0xFF, 0xFF, 0xFF]
    const Partial : RCB := [0xFF, 0xFF, null]
    
    const RCBs : Vector<RCB> := [Red, Blue, Yellow, White, Partial]
    const Names : Vector<Univ_String> :=
      ["Red", "Blue", "Yellow", "White", "Partial"]

    for each [I => C] of RCBs forward loop
	Println(Names[I] | " = [#red => " | C[#red] |
          ", #green => " | C[#green] | ", #blue => " | C[#blue] | "]")
    end loop

    var Arr : RCB := Create(#red .. #blue, 0x77)
    Print("Arr = ")
    for (each [I => X] of Arr; Sep := "[" then ", ") forward loop
        Print(Sep | I | " => " | X)
    end loop
    Println("]")

    Println ("About to update Arr[#green] with 0x33 (= " | 0x33 | ")")
    block
        ref Green_Elem => Arr[#green]
        Green_Elem := 0x32
        Green_Elem += 1

        --  "end"(Green_Elem) should be invoked here
    end block

    Println ("About to update Arr[#blue] with 0x55 (= " | 0x55 | ")")

    Arr[#blue] := 0x22
    --  "end"(Arr[#blue]) should be invoked here

    --  Arr[#blue] := Arr[#blue] * 5
    Arr[#blue] *= 5
    --  "end"(Arr[#blue]) should be invoked here

    Arr[#blue] := Arr[#blue] / 2
    --  "end"(Arr[#blue]) should be invoked here

    Print("Arr now = ")
    for (each [I => X] of Arr; Sep := "[" then ", ") forward loop
        Print(Sep | I | " => " | X)
    end loop
    Println("]")

    const RR : RCB :=
      [#red => Arr[#green],
       #green => "var_indexing"(Arr, #blue),  --  "end" invoked here
       #blue => Arr[#red]]
    Print("RR = ")
    for (each [I => X] of RR; Sep := "[" then ", ") forward loop
        Print(Sep | I | " => " | X)
    end loop
    Println("]")

    var VV : Vector<Univ_Integer> := [3, Arr[#green], Arr[#red] / 5]
    VV := VV | [7, Arr[#blue]]
    Print("VV = ")
    for (each Z of VV; Sep := "[" then ", ") forward loop
        Print (Sep | Z)
    end loop
    Println("]")
    
end func PSL::Test::Test_Packed

