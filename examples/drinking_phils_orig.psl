// Drinking philosophers
// There is a group of philosophers, numbered 1 to Num_Phils
// There is some number of bottles with distinct contents,
// numbered 1 to Num_Bottles.
// A philosopher thinks for a while, and then gets thirsty
// and sits down, then picks up one or more bottles to mix a drink.
// The philosopher drinks for a while, and then puts back the bottles.
// The algorithm used to supply the bottles avoids deadlock
// and "starvation" (perhaps better called "parched mouth"),
// and is based on the 1984 ACM TOPLAS paper by Chandy and Misra.

import Clock;

interface Set<Element_Type is Assignable<>> is
    op "+"(Left, Right : Set) -> Set;  // Union
    op "-"(Left, Right : Set) -> Set;  // Set difference
    op "*"(Left, Right : Set) -> Set;  // Intersection
    op "=?"(Left, Right : Set) -> Ordering; // Comparison
    op "[]"() -> Set;  // Empty set
    op "|="(var Left : Set; Right : Element_Type); // Add element
    func Count(S : Set) -> Univ_Integer {Count >= 0};  // Element count
    // etc...
end interface Set;

interface Drinking_Philosophers
  <Num_Phils : Univ_Integer := 5; 
   Num_Bottles : Univ_Integer := Num_Phils; 
   Context<>> is
    type Philosopher_Index is new Integer<1..Num_Phils>;
    
    type Bottle_Index is new Integer<1..Num_Bottles>;

    type Bottle_Set is Set<Bottle_Index>;
        
    type Phil_To_Bottle_Map is Array<Bottle_Set, 
      Indexed_By => Philosopher_Index>;
      // This array is used to specify which set of bottles
      // is of interest to a particular philosopher.

    func Drinking_Party
      (Length_Of_Party : Clock::Interval_Type; 
       Who_Drinks_What : Phil_To_Bottle_Map; 
       Context);
      // Get this party going ...
    
    concurrent interface Bar_Stool<> is
      // At each bar stool there is a collection of bottles.
      // A philosopher sits down at their bar stool when they
      // are thirsty, and proceeds to try to ensure the
      // desired set of bottles they need for their next drink
      // is available.

        func Bottles_To_Borrow
          (queued var S : Bar_Stool; 
           Desired_Bottles : Bottle_Set) -> Bottle_Set;
          // Return set of bottles needed to satisfy overall set
          // of desired bottles.  Returns empty set if Philosopher already
          // has all the desired bottles at their Bar_Stool, in which
          // case the Philosopher may start drinking.
          // Remains queued if in the middle of borrowing bottles,
          // and there are no additional ones that need to be borrowed.

        func Add_Bottle
          (locked var S : Bar_Stool;
           Index : Bottle_Index);
          // Indicate that Philosopher successfully borrowed specified
          // bottle, and it is now available for their use.

        func Remove_Bottle
          (queued var S : Bar_Stool;
           Index : Bottle_Index);
          // Remove bottle from collection at given bar stool.
          // Will be queued while philospher is drinking.

        func Finished_Drinking
          (locked var S : Bar_Stool);
          // Philosopher indicates they are finished drinking,
          // meaning that all of the bottles they were using
          // are now considered "used".

        func Create(Initial_Bottles : Bottle_Set) -> Bar_Stool;
          // Create a bar stool for given Philosopher
          // Initial_Bottles is the set of bottles initially in front
          // of the new bar stool.

    end interface Bar_Stool;

    concurrent interface Bottle<> is
      // Each bottle keeps track of who will get it next,
      // and whether it can be borrowed at the current moment.

        func Borrow_Bottle
          (queued var B : Bottle; 
           Phil : Philosopher_Index) -> Who_Has_It_Now : Philosopher_Index;
          // Ask for a bottle from its current owner

        func Release_Bottle
          (locked var B : Bottle);
          // Indicate bottle is now available for borrowing
          // (meaning it has been used at least once by owner).

        func Create(Initial_Owner : Philosopher_Index) -> Bottle;
          // Create a bottle with given initial owner

    end interface Bottle;

end interface Drinking_Philosophers;


class Drinking_Philosophers
  <Num_Phils : Univ_Integer := 5; 
   Num_Bottles : Univ_Integer := Num_Phils; 
   Context<>> is

    func Eliminate_Duplicates(Bottle_Map : Phil_To_Bottle_Map) 
      -> Result : Phil_To_Bottle_Map 
          {(for all P1 in Philosopher_Index =>
             for all P2 in Philosopher_Index => 
                if P1 != P2 then Result[P1] * Result[P2] == [])}
        // Ensure that there are no duplicates in resulting mapping
          {(for all B in Bottle_Index => for some P in Philosopher_Index =>
              B in Result[P])}
        // Ensure that every bottle is somewhere
      is
        var Earlier_Bottles : Bottle_Set := [];

        for Phil in Philosopher_Index loop
            // Remove bottles assigned to earlier philosophers
            // NOTE: We don't actually need a "forward loop" here
            //       so long as the loop runs sequentially.
            //       "Earlier" bottles merely means earlier iterations,
            //       independent of the order in which they are performed.
            Result[Phil] := Bottle_Map[Phil] - Earlier_Bottles;
            Earlier_Bottles += Result[Phil];
        end loop;

        if Count(Earlier_Bottles) != Num_Bottles then
            // Some bottles not assigned to anyone
            // Give them to Philosopher 1
            Result[1] += [1..Num_Bottles] - Earlier_Bottles;
        end if;

    end func Eliminate_Duplicates;

    type Bottle_To_Phil_Mapping is Array<Philosopher_Index,
      Indexed_By => Bottle_Index>;
        // Mapping that indicates where bottles start out

    func Invert_Bottle_Map(Initial_Bottles : Phil_To_Bottle_Mapping) 
          {(for all P1 in Philosopher_Index =>
             for all P2 in Philosopher_Index => 
                if P1 != P2 then 
                  Initial_Bottles[P1] * Initial_Bottles[P2] == [])}
      -> Result : Bottle_To_Phil_Mapping is
        // Invert the mapping from Philospher to Bottles
        Result := [1..Num_Bottles => 1];
        for Phil in Philosopher_Index concurrent loop
            for B in Initial_Bottles[Phil] concurrent loop
                Result[B] := Phil;
            end loop;
        end loop;
    end func Invert_Bottle_Map;

  exports

    func Drinking_Party
      (Length_Of_Party : Clock::Interval_Type; 
       Who_Drinks_What : Phil_To_Bottle_Map; 
       Context) is

        // Put an overall timer on the party
        Delay(Context.Clock, Length_Of_Party);
        // Time to go home!
        Display(Context.IO.Standard_Output, "Drinking Party is over\n");
        return; 
        
      ||
        // Get the party going
        
        const Initial_Bottles := Eliminate_Duplicates(Who_Drinks_What);
          // Which bottles a philosopher should start with

        const Where_Bottles_Start := Invert_Bottle_Map(Initial_Bottles);
          // Where each bottle starts

        var Bottles : Array<Bottle, Indexed_By => Bottle_Index> :=
          [for B in Bottle_Index => Create(Where_Bottles_Start[B])];

        var Bar_Stools : Array<Bar_Stool, Indexed_By => Philosopher_Index> :=
          [for Phil in Philosopher_Index => Create(Initial_Bottles[Phil])];
        
        // Now start the philosophers drinking
        for Phil in Philosopher_Index concurrent loop
            ref My_Bar_Stool => Bar_Stools[Phil];

            ref My_Bottles => Who_Drinks_What[Phil];
           
            loop // Until overall timer terminates function

                Display(Context.IO.Standard_Output, 
                  "Philosopher " | Phil | " is thinking\n");
                Delay(Context.Clock, Next(Context.Random));  // Think

                // Philosopher is thirsty.
                // Find out which, if any, bottles they need.

               *Gather_Bottles*
                loop  // until we have all the bottles we need
                    const Needed_Bottles := 
                      Bottles_To_Borrow(My_Bar_Stool, My_Bottles);

                    if Needed_Bottles == [] then
                        // We have all the bottles we need
                        exit loop Gather_Bottles;
                    end if;

                    // Go get the bottles we need
                    for B in Needed_Bottles concurrent loop

                        // Borrow it from its current owner 
                        const Who_Has_It_Now := Borrow_Bottle(Bottles[B], Phil);

                        // Take it from current owner
                        Remove_Bottle(Bar_Stools[Who_Has_It_Now], B);

                        // Add it to the collection at our bar stool
                        Add_Bottle(My_Bar_Stool, B);

                    end loop;

                    // Go back for the next batch of bottles, if any
                    // (in case one of the bottles we had left over
                    //  from our prior drinking session got borrowed).
                end loop Gather_Bottles;

                // OK, we have all the bottles we need for our drinking session

                Display(Context.IO.Standard_Output,
                  "Philosopher " | Phil | " is drinking\n");
                Delay(Context.Clock, Next(Context.Random));  // Drink

                // Indicate that the Philosopher is done drinking
                Finished_Drinking(My_Bar_Stool);

                // Allow the bottles to be borrowed
                for B in My_Bottles concurrent loop
                    Release_Bottle(Bottles[B]);
                end loop;

            end loop;
        end loop;
    end func Drinking_Party;
    
    concurrent class Bar_Stool<> is
      // At each bar stool there is a collection of bottles.
      // A philosopher sits down at their bar stool when they
      // are thirsty, and proceeds to try to ensure the
      // desired set of bottles they need for their next drink
      // is available.

        var Used_Bottles : Bottle_Set;
          // Bottles used by Philosopher at this bar stool

        var Clean_Bottles : Bottle_Set;
          // Bottles not yet used by Philosopher at this bar stool

        var Being_Borrowed : Bottle_Set;
          // Bottles in the process of being borrowed.

      exports

        func Bottles_To_Borrow
          (queued var S : Bar_Stool; 
           Desired_Bottles : Bottle_Set) -> Bottle_Set is
          // Return set of bottles needed to satisfy overall set
          // of desired bottles.  First return the set of bottles
          // not held by the Philosopher.  Then return the set of
          // bottles already held, but not yet reserved for the
          // the next round of drinking.
          // Returns empty set if Philosopher has reserved
          // all the desired bottles for this round, in which
          // case the Philosopher may start drinking.

          queued while S.Being_Borrowed != [] and then
            Desired_Bottles <=
              S.Used_Bottles + S.Clean_Bottles + S.Being_Borrowed
              // Remain queued while we are in the middle of borrowing 
              // bottles, and there are no other bottles needed

          then

            if Desired_Bottles <= S.Used_Bottles + S.Clean_Bottles then
                // We have all the bottles we need.
                // Mark them all clean so they won't get removed
                // before we are done.

                const To_Be_Cleaned := Desired_Bottles - S.Clean_Bottles;

                S.Used_Bottles -= To_Be_Cleaned;
                S.Clean_Bottles += To_Be_Cleaned;

                // Return an empty set to indicate no more bottles to get.
                // Time to start drinking...
                return [];
            else
                // There are some bottles we don't already have
                const To_Be_Borrowed := Desired_Bottles - 
                  (S.Used_Bottles + S.Clean_Bottles + S.Being_Borrowed);

                {To_Be_Borrowed != []}  // Our queuing condition ensures this

                S.Being_Borrowed += To_Be_Borrowed;

                return To_Be_Borrowed;
            end if;

        end func Bottles_To_Borrow;

        func Add_Bottle
          (locked var S : Bar_Stool;
           Index : Bottle_Index) is
          // Indicate that Philosopher successfully borrowed specified
          // bottle, and it is now available for their use.
            S.Being_Borrowed -= [Index];
            S.Clean_Bottles += [Index];
        end func Add_Bottle;

        func Remove_Bottle
          (queued var S : Bar_Stool;
           Index : Bottle_Index) is
          // Remove bottle from collection at given bar stool.
          // Will be queued while philospher is drinking.
          queued until Index in S.Used_Bottles
          then
            S.Used_Bottles -= [Index];
        end func Remove_Bottle;

        func Finished_Drinking
          (locked var S : Bar_Stool) is
          // Philosopher indicates they are finished drinking,
          // meaning that all of the bottles they were using
          // are now considered "used".
            S.Used_Bottles += S.Clean_Bottles;
            S.Clean_Bottles := [];
        end func Finished_Drinking;

        func Create(Initial_Bottles : Bottle_Set) -> Bar_Stool is
          // Create a bar stool for given Philosopher
            return (Used_Bottles => Initial_Bottles,
              Clean_Bottles => [], Being_Borrowed => []);
        end func Create;

    end class Bar_Stool;

    concurrent class Bottle<> is
      // Each bottle keeps track of who will get it next,
      // and whether it can be borrowed at the current moment.

        var Who_Gets_It : Philosopher_Index;
        var Can_Be_Borrowed : Boolean;

      exports

        func Borrow_Bottle
          (queued var B : Bottle; 
           Phil : Philosopher_Index) -> Who_Has_It_Now : Philosopher_Index is
          // Ask for a bottle from its current owner
          queued until B.Can_Be_Borrowed then

            Who_Has_It_Now := B.Who_Gets_It;

            B.Can_Be_Borrowed := False;  // Can't be borrowed again until used
            B.Who_Gets_It := Phil;  // This philosopher will have it next

        end func Borrow_Bottle;

        func Release_Bottle
          (locked var B : Bottle) is
          // Indicate bottle is now available for borrowing
          // (meaning it has been used at least once by owner).
            B.Can_Be_Borrowed := True;
        end func Release_Bottle;
            
        func Create(Initial_Owner : Philosopher_Index) -> Bottle is
          // Create a bottle with given initial owner
            return (Can_Be_Borrowed => True, Who_Gets_It => Initial_Owner);
        end func Create;

    end class Bottle;

end class Drinking_Philosophers;

