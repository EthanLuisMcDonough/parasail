interface Boolean<> is
end interface Boolean;

interface Integer<> is

    op "+"(Left, Right : Integer<>) -> Result : Integer<> 
      is import("+");

    op "-"(Left, Right : Integer<>) -> Result : Integer<>
      is import("-");

    op "*"(Left, Right : Integer<>) -> Result : Integer<> 
      is import("*");

    op "/"(Left, Right : Integer<>) -> Result : Integer<>
      is import("/");

    op "=?"(Left, Right : Integer<>) -> Result : Boolean<>
      is import("=?");

    op "=="(Left, Right : Integer<>) -> Result : Boolean<>
      is import("==");

    op "!="(Left, Right : Integer<>) -> Result : Boolean<> is
	((Left == Right) == #false);
    
    op "<="(Left, Right : Integer<>) -> Result : Boolean<> is
	((Left =? Right) != #greater);

    op ">="(Left, Right : Integer<>) -> Result : Boolean<> is
        ((Left =? Right) != #less);

    op "<"(Left, Right : Integer<>) -> Result : Boolean<> is
	((Left =? Right) == #less);

    op ">"(Left, Right : Integer<>) -> Result : Boolean<> is
        ((Left =? Right) == #greater);

    op ">>"(Integer<>; Integer<>) -> Integer<> is import(">>");

    op "<<"(Integer<>; Integer<>) -> Integer<> is import("<<");

    func Print(X : Integer<>) is import("print");
end interface Integer;

func Fib(N : Integer<>) -> Result : Integer<> is
	if N <= 1 then
	    return N;
	else
	    return Fib(N-1) + Fib(N-2);
	end if;
end func Fib;

func Fib_Helper(I : Integer<>; N : Integer<>; 
  Prev2 : Integer<>; Prev : Integer<>) -> Result : Integer<> is
	if I >= N then
	    Result := Prev + Prev2;
	else
	    Result := Fib_Helper(I+1, N, Prev, Prev+Prev2);
	end if;
end func Fib_Helper;

func Fibit(N : Integer<>) -> Result : Integer<> is
        if N <= 1 then
	    return N;
	else
	    return Fib_Helper(2, N, 0, 1);
	end if;
end func Fibit;

func Minus(Left, Right : Integer<>) -> Result : Integer<> is
	return Left - Right;
end func Minus;

func Fib_Slow(N : Integer<>) -> Result : Integer<> is
	if N <= 1 then
	    return N;
	else
	    return Fib_Slow(Minus(N,1)) + Fib_Slow(Minus(N,2));
	end if;
end func Fib_Slow;



func Double_And_Add(X, Y : Integer<>) -> Result : Integer<> is
    return X + (X + Y);
end func Double_And_Add;

func Ignore(X : Integer<>) -> Result : Integer<> is
    return 3 + 4;
end func Ignore;

func Shift(Left, Right : Integer<>) -> Integer<> is
	if Right < 0 then 
	    return Left >> (0 - Right);
	else
	    return Left << Right;
	end if;
end func Shift;

func Test(N : Integer<>) is
	Print(Fib(N));
end func Test;

func Test1() is import("test1");

func Test2() is
	Test1();
end func Test2;

func Test3() is
	Print(3);
end func Test3;

func Test4() is
	Print(2+3-1);
end func Test4;

func Test5() is
    Test(5);
end func Test5;

func Test6() is
    Print(Double_And_Add(5-3, (4+7)-9));
end func Test6;

func Test7() is
    Print(Ignore(33));
end func Test7;

func Test8() is
	Print(Fib(6));
end func Test8;

