README file for ParaSail/Ada202x releases.

See documentation/parasail_release_notes.txt and
documentation/ada202x_release_notes.txt for more information.

There is a "Makefile" in the top-level directory.

A simple "make" is sufficient to build both the ParaSail and the Ada202x
interpreters/virtual machines.

If you want to experiment with the GTK-related libraries, try
"make all_with_gtk" instead.  This will create "install/bin/psli_with_gtk"
instead of "install/bin/psli".  The Ada202x interpreter currently has no GTK
interface, so this should not be a problem.

--------- ParaSail ----------

The test programs for ParaSail are in the "examples" subdirectory.

The ParaSail sources are in three subdirectories:

   * parser : ParaSail grammar (parasail.y and parasail_lex.l) and
       overall driver (parasail_main.adb).
     - parser/gen : Ada source code generated by ayacc and aflex, gnatchopped.

   * semantics : ParaSail static and dynamic semantics parts of interpreter.
     - PSC.Trees defines the root of a hierarchy of Tree types 
       representing the parsed ParaSail modules.
     - PSC.Trees.Semantics.Info defines a hierarchy of Semantic_Info types
       representing semantic information developed during static and
       dynamic semantics phases.
     - PSC.Trees.Semantics.Static does static semantic analysis on the trees.
     - PSC.Trees.Semantics.Dynamic generates ParaSail virtual machine 
       instructions.
     - PSC.Trees.Semantics includes the driver for the Semantics phases.

   * interpreter : ParaSail virtual machine and interpreter
     - PSC.Interpreter defines a variant record type Instruction
       which represents the ParaSail Virtual Machine instruction set,
       along with an interpreter.
     - PSC.Interpreter.Builtins provide the implementations of the
       builtin operations.
     - *GTK* and *Cairo* provide the prototype interface to the GTK
       graphical user interface (defined in examples/gtk_cairo.psl).

To run ParaSail, change into the examples subdirectory and type, for example:

   % ../bin/interp.csh dgraph.psl hippo_game.psl

This will generate the following output (approximately):

   ParaSail interpreter and Virtual Machine Revision: 9.x
   Copyright (C) 2011-2021, AdaCore, New York NY, USA
   To be used only for Personal, Academic, or Evaluation Purposes;
   Not for Commercial Production Use.
   Report problems at
     http://groups.google.com/group/parasail-programming-language

   Parsing aaa.psi
   ...
   Parsing dgraph.psl
   Parsing hippo_game.psl
   ---- Beginning semantic analysis ----
    134 trees in library.
   Done with First pass.
   Done with Second pass.
   Done with Pre codegen pass.
   Done with Code gen.
   Evaluating global constants.
   Finishing type descriptors.

   Command to execute: 

At this point you type "Place_Hippos" and it should solve the well known
6-hippos problem. ;-)  The expected output is approximately:

   Piece 4,3 is at 11,21
   Piece 5,2 is at 12,13
   Piece 5,4 is at 14,24
   Piece 4,2 is at 33,22
   Piece 5,3 is at 23,34
   Piece 3,2 is at 32,31

   Command to execute: 

Typing "quit" will exit the ParaSail virtual machine interpreter.

The file "lib/aaa.psi" contains the ParaSail Standard Library comprising
PSL::Core::* and PSL::Containers::*, and is automatically included
by the bin/interp.csh script.

You may list as many *.ps? files as you would like on the command line.
If you want to specify the command on the original shell command line,
then add "-command xxx yyy" at the end of the line.  E.g.:

  % ../bin/interp.csh dgraph.psl hippo_game.psl -command Place_Hippos

As a result of running the ParaSail interpreter, if there are errors, they are
echoed to the screen and also saved in a file called "errors.err".  You can
then type "vim -q" to go to the line causing the problem.

The results of the interpreter are saved in <filename>.lst.  
There you will find an unparsing of the source in <filename>
that it parsed, plus the ParaSail Virtual Machine (PSVM)
instructions that it generated.

--------- Ada202x ----------

The additional sources needed for the Ada202x compiler are in:

   * ada202x_parser : Ada202x grammar (ada202x.y and ada202x_lex.l) and
       overall driver (ada202x_main.adb).
     - ada202x_parser/gen : Ada source code generated by ayacc and aflex,
         gnatchopped.

   * interpreter : Ada202x/ParaSail virtual machine and interpreter
     - PSC.Interpreter.Ada202x_Builtins provide the implementations of the
       additional builtin operations needed for Ada202x.

The test programs for Ada202x are in the "ada202x_examples" subdirectory.
To run Ada202x, change into the ada202x_examples subdirectory and type:

   % ../bin/ada_interp.csh qsort.a2x

This will generate the following output (approximately):

   Ada202x Interpreter and Virtual Machine Revision: 9.x
   ...
   Parsing <install-dir>/lib/aaa.psi
   Parsing <install-dir>/lib/reflection.psi
   Parsing <install-dir>/lib/reflection.psl
   Parsing <install-dir>/lib/reflection.psi
   Parsing <install-dir>/lib/reflection.psl
   Parsing <install-dir>/lib/psvm_debugging.psl
   Parsing <install-dir>/lib/debugger_console.psl
   Parsing qsort.a2x
   ---- Beginning semantic analysis ----
   Starting up thread servers
    xxx trees in library.
   Done with First pass.
   ...
   Finishing type descriptors.

   Command to execute: 

You can then type: Test_Sort 8

Program should produce, approximately:

   Seed =  8, Mult =  16807, Mod =  2147483647
   Before sort, Vec = 
     56,  45,  2,  23,  52,  29,  52,  89
   After sort, Vec = 
     2,  23,  29,  45,  52,  52,  56,  89
   After 2nd sort, Vec2 = 
     2,  23,  29,  45,  52,  52,  56,  89

   Command to execute:

Typing "quit" will exit the Ada202x virtual machine interpreter.

The file "aaa.a2i" contains the Ada202x Standard Library comprising
A2X.Core.* and A2X.Containers.*

If you want to specify the command on the original shell
command line, then add "-command xxx yyy" at the end of
the line.  E.g.:

  % ../bin/ada_interp.csh qsort.a2x -command Test_Sort 8

As a result of running the Ada202x compiler, if there are errors, they are
echoed to the screen and also saved in a file called "errors.err".  You can
then type "vim -q" to go to the line causing the problem.

The results of the compiler are saved in <filename>.lst.  There you will find
an unparsing of the source in <filename> that it parsed, plus the
ParaSail/Ada202x Virtual Machine (PSVM) instructions that it generated.

Please see documentation/*_release_notes.txt for more up-to-date information.
