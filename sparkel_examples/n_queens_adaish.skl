generic
    Max_N : Univ_Integer := 8;
package N_Queens is
    -- Place N queens on an NxN checkerboard so that none of them can
    -- "take" each other.
    -- Max_N : constant Univ_Integer := 8;

    type Chess_Unit is new Integer< -Max_N*2 .. Max_N*2 >;
        -- An integer big enough to represent values -Max_N*2 .. +Max_N*2

    subtype Row is Chess_Unit; -- A subrange in 1..Max_N
    subtype Column is Chess_Unit; -- A subrange
    type Solution is new Array<Column, Indexed_By => Row>;  
      -- A "solution" is an array of Column's, indexed by "Row."
      -- It indicates in which Column a queen of the given Row is located
      -- An example solution would be:  2 8 6 1 3 5 7 4
      --   meaning that the queen in row 1 is at column 2,
      --   the queen in row 2 is at column 8, the queen in
      --   row 3 is at column 6, and so on.

    type Sol_Index is new Integer<1 .. 1_000_000>;
    type Solution_Vec is new Array<Solution, Indexed_By => Sol_Index>;

    func Place_Queens(N : Row := Max_N) return Solution_Vec
      -- with Post =>
        {for all Sol of Place_Queens => for all Col of Sol => Col not null};
        -- Produce a vector of solutions, with the requirement
        -- that for each solution, there are non-null column numbers
        -- specified for each row of the checkerboard.
end N_Queens;

package body N_Queens is
    subtype Sum_Range is Chess_Unit; -- {Sum_Range in 2..2*Max_N};
        -- Sum_Range is used for diagonals where the row+column is the
        -- same throughout the diagonal.
    subtype Diff_Range is Chess_Unit; -- {Diff_Range in (1-Max_N) .. (Max_N-1)};
        -- Diff_Range is used for diagonals where row-column is the
        -- same throughout the diagonal.
    type Sum is new Array<Boolean, Indexed_By => Sum_Range>;
        -- This type of set keeps track of which Sum_Range diagonals
        -- have a queen on them already.
    type Diff is new Array<Boolean, Indexed_By => Diff_Range>;
        -- This type of set keeps track of which Diff_Range diagonals
        -- have a queen on them already.

    type Solution_State is record
        C : Column;    -- Current column
        Trial : Solution;  -- Trial solution, some col#s still null
        Diag_Sum : Sum;   -- Set of "sum" diagonals in use
        Diag_Diff : Diff; -- Set of "diff" diagnoals in use
    end record;

    -- We build up a solution state progressively as we move
    -- across the checkerboard, one column at a time.
    func Initial_State(N : Row) return Solution_State is
        return (C => 1, Trial => Create(1..N, null), -- [1..N => null], 
          Diag_Sum => [for I in 2 .. 2 * N => #False],
          Diag_Diff => [for I in 1-N .. N-1 => #False]);
    end Initial_State;

    func Is_Acceptable(S : Solution_State; R : Row) return Boolean is
      -- Is_Acceptable returns True if the next queen could be
      -- place in row R.
        return S.Trial[R] is null and then
          not S.Diag_Sum[R+S.C] and then
          not S.Diag_Diff[R-S.C];
    end Is_Acceptable;
    
    func Current_Column(S : Solution_State) return Column is
      -- Current_Column indicates which column we are working on.
        return S.C;
    end Current_Column;

    func Next_State(S : Solution_State; R : Row) return Solution_State is
      -- Next_State returns a Solution_State produced by
      -- adding a queen at (Current_Column(S), R).
        return (C => S.C+1, 
          Trial     => S.Trial | [R => S.C],
          Diag_Sum  => S.Diag_Sum | [R+S.C => #True],
          Diag_Diff => S.Diag_Diff | [R-S.C => #True]);
    end Next_State;

    func Final_Result(S : Solution_State; R : Row) return Solution is
      -- Final_Result returns a result produced by adding a queen
      -- at (Columns.Last, R) to a solution with all other columns
      -- placed.
        return S.Trial | [R => S.C];
    end Final_Result;

    func Partial_Solution(S : Solution_State) return Solution is
      -- Return partial solution thus far
        return S.Trial;
    end Partial_Solution;

 exports

    func Place_Queens(N : Row := Max_N) return Solution_Vec
        -- Produce a vector of solutions, with the requirement
        -- that for each solution, there are non-null column numbers
        -- specified for each row of the checkerboard.
    is
      Rows : constant Countable_Range<Chess_Unit> := 1..N;
      var Solutions : protected Vector<Solution> := [];
      
      --  State : Solution_State := Initial_State(N);

      Outer_Loop:
      parallel
      for State : Solution_State := Initial_State(N) loop
          -- Iterate over the columns
        
          Inner_Loop:
          parallel
          for R in Rows loop
              -- Iterate over the rows
              if Is_Acceptable(State, R) then
                  -- Found a Row/Column combination that is not on any diagonal
                  -- already occupied.
                  if Current_Column(State) < N then
                      -- Keep going since haven't reached Nth column.
                      Next : constant := Next_State(State, R);
                      continue loop Outer_Loop with State => Next;
                      --  exit loop Inner_Loop;
                  else
                      -- All done, remember trial result with last queen placed
                      Final : Solution := Final_Result(State, R);
                      Solutions <|= Final;
                  end if;
              end if;
              --  if R = Rows.Last then
                 --  exit loop Outer_Loop;
              --  end if;
          end loop Inner_Loop;
      end loop Outer_Loop;
      return [for I in 1 .. |Solutions| => Solutions[I]];
      
    end Place_Queens;
end N_Queens;

proc Test_N_Queens(N : Univ_Integer) is

    package Max_12_Queens is new N_Queens<Max_N => 12>;
    -- subtype Max_12_Queens is N_Queens;

    Results : constant := Max_12_Queens.Place_Queens(N);

    Put_Line("Number of results with " & N & " queens = " & |Results|);

    for each [I => Result] of Results forward loop

       Put("Result #" & I);

       for each Col of Result forward loop
            Put(" " & Col);
       end loop;
       Put('\n');
    end loop;

end Test_N_Queens;

