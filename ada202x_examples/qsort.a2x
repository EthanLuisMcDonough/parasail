-- Example ParaSail program -- QuickSort

-- Copyright (C) 2011-2021, AdaCore, New York, NY
-- To be used only for Personal, Academic, or Evaluation Purposes;
-- Not for Commercial Production Use.
-- Report errors at http://groups.google.com/group/parasail-programming-language

generic
    type Elem_Type is new Comparable;
    type Index_Type is new Countable;
    type Array_Type is new Indexable<Elem_Type, Index_Type>;
    with function Image(Index : Index_Type) return Univ_String;
package Sorting is
    procedure Quicksort(Arr : in out Array_Type; Debug : Boolean := #False);
          -- Sort Arr according to the sorting op "<" which returns
          -- True if Left must appear before Right in the sorted order.
          -- "<" returns False if Left need not appear before Right.
end Sorting;

package body Sorting is
    procedure Quicksort(Arr : in out Array_Type; Debug : Boolean := #False) is
       -- Handle short slices directly.  Partition longer slices.
       procedure Sort_Slice (Slc_First, Slc_Last : Index_Type) is
          Slc_Length : constant := Slc_Last - Slc_First + 1;
       begin

          case Slc_Length is
            when 0 .. 1 =>
               null;

            when 2 =>
               if Arr[Slc_Last] < Arr[Slc_First] then
                   -- Swap elements
                   Tmp : constant := Arr[Slc_First];

                   Arr[Slc_First] := Arr[Slc_Last];
                   Arr[Slc_Last] := Tmp;
               end if;

            when others =>
               -- Partition array
               Mid : constant := Arr[Slc_First + Slc_Length/2];
               Left : Index_Type := Slc_First;
               Right : Index_Type := Slc_Last;
               while Left <= Right loop
                   New_Left : Index_Type := Right+1;
                   New_Right : Index_Type := Left-1;

                   parallel do

                      -- Find item in left half to swap
                      for I in Left .. Right loop
                          if not (Arr[I] < Mid) then
                              -- Found an item that can go
                              -- into right partitition
                              New_Left := I;
                              exit when Mid < Arr[I]
                                  -- Found an item that *must* go
                                  -- into right part
                          end if;
                      end loop;
                   and
                      -- Find item in right half to swap
                      for J in reverse Left .. Right loop
                          if not (Mid < Arr[J]) then
                              -- Found an item that can go into
                              -- left partitition
                              New_Right := J;
                              exit when Arr[J] < Mid
                                  -- Found an item that *must* go
                                  -- into left part
                          end if;
                      end loop;

                   end do
                 
                   if New_Left > New_Right then
                       -- Nothing more to swap
                       -- Exit loop and recurse on two partitions
                       Left := New_Left;
                       Right := New_Right;
                       exit;
                   end if;
                 
                   -- Swap items
                   Tmp : constant := Arr[New_Left];
                   Arr[New_Left] := Arr[New_Right];
                   Arr[New_Right] := Tmp;
                 
                   -- continue looking for items to swap
                   Left := New_Left + 1;
                   Right := New_Right - 1;
               end loop;
               
               -- At this point, "Right" is right end of left partition
               -- and "Left" is left end of right partition
               -- and the partitions don't overlap
               -- and neither is the whole array
               -- and everything in the left partition can precede Mid
               -- and everything in the right partition can follow Mid
               -- and everything between the partitions is equal to Mid.
               pragma Assert
                 (Left > Right and then
                  Right < Slc_Last and then
                  Left > Slc_First);

               pragma Assert
                 ((for all I in Slc_First .. Right => not (Mid < Arr[I]))
                    and then
                  (for all J in Left .. Slc_Last => not (Arr[J] < Mid))
                    and then
                  (for all K in Right+1 .. Left-1 => 
                     not (Mid < Arr[K]) and not (Arr[K] < Mid)));
               
               if Debug then
                  Put_Line ("Divide and Conquer: Sort Arr(" &
                    Image(Left) & " .. " & Image(Slc_Last) & ") & Arr(" &
                    Image(Slc_First) & " .. " & Image(Right) & ")");
               end if;
               -- continue with two halves in parallel
               parallel do
                  Sort_Slice (Slc_First, Right);
               and
                  Sort_Slice (Left, Slc_Last);
               end do
          end case;
       end Sort_Slice;
    begin

       Sort_Slice (Arr'First, Arr'Last);
    end Quicksort
end package Sorting;

procedure Test_Sort(Input_Len : Univ_Integer) is
    -- For Random
    Len : constant := abs Input_Len;
    Debug : constant Boolean := Input_Len < 0;
    Mult : constant := 7**5;
    Mod : constant := 2**31 - 1;
    Ran : Random := Random.Start(Len, Mult, Mod);

    type Arr_Of_Int is array(Univ_Integer range <>) of Univ_Integer;

    package My_Sorter is
      new Sorting(Univ_Integer, Univ_Integer, Arr_Of_Int, Univ_Integer'Image);
    Vec : Arr_Of_Int := Create(1 .. Len, 0);
begin

    Put_Line("Seed = " & Len'Image &
      ", Mult = " & Mult'Image & ", Mod = " & Mod'Image);

    for I in 1..Len loop
        Vec[I] := Next(Ran) mod 100;
    end loop;

    Vec2 : Arr_Of_Int := Vec;

    Put_Line("Before sort, Vec = ");
    for I in 1 .. Vec'Length loop
        Put(" " & Vec[I]'Image);
        if I < Vec'Length then
            Put(",");
            if I mod 10 = 0 then
                Put_Line("");
            end if;
        end if;
    end loop;
    Put_Line("");

    My_Sorter.Quicksort(Vec, Debug);
    pragma Assert((for all I in 1 .. Vec'Length - 1 => Vec[I] <= Vec[I+1]));

    Put_Line("After sort, Vec = ");
    for I in 1 .. Vec'Length loop
        Put(" " & Vec[I]'Image);
        if I < Vec'Length then
            Put(",");
            if I mod 10 = 0 then
                Put_Line("");
            end if;
        end if;
    end loop;
    Put_Line("");

    My_Sorter.Quicksort(Vec2, Debug => #False);

    Put_Line("After 2nd sort, Vec2 = ");
    for I in 1 .. Vec2'Length loop
        Put(" " & Vec2[I]'Image);
        if I < Vec2'Length then
            Put(",");
            if I mod 10 = 0 then
                Put_Line("");
            end if;
        end if;
    end loop;
    Put_Line("");

end Test_Sort;

