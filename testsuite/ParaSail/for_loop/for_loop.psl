concurrent interface Atomic_Set<Elem is Hashable<>> is
    op "[]" () -> Atomic_Set;
    op "in" (Left : Elem; locked Right : Atomic_Set) -> Boolean;
    op "|=" (locked var Left : Atomic_Set; Right : Elem);
    func First_Time_Included
      (locked var Left : Atomic_Set; Right : Elem) -> Boolean;
end interface Atomic_Set;

concurrent class Atomic_Set is
    var Data : Set<Elem> := [];
 exports
    op "[]" () -> Atomic_Set
      is (());

    op "in" (Left : Elem; locked Right : Atomic_Set) -> Boolean
      is (Left in Right.Data);

    op "|=" (locked var Left : Atomic_Set; Right : Elem) is
        Left.Data |= Right;
    end op "|=";

    func First_Time_Included
      (locked var Left : Atomic_Set; Right : Elem) -> Result : Boolean is
       Result :=  Right not in Left.Data;
       Left.Data |= Right;
    end func First_Time_Included;
end class Atomic_Set;

func First_Time(var Seen : Atomic_Set<Univ_Integer>; I : Univ_Integer) 
-> Boolean is
    return First_Time_Included (Seen, I);
end func First_Time;

func Test_For_Loop(X, Y : Univ_Integer) is

    Println("unordered loop:");
    for I in X..Y loop
	Println("I = " | I);
    end loop;

    Println("forward loop:");
    for I in X..Y forward loop
	Println("I = " | I);
    end loop;

    Println("reverse loop:");
    for I in X..Y reverse loop
	Println("I = " | I);
    end loop;

    Println("concurrent loop:");
    for I in X..Y concurrent loop
	Print('*');
    end loop;
    Println("\nShould be `(Y-X+1) asterisks above");

    Println("then/while loop:");
    for I := X then I+1 while I <= Y loop
	Println("I = " | I);
    end loop;

    var Seen : Atomic_Set<Univ_Integer> := [];

    Println("then/while loop, combinations of powers of 2 and 3:");
    for I := X then 2*I || 3 * I while 
      I <= Y and then First_Time(Seen, I) loop
	// Only print it the first time

   // JM: Output modified to avoid differences between executions
	// Println("I = " | I | ", Seen = " | Count(Seen));
	Println("I = " | I);
    end loop;

end func Test_For_Loop;

func main(Args : Basic_Array<Univ_String>) is
   Test_For_Loop (1, 5);
end func main;
